/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


/* 
 * Vector structure requirements are following:
 * OPERATORS: 
 *  vec<T> + vec<T>
 *  vec<T> + T
 *  vec<T> - vec<T>
 *  vec<T> - T
 *  vec<T> * T
 *  T * vec<T> (calculate vector dot product)
 *  vec<T> / T 
 *  void *= T
 *  void +=  vec<T>
 *  void += T
 *  void -=  vec<T>
 *  void -= T
 *  void /= T
 *  bool ==  vec<T>
 *
 *  OPTIONAL: 
 *    void = <VERT_DATA>
 *    bool == <VERT_DATA>
 * 
 * MEMBER METHODS:
 *  T length()
 *  void norm()
 *  static void cross(vec<T>, vec<T>) (find the cross product of two vectors)
 */

#ifndef __VEC4_H
#define __VEC4_H


namespace dengMath {
    template<typename T>
    struct vec4 {
        T first, second, third, fourth;

        /******************************/
        /***** Operator overloads *****/
        /******************************/

        vec4<T> operator+(const vec4<T> &vec) const; 
        vec4<T> operator+(const T &c) const; 
        vec4<T> operator-(const vec4<T> &vec) const; 
        vec4<T> operator-(const T &c) const; 
        T operator*(const vec4<T> &vec) const; 
        vec4<T> operator*(const T &c) const; 
        vec4<T> operator/(const T &c) const; 
        void operator*=(const T &c); 
        void operator+=(const vec4<T> &vec); 
        void operator+=(const T &c); 
        void operator-=(const vec4<T> &vec); 
        void operator-=(const T &c); 
        void operator/=(const T &c); 
        deng_bool_t operator==(const vec4<T> &vec) const; 


        /*
         * C vertices structure assignment operators
         */
        void operator=(const das_ObjColorData &color); 
        void operator=(const das_ObjVertData &vert); 
        void operator=(const das_ObjNormalData &nor); 


        /*
         * Smaller vector struct assignment operators
         */
        void operator=(const vec2<T> &vec);
        void operator=(const vec3<T> &vec);


        /*
         * C vertices structure comparison operators
         */
        deng_bool_t operator==(const das_ObjColorData &color) const;
        deng_bool_t operator==(const das_ObjVertData &vert) const;
        deng_bool_t operator==(const das_ObjNormalData &norm) const;


        /*
         * Get the current length of the vector
         */
        T length() const;

        
        /*
         * Normalise the vector to length 1
         */
        void norm();

        
        /*
         * Find the crossproduct of two vectors
         * PS! Only first three axes are used
         */
        template<typename CT>
        static vec4<CT> cross(const vec4<CT> &vec1, const vec4<CT> &vec2); 
    };
}

#include <../src/math/vec4.cpp>
#endif
