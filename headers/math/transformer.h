/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __TRANSFORMER_H
#define __TRANSFORMER_H


#ifdef __TRANSFORMER_CPP
    #include <type_traits>
    #include <stdlib.h>
    #include <cmath>

    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <das/assets.h>
    #include <math/vec2.h>
    #include <math/vec3.h>
    #include <math/vec4.h>
    #include <math/mat3.h>
    #include <math/mat4.h>
#endif


namespace dengMath {

    /*******************************/
    /*******************************/
    /******** Transformer2D ********/
    /*******************************/
    /*******************************/

    /*
     * Perform transformation calculations on 2D assets using CPU
     */
    class Transformer2D 
    {
    private: 
        mat3<deng_vec_t> m_rot_mat;

        mat3<deng_vec_t> m_translation_mat;
        mat3<deng_vec_t> m_scale_mat;
        mat3<deng_vec_t> m_shear_mat;

    private:
        /*
         * Apply the matrix for each vertex in the asset
         */
        void __matApply(mat3<deng_vec_t> &mat, das_Asset &asset);

    public:
        Transformer2D();

        /*
         * Rotate the given asset
         * Rotation must be in radians
         */
        void rotate(deng_vec_t rot, das_Asset &asset);


        /*
         * Scale the given asset
         */
        void scale(const vec2<deng_vec_t> &scale, das_Asset &asset);


        /*
         * Shear the given asset with the factor of opposite coordinate
         */
        void shear(const vec2<deng_vec_t> &shear, das_Asset &asset);


        /*
         * Translate the given asset vertices from custom coordinate system into
         * world coordinate system
         */
        void translate (
            const vec2<deng_vec_t> &u,
            const vec2<deng_vec_t> &v,
            const vec2<deng_vec_t> &origin,
            das_Asset &asset
        );

        
        /*
         * Set rotation for the class transformation matrix
         */
        void setRotation(deng_vec_t rot);


        /*
         * Set scale for class transformation matrix
         */
        void setScale(const vec2<deng_vec_t> &scale);

        
        /*
         * Set shear for class transformation matrix
         */
        void setShear(const vec2<deng_vec_t> &shear);


        /*
         * Set coordinate translation for class transformation matrix
         */
        void setTranslation (
            const vec2<deng_vec_t> &u,
            const vec2<deng_vec_t> &v,
            const vec2<deng_vec_t> &w,
            const vec2<deng_vec_t> &origin
        );


        /*
         * Get the class transformation matrix 
         */
        mat3<deng_vec_t> getTransformMat();


        /*
         * Reset all transformations to identity matrices
         */
        void reset();
    };


    /*******************************/
    /*******************************/
    /******** Transformer2D ********/
    /*******************************/
    /*******************************/

    /*
     * Perform transformation calculations on 3D assets using CPU
     */
    class Transformer3D 
    {
    private:
        mat4<deng_vec_t> m_rot_x_mat;
        mat4<deng_vec_t> m_rot_y_mat;
        mat4<deng_vec_t> m_rot_z_mat;

        mat4<deng_vec_t> m_translation_mat;
        mat4<deng_vec_t> m_scale_mat;

    private:
        /*
         * Apply the matrix for each vertex in the asset
         */
        void __matApply(mat4<deng_vec_t> &mat, das_Asset &asset);

    public:
        Transformer3D();


        /*
         * Rotate the given asset.
         * Rotation must be in radians
         */
        void rotate(const vec3<deng_vec_t> &rot, das_Asset &asset);


        /*
         * Scale the given asset
         */
        void scale(const vec3<deng_vec_t> &scale, das_Asset &asset);


        /*
         * Translate the given asset vertices from custom coordinate system into
         * world coordinate system
         */
        void translate (
            const vec3<deng_vec_t> &u,
            const vec3<deng_vec_t> &v,
            const vec3<deng_vec_t> &w,
            const vec3<deng_vec_t> &origin,
            das_Asset &asset
        );

        
        /*
         * Set rotation for the class transformation matrix
         */
        void setRotation(const vec3<deng_vec_t> &rot);


        /*
         * Set scale for class transformation matrix
         */
        void setScale(const vec3<deng_vec_t> &scale);


        /*
         * Set coordinate translation for class transformation matrix
         */
        void setTranslation (
            const vec3<deng_vec_t> &u,
            const vec3<deng_vec_t> &v,
            const vec3<deng_vec_t> &w,
            const vec3<deng_vec_t> &origin
        );


        /*
         * Get the class transformation matrix 
         */
        mat4<deng_vec_t> getTransformMat();


        /*
         * Reset all transformations to identity matrices
         */
        void reset();
    };
}

#endif
