/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __CONVERSION_H
#define __CONVERSION_H


#ifdef __CONVERSION_CPP
    #include <type_traits>
    #include <stdlib.h>
    #include <common/base_types.h>
    #include <data/assets.h>
    #include <math/vec2.h>
#endif


namespace dengMath {
    class Conversion {
    public:
        
        /// Convert degrees into radians
        static const deng_f64_t degToRad(deng_f64_t deg);

        
        /// Convert radians into degrees
        static const deng_f64_t radToDeg(deng_f64_t rad);


        /// Convert from vector coordinate size into pixel size
        static const deng_px_t vector2DSizeToPixelSize (
            deng_vec_t vec_size, 
            deng_ui32_t window_size
        );


        /// Convert from pixel size into vector coordinate size
        static const deng_vec_t pixelSizeToVector2DSize (
            deng_px_t pixel_size,
            deng_ui32_t window_size
        );


        /// Find the absolute position of child coordinates
        /// vert must be a pointer to valid array with at least 4 members
        static const vec2<deng_vec_t> findAbsPosition (
            das_ObjPosData *vert,
            vec2<deng_vec_t> child_pos
        );


        /// Find the relative position of absolute coordinates
        /// vert must be a pointer to valid array with at least 4 members
        static const vec2<deng_vec_t> findRelPosition (
            das_ObjPosData *vert,
            vec2<deng_vec_t> abs_pos
        );


        /// Find the absolute size of the child element
        static const deng_vec_t findAbsSize (
            deng_vec_t parent_size,
            deng_vec_t child_size
        );


        /// Find the relative size of abs_size from its parent_size
        static const deng_vec_t findRelSize (
            deng_vec_t parent_size,
            deng_vec_t abs_size
        );


        /// NOTE: Differences between mouse coordinates and vector coordinates
        /// Mouse coordinates are used to describe pixel coordinates with starting origin from top-left of the surface
        /// Primarly mouse coordinates are used to describe mouse and ImGui window locations 
        /// Vector coordinates on the other hand are used to specify object coordinates in the viewspace
        /// NOTE: Keep in mind that vector coordinates have a starting origin from the center of the surface and y-axis up is 
        /// negative, while y-axis down is positive coordinate direction


        /// Convert mouse axis position to corresponding vector coordinate
        static const deng_vec_t mouseCoordToVecCoord(const deng_px_t mouse_axis_pos, const deng_px_t axis_len);


        /// Convert vector axis coordinate to corresponding mouse coordinate
        static const deng_vec_t vecCoordToMouseCoord(const deng_vec_t vec_axis_pos, const deng_px_t axis_len);
    };
}

#endif
