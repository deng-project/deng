/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __CAMERA_MAT_H
#define __CAMERA_MAT_H


#ifdef __CAMERA_MAT_CPP
    #include <type_traits>
    #include <stdlib.h>
    #include <cmath>

    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <das/assets.h>
    #include <math/vec2.h>
    #include <math/vec3.h>
    #include <math/vec4.h>
    #include <math/mat3.h>
    #include <math/mat4.h>
    
    #define __DENG_CAMERA_RIGHT     vec4<deng_vec_t>{1.0f, 0.0f, 0.0f, 0.0f};
    #define __DENG_CAMERA_UP        vec4<deng_vec_t>{0.0f, 1.0f, 0.0f, 0.0f};
    #define __DENG_CAMERA_FORWARD   vec4<deng_vec_t>{0.0f, 0.0f, -1.0f, 0.0f};
#endif


namespace dengMath {

    /*
     * This class is used as an abstraction for performing transformations 
     * on camera systems
     */
    class CameraMatrix 
    {
    private:
        vec4<deng_vec_t> m_camera_pos;
        mat4<deng_vec_t> m_camera_mat;

        deng_vec_t m_x_rot;
        deng_vec_t m_y_rot;

        vec4<deng_vec_t> m_rs = vec4<deng_vec_t>{1.0f, 0.0f, 0.0f, 0.0f};
        vec4<deng_vec_t> m_ts = vec4<deng_vec_t>{0.0f, 1.0f, 0.0f, 0.0f};
        vec4<deng_vec_t> m_fs = vec4<deng_vec_t>{0.0f, 0.0f, -1.0f, 0.0f};

        // Camera coordinate specific rotation matrices
        mat4<deng_vec_t> m_rot_x_mat;
        mat4<deng_vec_t> m_rot_y_mat;

    public:
        CameraMatrix(deng_CameraType type);

        
        /* 
         * Force set camera position to a new one
         */
        void setCameraPosition(const vec3<deng_vec_t> &camera_pos);


        /*
         * Move camera by one movement step
         */
        void moveCamera (
            const vec3<deng_vec_t> &mov_speed, 
            deng_bool_t is_world,
            deng_bool_t ignore_pitch,
            const deng_CoordinateAxisType &movement_type
        );


        /*
         * Set new rotation for the camera relative to the its coordinate system
         */
        void setCameraRotation (
            deng_vec_t x_rot, 
            deng_vec_t y_rot
        );


        /*
         * Set new rotation for the camera relative to its origin point in world coordinates
         */
        void setOriginRotation (
            dengMath::vec3<deng_vec_t> point,
            deng_vec_t x_rot,
            deng_vec_t y_rot
        );


        /*
         * Create transformation matrix for camera system based
         * on previously submitted values
         */
        void camTransform(deng_bool_t is_world_origin);

    // Getter methods
    public: 
        
        /*
         * Get the transformation matrix
         */
        mat4<deng_vec_t> getTransformMat();


        /*
         * Get the current position of the camera
         */
        vec4<deng_vec_t> getPosition();

        
        /*
         * Get current camera sides' coordinates
         */
        void getSides (
            vec4<deng_vec_t> *p_u,
            vec4<deng_vec_t> *p_v,
            vec4<deng_vec_t> *p_w
        );
    };
}

#endif
