/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __REGISTRY_H
#define __REGISTRY_H


#ifdef __REGISTRY_CPP
    #include <vector>
    #include <utility>
    #include <stdlib.h>
    #include <string.h>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <common/hashmap.h>
    #include <data/assets.h>
    
    #include <math/vec2.h>
    #include <math/vec3.h>
    #include <math/vec4.h>
    #include <math/mat3.h>
    #include <math/mat4.h>
    #include <deng/lighting/light_srcs.h>
    #include <deng/vulkan/resources.h>
#endif

namespace deng {

    /// Data union for all suitable registry types that can be submitted
    union RegType {
        das_Asset asset;
        vulkan::__vk_Asset vk_asset;
        das_Texture tex;
        vulkan::__vk_Texture vk_tex;
        __PtLightSrc pt_light;
        __SunLightSrc sun_light;
        __DirectionLightSrc dir_light;
    };

    
    /// Main data structure for keeping information about hash mapped 
    /// registry entry
    struct __RegEntry {
        RegType element;
        deng_SupportedRegType type;
        deng_ui32_t index;
    };
    

    /// Global registry entries' handler class
    class __GlobalRegistry {
    private:
        std::vector<__RegEntry> m_entries;
        Hashmap m_map;

    private:
        __RegEntry *__findElemPtr(deng_Id id, deng_SupportedRegTypeBitMask expected_type,
            deng_SupportedRegType *p_type_feedback);

    public:
        __GlobalRegistry();
        ~__GlobalRegistry();


        /*
         * Register following data for usage
         * An runtime error is thrown if the registry already has an element with the same id as specified one
         */
        void push (
            deng_Id uuid, 
            deng_SupportedRegType, 
            const RegType &data
        );


        /*
         * Retrieve and verify entry from registry
         * An runtime error is thrown if the registry entry type does not correspond to
         * the expected registry entry type or if id is invalid
         */
        RegType &retrieve (
            deng_Id id,
            deng_SupportedRegTypeBitMask expected_type_mask,
            deng_SupportedRegType *p_type_feedback
        );


        /*
         * Retrieve and verify the pointer of an entry from registry
         * An runtime error is thrown if the registry entry type does not correspond to
         * the expected registry entry type or if id is invalid
         */
        RegType *retrievePtr (
            deng_Id id,
            deng_SupportedRegTypeBitMask expected_type_mask,
            deng_SupportedRegType *p_type_feedback
        );

        
        /// Pop an entry from from registry 
        /// An runtime error is thrown if the id is invalid
        RegType pop(deng_Id id);


        /// Find the size of total registry elements
        size_t size();
        

        /// Find all elements in the registry
        const std::vector<__RegEntry> &all();
    };
}

#endif
