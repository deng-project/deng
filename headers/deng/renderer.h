/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __RENDERER_H
#define __RENDERER_H

#ifdef __RENDERER_CPP
    #include <iostream>
    #include <vector>
    #include <mutex>
    #include <thread>
    #include <array>
    #include <string>
    #include <chrono>
    #include <vulkan/vulkan.h>
    
    #include <common/base_types.h>
    #include <common/uuid.h>
    #include <common/err_def.h>

    #include <das/assets.h>
    #include <das/tex_loader.h>

    #include <deng/forward_dec.h>
    #include <math/deng_math.h>
    #include <deng/surface_window.h>
    #include <deng/window.h>
    #include <deng/vulkan/vulkan_qm.h>
    #include <deng/vulkan/vulkan_sd.h>
    #include <deng/vulkan/vulkan_resources.h>
    #include <deng/vulkan/vulkan_rend_infos.h>
    #include <deng/vulkan/vulkan_pipelines.h>
    #include <deng/vulkan/vulkan_renderer.h>

    #include <utils/timer.h>
    #include <utils/font.h>

    #include <deng/camera.h>
    #include <dengui/dengui_win_def.h>
    #include <dengui/dengui_infos.h>
    #include <dengui/dengui_child.h>
    #include <dengui/map_editor_ui.h>
#endif

#define DENG_DEFAULT_NEAR_PLANE 0.1f
#define DENG_DEFAULT_FAR_PLANE 25.0f

namespace deng {

    /*
     * Main renderer class
     */
    class Renderer {   
    public:
        /*
         * Set renderer usage hints for the renderer
         */
        void setHints(deng_RendererHintBits hints);


        /*
         * Setup graphics api specific renderer from the hints given
         */
        void setup();


        /*
         * Submit all textures data before renderer initialisation.
         * PS! Texture UUIDs have to be generated before submitting them
         */
        void submitTextures (
            das_Texture *textures,
            deng_ui32_t tex_c
        );


        /*
         * Submit all assets data before renderer initialisation.
         * PS! Asset UUIDs have to be generated before submitting them
         */
        void submitAssets (
            das_Asset *assets,
            deng_ui32_t asset_c
        );


        /*
         * Submit all rasterised text instances before renderer initialisation.
         * PS! Text UUIDs have to be generated before submitting them. This is usually
         * handled by the StringRasterizer class
         */
        void submitRasterisedText (
            dengUtils::BitmapStr *text,
            deng_ui32_t text_c
        );

        
        /*
         * Push assets to the renderer during renderer runtime.
         * PS! Asset UUIDs have to be generated before pushing them
         */
        void pushAssets (
            das_Asset *assets,
            deng_ui32_t asset_c
        );


        /*
         * Push textures to the renderer during renderer runtime.
         * PS! Texture UUIDs have to be generated before pushing them
         */
        void pushTextures (
            das_Texture *textures,
            deng_ui32_t tex_c
        );


        /*
         * Push rasterised text instances to the renderer during renderer runtime.
         * PS! Text UUIDs have to be generated before submitting them. This is usually
         * handled by the StringRasterizer class
         */
        void pushRasterisedText (
            dengUtils::BitmapStr *text,
            deng_ui32_t text_c
        );


        /*
         * Overwrite asset vertices to main buffer.
         * Note that this method expects that vertices count hasn't changed,
         * otherwise weird stuff can happen!
         */
        void updateAssetVertices(const dengMath::vec2<deng_ui32_t> &region);

        
        /*
         * This method frees all the asset data on the main buffer and reallocates
         * it into new buffer.
         */
        void updateAssets();


        /*
         * This method frees all texture images data on the image buffer and
         * reallocates it into new buffer. Also texture images and their samplers are
         * remade.
         */
        void updateTextures();


        /* 
         * Begin the rendering loop
         */
        void run();        
    };
}


#endif
