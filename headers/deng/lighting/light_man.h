/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __LIGHT_MANAGER_H
#define __LIGHT_MANAGER_H

#ifdef __LIGHT_MANAGER_CPP
    #include <stdlib.h>
    #include <cmath>
    #include <vector>
    #include <array>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/hashmap.h>
    #include <common/err_def.h>
    #include <common/uuid.h>
    #include <data/assets.h>
    #include <math/vec2.h>
    #include <math/vec3.h>
    #include <math/vec4.h>
    #include <math/mat3.h>
    #include <math/mat4.h>

    #include <deng/lighting/light_srcs.h>
    #include <deng/vulkan/resources.h>
    #include <deng/registry/registry.h>
#endif

namespace deng {
    
    /// Main light handling class
    class LightManager {
    private:
        std::vector<deng_Id> m_pt_srcs;
        std::vector<deng_Id> m_sun_srcs;
        std::vector<deng_Id> m_dir_srcs;

        deng_ui32_t m_src_c = 0;
        __GlobalRegistry &m_reg;

    public:
        LightManager(__GlobalRegistry &reg);

        /// Create a new point light source
        deng_Id newPtLightSrc(deng_vec_t intensity, 
            const dengMath::vec3<deng_vec_t> &pos);

        /// Create new sun light source that has collinear light rays
        deng_Id newSunLightSrc(deng_vec_t sky_height, deng_vec_t angle, 
            deng_vec_t intensity);

        
        /// Create a new pointed directional light source
        deng_Id newDirectionalLightSrc(deng_vec_t intensity, deng_vec_t radius,
            const dengMath::vec3<deng_vec_t> &normal, 
            const dengMath::vec3<deng_vec_t> &pos);


        /// Move the light source in world coordinate space
        /// If the specified light source type is sun light then change sky height only
        void movSrc(deng_Id src, const dengMath::vec3<deng_vec_t> &delta);

        
        /// Rotate directional light direction
        /// If the light source is something other than directional light, 
        /// throw runtime error
        void dirLightSrcRotate(deng_Id id, const dengMath::vec2<deng_vec_t> &rot);

    /// Getter methods
    public:
        deng_ui32_t getMaxLightSrcCount();
        std::vector<deng_Id> getUniversalLightSources();
    };

}

#endif
