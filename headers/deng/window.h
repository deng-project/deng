/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __WINDOW_H
#define __WINDOW_H

#ifdef __WINDOW_CPP
    #include <stdlib.h>
    #include <vector>
    #include <string>

    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <data/assets.h>
    #include <math/deng_math.h>
    #include <vulkan/vulkan.h>
#endif


#include <deng/surface/surface_window.h>
#include <deng/vulkan/surface.h>


namespace deng {   
    
    /// Main window handling class for DENG
    class Window {
    private:
        deng_SurfaceWindow *m_p_surface;
        char *m_title;
        dengMath::vec2<deng_ui32_t> m_size;
        deng_bool_t m_is_vc = false;
        dengMath::vec2<deng_vec_t> m_pixel_size;
        dengMath::vec2<deng_px_t> m_prev_vc_pos;

    public:
        Window(deng_i32_t width, deng_i32_t height, const char *title);
        ~Window();


        /// Toggle virtual cursor mode
        void toggleVCMode();


        /// Force set virtual cursor mode
        void changeVCMode(deng_bool_t is_vc);

        
        /// Hide the cursor's visbility
        void hideCursor();


        /// Make the cursor visible
        /// NOTE: There should be a special cursor struct for DENG called deng_Cursor in the future
        /// but for now it is ignored
        void showCursor();


        /// Check if virtual cursor mode is enabled
        deng_bool_t isVCP();


        /// Update window and input devices data
        void update();


        /// Force specified VCP position to virtual mouse cursor instance
        void forceVCPPos(const dengMath::vec2<deng_px_t> &pos);


        /// Create new vulkan surface instance
        VkResult initVkSurface(VkInstance &instance,
            VkSurfaceKHR &surface);


        /// Search for all required vulkan extensions
        char **findVulkanSurfaceExtensions(
            deng_ui32_t *p_ext_c, deng_bool_t enable_vl);



        /// Get the current mouse position
        dengMath::vec2<deng_px_t> getMPos() const;


        /// Get the mouse delta compared to previous frame mouse position
        dengMath::vec2<deng_px_t> getMDelta() const;


        /// Get the title of the window
        const char *getTitle() const;

        
        /// Get the size of the window
        dengMath::vec2<deng_ui32_t> getSize() const;


        /// Get the vector size for one pixel in surface
        dengMath::vec2<deng_vec_t> getPixelSize() const;
    };
}

#endif
