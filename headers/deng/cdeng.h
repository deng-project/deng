/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


/*
 * This file provides all C bindings for DENG api 
 */
#ifndef __CDENG_H
#define __CDENG_H

#ifdef __CDENG_CPP
    #define DENG_ENABLE_STD_INCL
    #include <deng/deng.h>
    #include <deng/deng_math.h>

    static deng::FPPCamera *__p_fpp_cam;
    static deng::EditorCamera *__p_ed_cam;
    static deng_CameraType __cam_t;

    static deng::Renderer *__p_rend;
    static deng::WindowWrap *__p_win;
    static dengUtils::TriangleGenerator *__p_tri_gen;
    static dengUtils::RectangleGenerator *__p_rec_gen;
    static dengUtils::CircleGenerator *__p_cir_gen;

#endif


/*
 * Information structure for specifying fpp camera creation info in 
 * C language environment
 */
typedef struct deng_FPPCameraInfoC {
    das_ObjVertData camera_mov_speed;
    das_ObjVertData2D mouse_sens;
    deng_vec_t FOV;
    deng_vec_t near_plane;
    deng_vec_t far_plane;
} deng_FPPCameraInfoC;


/*
 * Information structure for specifying editor camera creation info in 
 * C language environment
 */
typedef struct deng_EditorCameraInfoC {
    deng_vec_t zoom_step;
    das_ObjVertData origin;
    das_ObjVertData2D mouse_sens;
    deng_vec_t FOV;
    deng_vec_t near_plane;
    deng_vec_t far_plane;
} deng_EditorCameraInfoC;


/*
 * Create surface window and start new renderer instance
 */
void deng_InitApiC (
    deng_ui32_t width, 
    deng_ui32_t height, 
    char *title,
    void *cam_info,
    deng_CameraType cam_type
);



/*
 * Free all memory allocated for the DENG API
 */
void deng_DestroyApiC();


/******************************************************/
/********* Direct renderer class method wrappers ******/
/******************************************************/

/*
 * Give renderer usage hints to the renderer
 */
void deng_SetRendererHintsC(deng_RendererHintBits hints);


/*
 * Submit asset_c amount of assets to the renderer
 */
void deng_SubmitAssetsC (
    das_Asset *assets, 
    size_t asset_c
);


/*
 * Submit tex_c amount of textures to the renderer
 */
void deng_SubmitTexturesC (
    das_Texture *textures,
    deng_i32_t tex_c
);


/*
 * Submit texture file to renderer
 */
void deng_SubmitTextureFile (
    char *tex_file, 
    char *uuid
); 


/*
 * Finish renderer initialisation and run renderer
 */
void deng_RunRenderer (
    das_ObjColorData background, 
    deng_RendererUsageMode usage
);

#endif

