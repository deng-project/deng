/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __CAMERA_H
#define __CAMERA_H

#ifdef __CAMERA_CPP
    #define __DENG_DEFAULT_ZOOM_STEP 0.1f
    
    #include <mutex>
    #include <cstring>
    #include <common/base_types.h>
    #include <vulkan/vulkan.h>
    #include <data/assets.h>

    #include <deng/surface/key_definitions.h>
    #include <deng/surface/key_ev.h>
    #include <math/vec2.h>
    #include <math/vec3.h>
    #include <math/vec4.h>
    #include <math/mat3.h>
    #include <math/mat4.h>
    #include <math/projection_mat.h>
    #include <math/camera_mat.h>
    #include <common/err_def.h>
    #include <deng/window.h>
    #include <utils/timer.h>
#endif


#include <deng/camera/cam_base.h>
#include <deng/camera/ed_cam.h>
#include <deng/camera/tpp_cam.h>
#include <deng/camera/fpp_cam.h>


namespace deng {

    /// DENG engine camera handling class
    /// This class is universal and it can be used to create first person, editor and third person
    /// camera systems
    class Camera3D {
    private:
        __FPPCamera *p_fpp_cam = NULL;
        __EditorCamera *p_ed_cam = NULL;
        Window *m_p_win;
        deng_CameraType m_cam_type;

    public:
        Camera3D (
            deng_CameraType cam_type,
            deng_vec_t fov,
            const dengMath::vec2<deng_vec_t> &planes,
            const dengMath::vec3<deng_vec_t> &mov_speed,
            const dengMath::vec2<deng_f64_t> &rot_sens,
            deng_bool_t ignore_pitch_rot,
            Window *win
        );


        /// Set the camera key bindings
        /// NOTE: These bindings are the ones that control camera movement and rotation actions
        void setBindings(const Camera3DBindings &bindings);


        /// Move camera's origin in world space by delta_mov
        /// NOTE: This method only effects editor camera and third person perspective camera
        /// systems. If camera type is first person perspective then runtime exception is thrown
        void moveOrigin(const dengMath::vec3<deng_vec_t> &delta_mov);


        /// Move camera's position by delta_mov in camera's coordinate system
        void moveCameraPOVC (
            const dengMath::vec3<deng_vec_t> &delta_mov,
            deng_bool_t ignore_pitch
        );


        /// Move camera's position in world coordinate system
        void moveCameraPOVW (
            const dengMath::vec3<deng_vec_t> &delta_mov,
            deng_bool_t ignore_pitch
        );


        /// Rotate camera's position by rot in camera's coordinate system
        void rotCameraPOVC(const dengMath::vec2<deng_vec_t> &rot);


        /// Rotate camera's position by rot in world's coordinate system
        void rotCameraPOVW(const dengMath::vec2<deng_vec_t> &rot);


        /// Main camera system update method
        void update();

        
        /// Get the camera type of the current camera instance
        deng_CameraType getType();


        /// Get the dot product of camera's view and projection matrix
        dengMath::mat4<deng_vec_t> getCameraMat();


        /// Get the bare camera view matrix
        dengMath::mat4<deng_vec_t> getViewMat();

        
        /// Returns true if camera has perspective view
        deng_bool_t isPerspective();
    };
}

#endif
