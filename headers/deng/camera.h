/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef CAMERA_H
#define CAMERA_H

#ifdef __CAMERA_CPP
    #include <iostream>
    #include <vector>
    #include <mutex>
    #include <string.h>
    #include <string>
    #include <math.h>
    #include <array>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <common/common.h>
    #include <common/hashmap.h>
    #include <das/assets.h>

    #include <deng/forward_dec.h>
    #include <deng/surface_window.h>
    #include <math/deng_math.h>
    #include <deng/window.h>

    #include <deng/vulkan/vulkan_qm.h>
    #include <deng/vulkan/vulkan_resources.h>
    #include <deng/vulkan/vulkan_rend_infos.h>
    #include <utils/font.h>
    #include <utils/collision.h>
    #include <utils/timer.h>
#endif

namespace deng {
    /*
     * Data struct for sharing mouse coordinates data
     * between multiple threads
     */
    struct __SharedMouseData {
        std::mutex mut;
        dengMath::vec2<deng_px_t> mouse_coords;
        deng_bool_t is_mouse_input;
    };


    /*
     * Parent struct for every camera class
     */
    struct CameraBase {
        Window *m_p_ww = NULL;
        deng_vec_t m_draw_distance;
        deng_vec_t m_FOV; // Radians
    };

    
    /*
     * Base parent class for camera event classes
     * This class contains methods mainly for handling mouse position and its usage
     */
    class EventBase {
    public:
        dengMath::vec2<deng_f64_t> m_mouse_pos;
        dengMath::vec2<deng_f64_t> m_mouse_sens;
        dengMath::vec2<deng_VCPOverflowAction> m_vcp_overflow;
        dengMath::vec2<dengMath::vec2<deng_f64_t>> m_vc_bounds;
        dengMath::vec2<deng_f64_t> m_max_rot;

    public:
        EventBase (
            const dengMath::vec2<deng_f64_t> &mouse_sens,
            const dengMath::vec2<deng_VCPOverflowAction> &vcp_act,
            const dengMath::vec2<dengMath::vec2<deng_f64_t>> &vc_bounds,
            const dengMath::vec2<deng_f64_t> &max_rot
        );

        void updateMouseEvData(Window *p_ww);
        dengMath::vec2<deng_f64_t> getMouseRotation();
        void getMousePositionFromRot (
            Window *p_ww,
            dengMath::vec2<deng_f64_t> rot
        );
    };


    // First person camera mouse input mode change callback function type
    // Parameters: current virtual position
    typedef void(*FPPInputChangeCallback) (const dengMath::vec2<deng_f64_t> &vcp);

    /*
     * FPPCamera forward declaration
     */
    class FPPCamera;

    /* 
     * Perspective first person camera event classe 
     */
    class FPPCameraEv : private EventBase {
    private:
        dengUtils::Timer m_mov_timer;
        dengUtils::Timer m_input_mode_timer;
        dengMath::vec4<deng_vec_t> m_move_speed;
        dengMath::vec3<deng_MovementEvent> m_movements;
        FPPInputChangeCallback m_input_disable_callback;
        FPPInputChangeCallback m_input_enable_callback;

    private:
        void findMovements(Window *p_ww);
        void checkForInputModeChange (
            Window *p_ww,
            dengMath::CameraMatrix *p_vm
        );

        void update (
            Window *p_ww, 
            FPPCamera *p_cam
        );

        deng_bool_t keyEvHandler(deng_Key key);

    public:
        FPPCameraEv (
            Window *p_ww,
            const dengMath::vec2<deng_f64_t> &mouse_sens,
            const dengMath::vec3<deng_vec_t> &camera_mov_speed,
            dengMath::CameraMatrix *p_vm,
			FPPInputChangeCallback mov_disable_callback,
			FPPInputChangeCallback mov_enable_callback
        );

        void updateEv (
            Window *p_ww, 
            FPPCamera *p_cam
        );

        dengMath::vec4<deng_vec_t> getMoveSpeed (
            deng_bool_t op_x,
            deng_bool_t op_y,
            deng_bool_t op_z
        );
    };

        
    /* First person perspective camera class */
    class FPPCamera : private FPPCameraEv, private CameraBase {
    public:
        dengMath::CameraMatrix view_matrix;
        dengMath::ProjectionMatrix *p_projection_matrix;

    public:
        FPPCamera (
            const dengMath::vec3<deng_vec_t> &camera_mov_speed_mul, 
            const dengMath::vec2<deng_f64_t> &mouse_sens, 
            deng_vec_t FOV, 
            deng_vec_t near_plane, 
            deng_vec_t far_plane, 
			FPPInputChangeCallback mov_disable_callback,
			FPPInputChangeCallback mov_enable_callback,
            Window *p_ww
        );
        ~FPPCamera();

        // Move camera position according to its coordinates
        void moveW();
        void moveRW();
        void moveU();
        void moveRU();
        void moveV();
        void moveRV();

        // Wrapper around event update
        void update(); 
    };


    /*
     * Event handler class for editor camera
     */
    class EditorCameraEv : private EventBase {
    private:
        deng_EditorCameraEvent m_editor_cam_ev;
        dengMath::vec2<deng_f64_t> m_last_rot = {0, 0};
        deng_vec_t m_zoom_step;
        deng_bool_t m_is_rot_cur = false;

    public:
        EditorCameraEv (
            dengMath::vec2<deng_f64_t> mouse_sens,
            deng_vec_t zoom_step,
            dengMath::vec3<deng_vec_t> origin,
            Window *p_ww,
            dengMath::CameraMatrix *p_vm
        );
        void findEditorEvent(Window *p_ww);

        void zoomIn (
            Window *p_ww,
            dengMath::CameraMatrix *p_vm
        );

        void zoomOut ( 
            Window *p_ww,
            dengMath::CameraMatrix *p_vm
        );
        
        void updateEv (
            Window *p_ww,
            dengMath::vec3<deng_vec_t> origin,
            dengMath::CameraMatrix *p_vm
        );
    };


    /*
     * Main class for editor camera instance creation
     */
    class EditorCamera : private EditorCameraEv, private CameraBase {
    private:
        dengMath::vec3<deng_vec_t> m_origin;

    public:
        dengMath::CameraMatrix view_matrix;
        dengMath::ProjectionMatrix *p_projection_matrix;

    public:
        EditorCamera (
            deng_vec_t zoom_step,
            const dengMath::vec3<deng_vec_t> &origin,
            const dengMath::vec2<deng_f64_t> &mouse_sens,
            deng_vec_t FOV,
            deng_vec_t near_plane,
            deng_vec_t far_plane,
            Window *p_ww
        );

        ~EditorCamera();
        
        // Wrapper around event update
        void update();
    };
}

#endif
