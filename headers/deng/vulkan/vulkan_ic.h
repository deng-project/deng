/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 

#ifndef __VULKAN_IC_H
#define __VULKAN_IC_H

#ifdef __VULKAN_IC_CPP
    #include <vector>
    #include <array>   
    #include <map>

    #include <vulkan/vulkan.h>
    #include <common/base_types.h>
    #include <common/hashmap.h>
    #include <common/uuid.h>
    #include <common/err_def.h>

    #include <das/assets.h>
    #include <math/deng_math.h>
    #include <deng/surface/surface_window.h>
    #include <deng/window.h>

    #include <deng/vulkan/vulkan_surface.h>
    #include <deng/vulkan/vulkan_resources.h>
    #include <deng/vulkan/vulkan_sd.h>
    #include <deng/vulkan/vulkan_qm.h>
    #include <deng/vulkan/vulkan_rend_infos.h>
#endif

namespace deng {
    namespace vulkan {
        /* 
         * Class for picking appropriate physical device, creating 
         * logical device and creating new instance for Vulkan 
         */
        class __vk_InstanceCreator : private __vk_InstanceInfo, private __vk_DeviceInfo {
        private:
            // Supported device properties flags
            deng_bool_t m_tex_linear_filtering_support;

            // Required vulkan extensions
            std::vector<const char*> m_required_extension_names; 
            VkSampleCountFlagBits m_max_sample_count;
            VkPhysicalDeviceLimits m_dev_limits;
            const char *m_p_validation_layer = "VK_LAYER_KHRONOS_validation";

        private:
            void __mkInstance(deng_bool_t &enable_vl);
            deng_bool_t __checkValidationLayerSupport();
            void __findSupportedProperties();
            void __mkDebugMessenger();
            void __selectPhysicalDevice();
            void __mkLogicalDevice(deng_bool_t &enable_vl);
            void __mkWindowSurface();

            
            // Debug messenger
            VkResult __mkDebugMessenger (
                const VkDebugUtilsMessengerCreateInfoEXT *p_msg_createinfo
            );

            static VKAPI_ATTR VkBool32 VKAPI_CALL __debugCallback (
                VkDebugUtilsMessageSeverityFlagBitsEXT message_severity, 
                VkDebugUtilsMessageTypeFlagsEXT message_type, 
                const VkDebugUtilsMessengerCallbackDataEXT *p_callback_data, 
                void *p_user_data
            );

        public:
            __vk_InstanceCreator (
                Window &win, 
                deng_bool_t enable_vl
            );

            static void destroyDebugUtils (
                VkInstance instance,
                VkDebugUtilsMessengerEXT messenger
            );

        public:
            deng_bool_t getLFSupport();
            VkInstance getIns();
            VkDevice getDev();
            VkSampleCountFlagBits getMaxSampleCount();
            VkPhysicalDevice getGpu();
            VkSurfaceKHR getSu();
            __vk_QueueManager getQFF();
            const VkPhysicalDeviceLimits &getGpuLimits();
            VkDebugUtilsMessengerEXT getDMEXT();
        };
    }
}
#endif
