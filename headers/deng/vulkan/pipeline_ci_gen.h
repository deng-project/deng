/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 * ----------------------------------------------------------------
 *  Name: pipeline_ci_gen - Pipeline createinfo generator for Vulkan renderer
 *  Purpose: Provide helper class for creating pipeline createinfos, since
 *  pipeline creation in Vulkan requires quite a bit of configuring.
 *  Author: Karl-Mihkel Ott
 */ 


#ifndef __PIPELINE_CI_GEN_H
#define __PIPELINE_CI_GEN_H

#ifdef __PIPELINE_CI_GEN_CPP
    #include <vector>
    #include <array>
    #include <string>
    #include <queue>
    #include <stdexcept>
    #include <stddef.h>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/hashmap.h>
    #include <common/err_def.h>
    #include <data/assets.h>
    #include <math/deng_math.h>
    #include <deng/vulkan/qm.h>
    #include <deng/vulkan/pipeline_data.h>
    #include <deng/vulkan/resources.h>
    #include <deng/window.h>

    #include <imgui-layer/imgui_entity.h>
#endif



#ifdef __linux__
    // UI system shaders
    #define UI_VERT_SHADER                      "./shaders/bin/2d/UIV.spv"
    #define UI_FRAG_SHADER                      "./shaders/bin/2d/UIF.spv"

    // 2D asset shaders
    #define UNMAPPED_VERT_SHADER_2D             "./shaders/bin/2d/UV.spv"
    #define UNMAPPED_FRAG_SHADER_2D             "./shaders/bin/2d/UF.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_2D       "./shaders/bin/2d/TMV.spv"
    #define TEXTURE_MAPPED_FRAG_SHADER_2D       "./shaders/bin/2d/TMF.spv"

    // 3D asset shaders
    #define UNMAPPED_VERT_SHADER_3D             "./shaders/bin/3d/UV.spv"
    #define UNMAPPED_FRAG_SHADER_3D             "./shaders/bin/3d/UF.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_3D       "./shaders/bin/3d/TMV.spv"
    #define TEXTURE_MAPPED_FRAG_SHADER_3D       "./shaders/bin/3d/TMF.spv"
#endif

#ifdef _WIN32
    // UI system shaders
    #define UI_VERT_SHADER                      ".\\shaders\\bin\\2d\\UIV.spv"
    #define UI_FRAG_SHADER                      ".\\shaders\\bin\\2d\\UIF.spv"

    // 2D asset shaders
    #define UNMAPPED_VERT_SHADER_2D             ".\\shaders\\bin\\2d\\UV.spv"
    #define UNMAPPED_FRAG_SHADER_2D             ".\\shaders\\bin\\2d\\UF.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_2D       ".\\shaders\\bin\\2d\\TMV.spv"
    #define TEXTURE_MAPPED_FRAG_SHADER_2D       ".\\shaders\\bin\\2d\\TMF.spv"

    // 3D asset shaders
    #define UNMAPPED_VERT_SHADER_3D             ".\\shaders\\bin\\3d\\UV.spv"
    #define UNMAPPED_FRAG_SHADER_3D             ".\\shaders\\bin\\3d\\UF.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_3D       ".\\shaders\\bin\\3d\\TMV.spv"
    #define TEXTURE_MAPPED_FRAG_SHADER_3D       ".\\shaders\\bin\\3d\\TMF.spv"
#endif

namespace deng {
    namespace vulkan {

        /// Structure to specify all used flags in certain pipeline creation
        struct __vk_PipelineCreationFlags {
            VkPolygonMode polygon_mode              = VK_POLYGON_MODE_FILL;
            VkCullModeFlagBits cull_mode            = VK_CULL_MODE_NONE;
            VkFrontFace front_face                  = VK_FRONT_FACE_CLOCKWISE;
            VkPrimitiveTopology primitive_topology  = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
            deng_bool_t add_depth_stencil           = false;
            deng_bool_t add_color_blend             = true;
            deng_bool_t add_scissoring              = false;
            VkSampleCountFlagBits sample_c          = VK_SAMPLE_COUNT_1_BIT;
            deng_ui32_t subpass_index               = 0;
        };


        class __vk_PipelineCreateInfoGenerator : private __vk_PipelineCreateInfoSpecifiers {
        private:
            VkDevice m_device;
            VkExtent2D m_ext;
            VkRenderPass m_renderpass;
            __vk_PipelineData &m_pipeline_data;

        private:
            /// Read SPIR-V binary data from shader files
            char *__readBinShader(const char *file_name, size_t &size);


            /// Read appropriate vertex and fragment shaders according to 
            /// the pipeline mode
            void __readShaders(deng_PipelineType pt, char **p_vert, size_t &vert_c, 
                char **p_frag, size_t &frag_c);


            /// Create new shader module from SPIR-V binaries
            VkShaderModule __mkShaderModule(char *bin, size_t bin_c);


            /// Get binding description info in VkVertexInputBindingDescription instance
            std::vector<VkVertexInputBindingDescription> __getBindingDesc();


            /// Get attribute description info in VkVertexInputAttributeDescription instances
            std::vector<VkVertexInputAttributeDescription> __getAttributeDescs();
            
        public:
            __vk_PipelineCreateInfoGenerator(VkDevice device, VkExtent2D extent, VkRenderPass renderpass, 
                __vk_PipelineData &pd);
            ~__vk_PipelineCreateInfoGenerator();


            /// Make createinfo instance for graphics pipeline
            VkGraphicsPipelineCreateInfo mkGraphicsPipelineInfo(const __vk_PipelineCreationFlags &pl_flags);
        };
    }
}

#endif
