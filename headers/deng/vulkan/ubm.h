/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 * ----------------------------------------------------------------
 *  Name: ubm - Uniform buffer manager 
 *  Purpose: Provide a class for handling uniform buffers and writing data
 *  to them
 *  Author: Karl-Mihkel Ott
 */ 


#ifndef __VK_UBM_H
#define __VK_UBM_H


#ifdef __VK_UBM_CPP
    #include <array>
    #include <vector>
    #include <mutex>
    #include <string>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/hashmap.h>
    #include <common/common.h>
    #include <common/err_def.h>
    #include <data/assets.h>

    #include <math/deng_math.h>
    #include <deng/cross_api/gpu_mem.h>
    #include <deng/window.h>
    #include <deng/camera.h>

    #include <deng/lighting/light_srcs.h>
    #include <deng/vulkan/resources.h>
    #include <deng/cross_api/ubo.h>
    #include <deng/lighting/light_srcs.h>
    #include <deng/registry/registry.h>

    #define __DEFAULT_ASSET_CAP     32
#endif


namespace deng {
    namespace vulkan {

        class __vk_UniformBufferManager {
        private:
            std::vector<deng_Id> &m_assets;
            const deng_ui64_t m_min_align;
            deng_ui64_t m_ubo_chunk_size;
            deng::__GlobalRegistry &m_reg;
            __vk_BufferData &m_buffer_data;

        private:
            /// Create new uniform buffer instance and allocate memory for it.
            /// WARNING: This method call expects that uniform buffer and its memory
            /// have been freed or are not initialised previously
            void __mkUniformBuffer(VkDevice device, VkPhysicalDevice gpu,
                VkCommandPool cmd_pool, VkQueue g_queue, deng_ui64_t asset_cap, deng::BufferSectionInfo &buf_sec);

            
            /// Reallocate memory for uniform buffer and copy previous data to
            /// newly allocated buffer instance
            void __reallocUniformBufferMemory(VkDevice device, VkPhysicalDevice gpu,
                VkCommandPool cmd_pool, VkQueue g_queue, deng_ui64_t req_cap, deng::BufferSectionInfo &buf_sec);

            
            /// Reset uniform buffer size to first asset color data instance
            void __resetUboBufferSize(deng::BufferSectionInfo &buf_sec);

        public:
            __vk_UniformBufferManager(std::vector<deng_Id> &assets,
                const deng_ui64_t min_align, deng::__GlobalRegistry &reg,
                __vk_BufferData &buf_data);


            /// Reserve a uniform data memory location for Vulkan asset
            void mapUniformBufferArea(VkDevice device, VkPhysicalDevice gpu,
                VkCommandPool cmd_pool, VkQueue g_queue, __vk_Asset &asset, deng::BufferSectionInfo &buf_sec);
            

            /// Update uniform transformation data for the frame according to 
            /// camera's view and projection matrix
            void updateUboTransform3D( VkDevice device, 
                deng_ui32_t current_image, Camera3D *p_cam);

            
            /// Update asset uniform buffer data
            void updateAssetUboData(VkDevice device, 
                deng_ui32_t current_image, __vk_Asset &asset);

            
            /// Update lighting uniform data
            void updateUboLighting(VkDevice device,
                std::array<deng_Id, __DENG_MAX_LIGHT_SRC_COUNT> &light_srcs,
                deng_ui32_t current_image);


            /// Basically set the ambient lighting to 100%
            /// Call this method when no light sources are specified
            void mkStandardLight(VkDevice device);


            /// Initialise uniform buffer for storing data
            void initUniformBuffer(VkDevice device, VkPhysicalDevice gpu,
                VkCommandPool cmd_pool, VkQueue g_queue, deng::BufferSectionInfo &buf_sec);

        /// Getter methods
        public:
            deng_ui64_t getUboChunkSize();
        };
    }
}


#endif
