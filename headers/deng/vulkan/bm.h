/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 * ----------------------------------------------------------------
 *  Name: bm - Buffer manager for Vulkan resource manager
 *  Purpose: Provide a parent class for resource manager, which handles
 *  all buffer related operations such as allocations, reallocations and
 *  data writings.
 *  Author: Karl-Mihkel Ott
 */ 


#ifndef __BM_H
#define __BM_H

#ifdef __BM_CPP
    #include <vector>
    #include <string>
    #include <mutex>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <common/common.h>
    #include <common/hashmap.h>
    #include <data/assets.h>

    #include <math/deng_math.h>
    #include <deng/surface/key_definitions.h>
    #include <utils/timer.h>
    #include <deng/camera.h>
    #include <deng/lighting/light_srcs.h>
    #include <deng/vulkan/resources.h>
    #include <deng/registry/registry.h>
    #include <deng/vulkan/asset_cpy.h>
#endif

namespace deng {
    namespace vulkan {

        class __vk_BufferManager {
        private:
            std::vector<deng_Id> &m_assets;
            const VkPhysicalDeviceLimits &m_gpu_limits;
            deng::__GlobalRegistry &m_reg;

        protected:
            __vk_BufferData m_buffer_data;

        protected:
            __vk_BufferManager (
                const VkPhysicalDeviceLimits &gpu_limits,
                std::vector<deng_Id> &assets,
                deng::__GlobalRegistry &reg
            );

            
            /*
             * Create new uniform buffer instance and allocate memory for it.
             * WARNING: This method call expects that uniform buffer and its memory
             * have been freed or are not initialised previously
             */
            void __mkUniformBuffer (
                VkDevice device, 
                VkPhysicalDevice gpu,
                VkCommandPool cmd_pool, 
                VkQueue g_queue,
                deng_ui64_t asset_cap
            );


            /*
             * Reallocate memory for uniform buffer and copy previous data to
             * newly allocated buffer instance
             */
            void __reallocUniformBufferMemory (
                VkDevice device,
                VkPhysicalDevice gpu,
                VkCommandPool cmd_pool,
                VkQueue g_queue,
                deng_ui64_t req_cap
            );

            
            void __findAssetOffsets(das_Asset &asset);
            deng_ui64_t __findMaxAssetSize(const dengMath::vec2<deng_ui32_t> &bounds);

        public:

            /*
             * Create main asset buffer and copy all assets data to it
             */
            void mkAssetBuffers (
                VkDevice device, 
                VkPhysicalDevice gpu, 
                VkCommandPool cmd_pool, 
                VkQueue g_queue
            );


            /*
             * Copy asset color data to uniform buffer memory
             */
            void cpyAssetUniform (
                VkDevice device,
                VkPhysicalDevice gpu,
                VkCommandPool cmd_pool,
                VkQueue g_queue,
                __vk_Asset &asset
            );

            
            /*
             * Update transfrom uniform data in the frame according to updated camera
             * and view matrix
             */
            void updateUboTransform (
                VkDevice device, 
                deng_ui32_t current_image, 
                Camera3D *p_cam
            );


            /*
             * Replace data in main buffer with newer data from given asset vertices
             */
            void remapAssetVerts (
                VkDevice device,
                VkPhysicalDevice gpu,
                VkCommandPool cmd_pool,
                VkQueue g_queue,
                const dengMath::vec2<deng_ui32_t> &asset_bounds
            );
        };

    }
}

#endif
