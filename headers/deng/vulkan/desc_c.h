/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __DESC_C_H
#define __DESC_C_H

#ifdef __DESC_C_CPP
    #include <vector>
    #include <array>

    #include <vulkan/vulkan.h>
    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <common/hashmap.h>
    #include <common/common.h>
    #include <data/assets.h>

    #include <math/deng_math.h>
    #include <deng/window.h>
    #include <deng/vulkan/sd.h>
    #include <deng/vulkan/qm.h>
    #include <deng/vulkan/resources.h>

    #include <deng/lighting/light_srcs.h>
    #include <deng/registry/registry.h>

    #include <deng/vulkan/rend_infos.h>
    #include <deng/vulkan/pipelines.h>


    // Default capacities for descriptor pools
    static const deng_ui32_t __default_mapped_ds_cap = 32;
    static const deng_ui32_t __default_unmapped_ds_cap = 32;
#endif

namespace deng {
    namespace vulkan {

        /* 
         * Class for creating descriptor set layouts, pipelines, descriptor sets 
         */
        class __vk_DescriptorCreator : private __vk_DescriptorInfo {
        private:
            std::vector<deng_Id> &m_assets;
            std::vector<deng_Id> &m_textures;
            deng::__GlobalRegistry &m_reg;
            deng_ui32_t m_tex_cap = 0;
            deng_ui32_t m_unmapped_dc_pool_cap = 0;
            deng_ui32_t m_mapped_dc_pool_cap = 0;

            // These member variables store the total count of 
            // assets that have descriptor sets made for
            deng_ui32_t m_unmapped_asset_c = 0;
            deng_ui32_t m_mapped_asset_c = 0;

        private:
            void __mkDescriptorSetLayouts(VkDevice &device);
            void __mkPipelineLayouts(VkDevice &device);
            void __mkGraphicsPipelines (
                VkDevice &device, 
                VkExtent2D &ext, 
                VkRenderPass &renderpass,
                VkSampleCountFlagBits sample_c
            );

            void __mkUnmappedDescPool (
                VkDevice device, 
                deng_ui32_t desc_c
            );

            void __mkTexMappedDescPool (
                VkDevice device,
                deng_ui32_t desc_c
            );


            /*
             * Create descriptor sets for unmapped assets
             */
            void __mkUnmappedDS (
                VkDevice device, 
                __vk_Asset &asset,
                __vk_BufferData &bd,
                deng_ui64_t min_align
            );
            

            /*
             * Create descriptor sets for texture mapped assets
             */
            void __mkTexMappedDS (
                VkDevice device, 
                __vk_Asset &asset,
                __vk_BufferData &bd,
                const char *dummy_tex_uuid,
                deng_ui64_t min_align
            );


            /*
             * Check if descriptor pools capacity is large enough
             * to allocate more descriptor sets there.
             * If descriptor pool is not large enough, all allocated descriptor
             * sets will be destroyed and new ones allocated in the new descriptor
             * pool
             */
            void __checkDescPoolCapacity (
                VkDevice device,
                __vk_BufferData &bd,
                const char *dummy_tex_uuid,
                deng_ui64_t min_ubo_align
            );


            /*
             * Destroy all texture mapped descriptor sets from assets
             * Return value is a vector with all indices to
             * the texture mapped cleaned assets
             */
            const std::vector<size_t> &__cleanMappedDescSets(VkDevice device);

            
            /*
             * Destroy all unmapped descriptor sets from assets
             * Return value is a vector with all indices to
             * the unmapped cleaned assets
             */
            const std::vector<size_t> &__cleanUnmappedDescSets(VkDevice device);

        public:
            __vk_DescriptorCreator (
                VkDevice device,
                VkExtent2D ext,
                VkRenderPass renderpass, 
                deng::__GlobalRegistry &reg,
                std::vector<deng_Id> &assets,
                std::vector<deng_Id> &textures,
                VkSampleCountFlagBits sample_c
            );


            /*
             * Abstracted function for creating descriptor sets
             * for each asset
             */
            void mkDS (
                VkDevice device,
                __vk_BufferData &bd,
                const char *dummy_tex_uuid,
                const dengMath::vec2<deng_ui32_t> &asset_bounds,
                deng_ui64_t min_ubo_align
            );


        public:
            std::array<__vk_PipelineData, DENG_PIPELINE_COUNT> &getPipelines();
            VkPipelineLayout getUnmappedPL();
            VkPipelineLayout getTexMappedPL();
            VkDescriptorSetLayout getUnmappedDSL();
            VkDescriptorSetLayout getTexMappedDSL();
            VkDescriptorPool getUnmappedDP();
            VkDescriptorPool getTexMappedDP();
        };
    }
}

#endif
