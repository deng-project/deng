/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __PIPELINES_H
#define __PIPELINES_H

#ifdef __PIPELINES_CPP
    #include <vector>
    #include <array>
    #include <string>
    #include <stdexcept>
    #include <vulkan/vulkan.h>

    #include <deng/forward_dec.h>
    #include <common/base_types.h>
    #include <common/hashmap.h>
    #include <common/err_def.h>
    #include <data/assets.h>
    #include <math/deng_math.h>
    #include <deng/vulkan/qm.h>
    #include <deng/vulkan/resources.h>
    #include <deng/vulkan/rend_infos.h>
    #include <deng/window.h>
#endif


/* Pipeline indices */
#define UM3D_I          0
#define TM3D_I          1
#define UM2D_I          2
#define TM2D_I          3

#ifdef __linux__
    #define UNMAPPED_VERT_SHADER_2D             "./shaders/bin/2d_unmapped.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_2D       "./shaders/bin/2d_tex_mapped.spv"
    #define UNMAPPED_VERT_SHADER_3D             "./shaders/bin/3d_unmapped.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_3D       "./shaders/bin/3d_tex_mapped.spv"
    #define TEXTURE_MAPPED_FRAG_SHADER          "./shaders/bin/tex_mapped_frag.spv"
    #define UNMAPPED_FRAG_SHADER                "./shaders/bin/unmapped_frag.spv"
#endif

#ifdef _WIN32
    /* Shader binary file names */
    #define UNMAPPED_VERT_SHADER_2D             ".\\shaders\\bin\\2d_unmapped.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_2D       ".\\shaders\\bin\\2d_tex_mapped.spv"
    #define UNMAPPED_VERT_SHADER_3D             ".\\shaders\\bin\\3d_unmapped.spv"
    #define TEXTURE_MAPPED_VERT_SHADER_3D       ".\\shaders\\bin\\3d_tex_mapped.spv"
    #define TEXTURE_MAPPED_FRAG_SHADER          ".\\shaders\\bin\\tex_mapped_frag.spv"
    #define UNMAPPED_FRAG_SHADER                ".\\shaders\\bin\\unmapped_frag.spv"
#endif

namespace deng {
    namespace vulkan {

        /* 
         * Struct for all pipeline createinfo specifier objects 
         * This struct functions as a parent struct for class PipelineCreator
         */
        struct __vk_PipelineCreateinfoSpecifiers {
            std::array<VkPipelineShaderStageCreateInfo, 2> m_shader_stage_createinfos{};
            std::array<VkShaderModule, 2> m_shader_modules{};
            std::vector<VkVertexInputBindingDescription> m_input_binding_desc{};
            std::vector<VkVertexInputAttributeDescription> m_input_attr_descs{};

            VkViewport m_viewport{};
            VkRect2D m_scissor{};

            VkPipelineVertexInputStateCreateInfo    m_vert_input_create_info{};
            VkPipelineInputAssemblyStateCreateInfo  m_input_asm_createinfo{};
            VkPipelineViewportStateCreateInfo       m_viewport_state_createinfo{};
            VkPipelineRasterizationStateCreateInfo  m_rasterization_createinfo{};
            VkPipelineMultisampleStateCreateInfo    m_multisample_createinfo{};
            VkPipelineColorBlendAttachmentState     m_colorblend_attachment{};
            VkPipelineDepthStencilStateCreateInfo   m_depth_stencil{};
            VkPipelineColorBlendStateCreateInfo     m_colorblend_state_createinfo{};
        };


        /* 
         * Handle pipeline creation 
         * This class is used to simplify the process of creating pipelines
         * in Vulkan
         */
        class __vk_PipelineCreator : private __vk_PipelineCreateinfoSpecifiers {
        private:
            VkDevice m_device;
            __vk_PipelineData *m_p_pipeline_data;
            VkRenderPass m_renderpass;
            VkExtent2D m_extent;

        private:
            /*
             * Create new shader module from SPIR-V binaries
             * This method is used to create new shader module from shader binaries 
             * provided as a parameter
             */
            VkShaderModule __mkShaderModule(std::vector<char> &shader_bins);
            /*
             * Get binding description info in VkVertexInputBindingDescription instance
             * This method checks for pipeline usage and returns VkVertexInputBindingDescription
             * instance according to usage
             */
            std::vector<VkVertexInputBindingDescription> __getBindingDesc();
            /*
             * Get attribute description info in VkVertexInputAttributeDescription instances
             * This method is used to recieve all input descriptions required by shaders
             */
            std::vector<VkVertexInputAttributeDescription> __getAttributeDescs();
            
        public:
            __vk_PipelineCreator (
                __vk_PipelineData *p_pipeline_data, 
                VkDevice device, 
                VkExtent2D extent, 
                VkRenderPass renderpass
            );
            ~__vk_PipelineCreator();

            /* 
             * Make createinfo instance for graphics pipeline
             * This method is used to set up VkGraphicsPipelineCreateInfo, while defaulting
             * some options that are not needed to be customised by different DENG pipelines
             */
            VkGraphicsPipelineCreateInfo mkGraphicsPipelineInfo (
                std::string vert_shader, 
                std::string frag_shader, 
                char *shader_module_name,
                VkPolygonMode polygon_mode, 
                VkCullModeFlagBits cull_mode, 
                VkFrontFace front_face, 
                VkPrimitiveTopology primitive_topology, 
                deng_bool_t add_depth_stencil, 
                deng_bool_t add_color_blend, 
                VkSampleCountFlagBits sample_c,
                deng_ui32_t subpass_index
            );
        };
    }
}

#endif
