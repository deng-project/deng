/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 * ----------------------------------------------------------------
 *  Name: pipeline - Pipeline creator for Vulkan renderer
 *  Purpose: Provide parent class for creating new pipelines in Vulkan
 *  Author: Karl-Mihkel Ott
 */ 


#ifndef __VK_PIPELINES_H
#define __VK_PIPELINES_H

#ifdef __VK_PIPELINES_CPP
    #include <array>
    #include <vector>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/shader_def.h>
    #include <data/assets.h>
    #include <common/err_def.h>

    #include <deng/vulkan/pipeline_data.h>
    #include <deng/vulkan/pipeline_ci_gen.h>
#endif


namespace deng {
    namespace vulkan {

        /// Convert given asset mode into its corresponding pipeline type
        deng_PipelineType assetModeToPipelineType(das_AssetMode am);
        
        class __vk_PipelineCreator {
        private:
            // Pipeline layouts for all pipeline types
            VkPipelineLayout m_vu2d_layout;
            VkPipelineLayout m_vm2d_layout;
            VkPipelineLayout m_vu3d_layout;
            VkPipelineLayout m_vm3d_layout;
            VkPipelineLayout m_ui_layout;

            // Descriptor set layouts, which are needed for 
            // pipeline layout creation
            VkDescriptorSetLayout &m_vu2d_ds_layout;
            VkDescriptorSetLayout &m_vm2d_ds_layout;
            VkDescriptorSetLayout &m_vu3d_ds_layout;
            VkDescriptorSetLayout &m_vm3d_ds_layout;
            VkDescriptorSetLayout &m_ui_ds_layout;
        
            std::array<__vk_PipelineData, PIPELINE_C> m_pipelines;

        private:
            /// Create a single pipeline layout
            void __mkPipelineLayout(VkDevice device, VkDescriptorSetLayout &ds_layout,
                VkPipelineLayout &pl_layout);

            /// Create new pipeline layouts for all compatible pipelines
            void __mkPipelineLayouts(VkDevice device);

        public:
            __vk_PipelineCreator (
                VkDescriptorSetLayout &vu2d, VkDescriptorSetLayout &vm2d,
                VkDescriptorSetLayout &vu3d, VkDescriptorSetLayout &vm3d,
                VkDescriptorSetLayout &ui
            );

            /// Create new pipelines 
            void mkPipelines(VkDevice device, VkExtent2D ext, 
                VkRenderPass rp, VkSampleCountFlagBits sample_c);

        // Getters / Setters
        public:
            __vk_PipelineData &getPipeline(deng_ui32_t id);
            std::array<__vk_PipelineData, PIPELINE_C> &getPipelines();
        };
    }
}

#endif
