/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __TEX_LOADER_H
#define __TEX_LOADER_H

#ifdef __cplusplus
extern "C" {
#endif

#define DEFAULT_ASSET_COLOR (das_ObjColorData) {0.7f, 0.7f, 0.7f, 1.0f}


/// This enum specifies the image file format 
typedef enum das_ImageFormat {
    DAS_IMAGE_FORMAT_BMP = 0,
    DAS_IMAGE_FORMAT_TGA = 1,
    DAS_IMAGE_FORMAT_PNG = 2,
    DAS_IMAGE_FORMAT_JPG = 3,
    DAS_IMAGE_FORMAT_UNKNOWN = 4
} das_ImageFormat;


#ifdef __TEX_LOADER_C
    #include <stdlib.h>
    #include <stdio.h>
    #include <string.h>

    #include <common/base_types.h>
    #include <common/common.h>
    #include <common/hashmap.h>
    #include <common/uuid.h>
    #include <common/cerr_def.h>

    #include <data/image_headers.h>
    #include <data/assets.h>

    
    das_ImageFormat __das_DetectImageFormat(const char *file_name);

    /// Read raw bitmap data from file
    /// This function expects the file to be uncompressed
    void __das_ReadBitmap (
        FILE *file,
        char *file_name,
        deng_ui8_t bit_c,
        deng_bool_t vert_re,
        das_Texture* p_tex
    );


    /// Load JPEG image into das_Texture instance
    void __das_LoadJPGImage (
        das_Texture *p_tex,
        const char *file_name
    );


    /// Load BMP image data into das_Texture
    void __das_LoadBMPImage (
        das_Texture *p_tex, 
        const char *file_name
    );
    

    /// Load TGA image into das_Texture instance
    void __das_LoadTGAImage (
        das_Texture *p_tex, 
        const char *file_name
    );
#endif


/// Pixel alignment specifying enumeral
typedef enum das_PixelFormat {
    DAS_PIXEL_FORMAT_B8G8R8A8   = 0x01,
    DAS_PIXEL_FORMAT_A8B8G8R8   = 0x02,
    DAS_PIXEL_FORMAT_R8G8B8A8   = 0x04,
    DAS_PIXEL_FORMAT_A8R8G8B8   = 0x08,
    DAS_PIXEL_FORMAT_R8G8B8     = 0x10,
    DAS_PIXEL_FORMAT_B8G8R8     = 0x12
} das_PixelFormat;


/// Realign raw pixel data to B8G8R8A8 format in order to make it compatible with 
/// specified texture format
void das_RealignPixelData(das_Texture *p_tex, das_PixelFormat format);


/// Load texture bitmap data into das_Texture instance
void das_LoadTexture (
    das_Texture *p_tex, 
    const char *file_name
);


#ifdef __cplusplus
}
#endif

#endif
