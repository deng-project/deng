/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __WAVEFRONT_OBJ_H
#define __WAVEFRONT_OBJ_H

#ifdef __cplusplus
extern "C" {
#endif

    #ifdef __WAVEFRONT_OBJ_C
        #include <stdlib.h>
        #include <stdio.h>
        #include <stdint.h>
        #include <string.h>
        #include <float.h>
        #include <limits.h>

        #define BUFFER_CAP(T) 512 * sizeof(T) 
        #include <common/base_types.h>
        #include <common/cerr_def.h>
        #include <common/common.h>
        #include <common/hashmap.h>

        #include <data/sreader.h>
        #include <data/assets.h>

        static char *__buffer = NULL;

        /*
         * Read all filedata from stream to heap allocated buffer
         */
        void __das_ReadToBuffer(char *file_name);


        /*
         * Free the allocated buffer used in data reading
         */
        void __das_FreeBuffer();


        /*
         * Remove all comments declared with hash character '#'
         */
        void __das_Uncomment();


        /*
         * Check if memory reallocations need to be done
         */
        void __das_ReallocCheck (
            void **p_data, 
            size_t *p_cap, 
            size_t n,
            size_t size,
            char *err_msg
        );

        
        /*
         * Start reading from beg until trailing characters are found
         * and set end to the end of reading point
         */
        deng_vec_t __das_ReadFloatValue (
            char *beg, 
            char *max, 
            char **p_end
        );


        /*
         * Start reading from beg until training characters are found
         * and set end to the end of reading point
         */
        deng_ui32_t __das_ReadIntValue (
            char *beg,
            char *max,
            char **p_end
        );


        /*
         * Parse one face block and return found indices
         * p_end is the pointer to the end of the block
         */
        IndexSet __das_ParseIndBlock (
            char *beg,
            char *nl,
            char **p_end
        );


        /*
         * Verify the data correctness
         */
        deng_bool_t __das_VerifyLine (
            char *ptr, 
            char *max, 
            size_t *p_li,
            deng_bool_t face_line
        );


        /*
         * Parse all data about vertices to their appropriate structures
         */
        void __das_ParseVertices (
            das_ObjVertData **pp_vd,
            size_t *p_vd_c,
            das_ObjTextureData **pp_td,
            size_t *p_td_c,
            das_ObjNormalData **pp_nd,
            size_t *p_nd_c
        );
        

        /*
         * Parse all data about indices to their appropriate structures
         */
        void __das_ParseFaces (
            IndexSet **p_ind,
            size_t *p_ind_c,
            deng_bool_t read_tex_ind,
            deng_bool_t read_norm_ind
        );


        /****************************/
        /****** Vertex merging ******/
        /****************************/

        /*
         * Merge vertices and vertex normals together
         */
        void __das_MergeVertices (
            das_ObjVertData *vd,
            size_t vd_c,
            das_ObjTextureData *td,
            size_t td_c,
            das_ObjNormalData *nd,
            size_t nd_c,
            IndexSet *is,
            size_t ind_c,
            deng_ui32_t **p_out_ind,
            das_VertDynamic *p_out_vdy,
            das_AssetMode asset_mode
        );


        /*
         * Create a valid asset instance with sorted indices
         */
        void __das_AssembleAsset (
            das_Asset *p_asset,
            IndexSet *ind,
            size_t ind_c,
            das_ObjVertData *p_vd,
            size_t vd_c,
            das_ObjTextureData *p_td,
            size_t td_c,
            das_ObjNormalData *p_nd,
            size_t nd_c
        );
    #endif 

    /*
     * Parse all data in Wavefront OBJ file and write
     * all information about vertices and indices to p_asset
     */
    void das_ParseWavefrontOBJ (
        das_Asset *p_asset,
        das_AssetMode am,
        char *file_name
    );

#ifdef __cplusplus
}
#endif
#endif
