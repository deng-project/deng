/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __SHAPE_GEN_H
#define __SHAPE_GEN_H

#ifdef __SHAPE_GEN_CPP
    #include <vector>
    #include <array>
    #include <string>
    #include <math.h>   
    #include <string.h>

    #include <common/base_types.h>
    #include <common/err_def.h>
    #include <common/uuid.h>
    #include <data/assets.h>
    #include <math/deng_math.h>
#endif

// Vertices per 0.1
#define DENG_CIRCLE_VERT_COUNT_MULTIPLIER   24
#define DENG_CIRCLE_MIN_VERT_COUNT          12

namespace dengUtils {

    /* Add borders around the shape */
    struct BorderGenerator {
        static void generateBorders (
            std::vector<das_ObjPosData2D> &vert,
            deng_bool_t new_vert,
            deng_ui64_t vert_offset,
            std::vector<deng_ui32_t> &indices,
            const dengMath::vec4<deng_vec_t> color,
            const dengMath::vec2<deng_ui32_t> deng_window_size,
            deng_ui32_t hier_level,
            deng_px_t border_thickness 
        );
    };


    /* 2D asset construction */ 
    struct AssetMaker2D {
        static das_Asset makeUnmappedAsset (
            std::vector<das_ObjPosData2D> &vert,
            std::vector<deng_ui32_t> &indices,
            const dengMath::vec4<deng_vec_t> &color,
            deng_ui32_t hier
        );

        static das_Asset makeTexMappedAsset (
            std::vector<das_ObjPosData2D> &vert,
            std::vector<deng_ui32_t> &indices,
            deng_ui32_t hier
        );
    };


    /* 
     * Collection of methods for generating rectangles 
     */
    class RectangleGenerator : private BorderGenerator, AssetMaker2D {
    private:
        dengMath::vec2<deng_ui32_t> m_draw_bounds;

    public:
        RectangleGenerator(const dengMath::vec2<deng_ui32_t> &draw_bounds);
        static void generateAbsRec (
            const dengMath::vec2<deng_vec_t> &pos,
            const dengMath::vec2<deng_vec_t> &size,
            const dengMath::vec2<deng_vec_t> &origin,
            std::vector<das_ObjPosData2D> &vert   
        );

        static void generateRelRec (
            const dengMath::vec2<deng_vec_t> &pos,
            dengMath::vec2<deng_vec_t> size,
            deng_bool_t is_abs_size,
            const dengMath::vec2<deng_vec_t> &origin,
            das_ObjPosData2D *outer_rec,
            std::vector<das_ObjPosData2D> &vert
        );

        das_Asset makeUnmappedAbsRecAsset (
            const dengMath::vec2<deng_vec_t> &pos,
            const dengMath::vec2<deng_vec_t> &size,
            const dengMath::vec2<deng_vec_t> &origin,
            const dengMath::vec4<deng_vec_t> &color,
            deng_ui32_t hier_level,
            deng_px_t border_width,
            const dengMath::vec4<deng_vec_t> &border_color
        );

        das_Asset makeMappedAbsRecAsset (
            const dengMath::vec2<deng_vec_t> &pos,
            const dengMath::vec2<deng_vec_t> &size,
            const dengMath::vec2<deng_vec_t> &origin,
            deng_ui32_t hier_level
        );

        das_Asset makeUnmappedRelRecAsset (
            const dengMath::vec2<deng_vec_t> &pos,
            const dengMath::vec2<deng_vec_t> &size,
            deng_bool_t is_abs_size,
            const dengMath::vec2<deng_vec_t> &origin,
            const dengMath::vec4<deng_vec_t> &color,
            das_ObjPosData2D *outer_rec,
            deng_px_t border_width,
            deng_ui32_t hier_level,
            const dengMath::vec4<deng_vec_t> &border_color
        );

        das_Asset makeMappedRelRecAsset (
            const dengMath::vec2<deng_vec_t> &pos,
            const dengMath::vec2<deng_vec_t> &size,
            deng_bool_t is_abs_size,
            const dengMath::vec2<deng_vec_t> &origin,
            const dengMath::vec4<deng_vec_t> &color,
            deng_ui32_t hier_level,
            das_ObjPosData2D *outer_rec
        );
    };


    class TriangleGenerator : private BorderGenerator, private AssetMaker2D {
    private:
        dengMath::vec2<deng_ui32_t> m_draw_bounds;

    public:
        TriangleGenerator(const dengMath::vec2<deng_ui32_t> &draw_bounds);
        static void generateAbsTriangle (
            std::vector<das_ObjPosData2D> &vert,
            const dengMath::vec2<deng_vec_t> &tri_rec_pos,
            const dengMath::vec2<deng_vec_t> &tri_rec_size,
            const dengMath::vec2<deng_vec_t> &tri_rec_origin,
            const dengMath::vec4<deng_vec_t> &color,
            deng_ui32_t hier_level,
            const std::array<dengMath::vec2<deng_vec_t>, 3> &tri_rec_triangle_pos 
        );

        static void generateRelTriangle (
            std::vector<das_ObjPosData2D> &vert,
            das_ObjPosData2D *outer_rec,  
            dengMath::vec2<deng_vec_t> tri_rec_pos,
            dengMath::vec2<deng_vec_t> tri_rec_size,
            const dengMath::vec2<deng_vec_t> &tri_rec_origin,
            const dengMath::vec4<deng_vec_t> &color,
            deng_bool_t is_abs_size,
            deng_ui32_t hier_level,
            const std::array<dengMath::vec2<deng_vec_t>, 3> &tri_rec_triangle_pos
        );

        das_Asset makeAbsTriangleAsset (
            const dengMath::vec2<deng_vec_t> &tri_rec_pos,
            const dengMath::vec2<deng_vec_t> &tri_rec_size,
            const dengMath::vec2<deng_vec_t> &tri_rec_origin,
            const dengMath::vec4<deng_vec_t> &color, 
            const std::array<dengMath::vec2<deng_vec_t>, 3> &tri_rec_triangle_pos,
            deng_px_t border_width,
            deng_ui32_t hier_level,
            const dengMath::vec4<deng_vec_t> &border_color
        );

        das_Asset makeRelTriangleAsset (
            das_ObjPosData2D *outer_rec,
            const dengMath::vec2<deng_vec_t> &tri_rec_pos,
            const dengMath::vec2<deng_vec_t> &tri_rec_size,
            const dengMath::vec2<deng_vec_t> &tri_rec_origin,
            const dengMath::vec4<deng_vec_t> &color,
            const std::array<dengMath::vec2<deng_vec_t>, 3> &tri_rec_triangle_pos,
            deng_px_t border_width,
            const dengMath::vec4<deng_vec_t> &border_color,
            deng_ui32_t hier_level,
            deng_bool_t is_abs_size
        );
    };


    /* Circle generator */
    class CircleGenerator : private BorderGenerator, private AssetMaker2D {
    private:
        dengMath::vec2<deng_ui32_t> m_draw_bounds;

    public:
        CircleGenerator(const dengMath::vec2<deng_ui32_t> &draw_bounds);
        static void generateAbsCircle (
            std::vector<das_ObjPosData2D> &vert,
            std::vector<deng_ui32_t> &indices,
            const dengMath::vec2<deng_vec_t> &pos,
            deng_vec_t radius,
            deng_ui32_t hier_level,
            const dengMath::vec4<deng_vec_t> &color
        );

        static void generateRelCircle (
            std::vector<das_ObjPosData2D> &vert,
            std::vector<deng_ui32_t> &indices,
            dengMath::vec2<deng_vec_t> pos,
            deng_vec_t radius,
            const dengMath::vec4<deng_vec_t> &color,
            deng_ui32_t hier_level,
            das_ObjPosData2D *outer_rec
        );

        das_Asset makeAbsCircleAsset (
            const dengMath::vec2<deng_vec_t> &pos,
            deng_vec_t radius,
            const dengMath::vec4<deng_vec_t> &color,
            deng_px_t border_width,
            deng_ui32_t hier_level,
            const dengMath::vec4<deng_vec_t> &border_color
        );

        das_Asset makeRelCircleAsset (
            const dengMath::vec2<deng_vec_t> &pos,
            deng_vec_t radius,
            const dengMath::vec4<deng_vec_t> &color,
            das_ObjPosData2D *outer_rec,
            deng_px_t border_width,
            deng_ui32_t hier_level,
            const dengMath::vec4<deng_vec_t> &border_color
        );
    };
}

#endif
