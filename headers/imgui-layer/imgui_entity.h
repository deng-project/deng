/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 * ----------------------------------------------------------------
 *  Name: imgui_entity - structures for handling ImGui entity data
 *  Purpose: Provide structures and enums for entities that use ImGui data
 *  Author: Karl-Mihkel Ott
 */ 


#ifndef __IMGUI_ENTITY_H
#define __IMGUI_ENTITY_H

#if defined(NO_IMGUI)
    typedef struct ImDrawVert {
        dengMath::vec2<deng_vec_t> pos;
        dengMath::vec2<deng_vec_t> uv;
        deng_ui32_t col;
    } ImDrawVert;


    typedef deng_ui32_t ImDrawIdx;
#else 
    #include <imgui.h>
#endif

namespace deng {
    // Check if ImGui vertex and index data should be defined


    /// All possible floating UI forms
    enum UIForm {
        DENG_UI_FORM_SYS_INFO       = 0,
        DENG_UI_FORM_TEXTURE_VIEW   = 1,
        DENG_UI_FORM_ASSET_VIEW     = 2
    };


    /// Structure for storing data about ImGui draw operations
    struct __ImGuiCmdData {
        size_t offset;                  // Vertex offset from the beginning of the ui memory area
        const ImDrawVert *verts = NULL;
        size_t vert_c = 0;
        const ImDrawIdx *ind = NULL;
        size_t ind_c = 0;
    };


    /// Structure used to pass ImGui entities
    struct __ImGuiEntity {
        size_t buf_offset;                          // Indices offset from the beginning of the ui memory area
        const ImDrawIdx *ind;
        size_t ind_c;                               // Total count of indices
        size_t cmd_list_ind;                        // Index of the used command list
        dengMath::vec2<deng_i32_t> sc_rec_offset;   // Scissor rectangle offset
        dengMath::vec2<deng_ui32_t> sc_rec_size;    // Scissor rectangle size
    };

    
    /// Data structure used for passing UI data between UI handler classes and the renderer 
    struct __ImGuiData {
        deng_Id tex_id;
        std::vector<__ImGuiCmdData> cmd_data;   // Data required for creating entity commandbuffers
        std::vector<__ImGuiEntity> entities;    // All entities related to ImGui
    };
}
#endif
