/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef DENGUI_CHILD_H
#define DENGUI_CHILD_H


#ifdef __DENGUI_CHILD_CPP
    #include <stdlib.h>
    #include <vector>
    #include <array>
    #include <mutex>
    #include <vulkan/vulkan.h>

    #include <common/base_types.h>
    #include <common/common.h>
    #include <common/err_def.h>
    #include <das/assets.h>

    #include <deng/forward_dec.h>
    #include <deng/deng_math.h>
    #include <deng/surface_window.h>
    #include <deng/window.h>
    #include <deng/vulkan/vulkan_resources.h>
    #include <utils/font.h>
    #include <utils/timer.h>
    #include <utils/shapes.h>
    
    #include <dengui/dengui_win_def.h>
    #include <dengui/dengui_infos.h>
#endif


namespace dengui {

    class ChildContainer {
    private:
        ParentInfo m_parent_info;
        ChildContainerInfo m_info;
        dengMath::vec2<deng_ui32_t> m_window_size;
        dengUtils::StringRasterizer *m_p_sr;
        std::vector<VERT_UNMAPPED_2D> m_vert;
        std::vector<deng_ui32_t> m_indices;
        dengUtils::BitmapStr m_label;
        std::vector<std::pair<void*, ChildElementType>> m_cont_child_elems;
        std::vector<std::pair<void*, ChildElementType>> m_titlebar_child_elems;
        dengMath::vec2<deng_ui32_t> m_cont_vert_bounds = {0, 0};
        dengMath::vec2<deng_ui32_t> m_cont_ind_bounds = {0, 0};
        dengMath::vec2<deng_ui32_t> m_titlebar_vert_bounds = {0, 0};
        dengMath::vec2<deng_ui32_t> m_titlebar_ind_bounds = {0, 0};
        dengMath::vec2<deng_ui32_t> m_label_vert_bounds = {0, 0};
        dengMath::vec2<deng_ui32_t> m_lavel_ind_bounds = {0, 0};

    private:
        void mkTitlebar();

    public:
        ChildContainer (
            ParentInfo parent_info,
            ChildContainerInfo m_info,
            dengMath::vec2<deng_ui32_t> window_size,
            dengUtils::StringRasterizer *m_p_sr
        );

        ParentInfo getTitlebarParentInfo();
        ParentInfo getContainerParentInfo();
        void attachChild (
            void *elem, 
            ChildElementType elem_type
        );

        char *getParentID();
        std::vector<WindowElement> getWindowElements();
    };


    /* 
     ********* PUSH BUTTON STRUCTURES *********
     * Hierarchy level: 2
     * Callback: yes
     * Callback key: LMB
     * Cursor hover style: no
     * Parent usage: no
     */
    struct PushButtonInfo : public ChildBaseInfo {
        das_ObjColorData background_color;
        dengMath::vec3<deng_ui8_t> color;
        das_ObjColorData border_color;
        WindowBorder border;
        void (*onClick)(WindowElement*, Events*);
        char *label;
    };


    class ChildPushButton {
    private:
        ParentInfo m_parent_info;
        PushButtonInfo m_info;
        dengUtils::StringRasterizer *m_p_sr;
        std::vector<VERT_UNMAPPED_2D> m_vert;
        std::vector<deng_ui32_t> m_indices;
        dengUtils::BitmapStr m_label;

    public:
        ChildPushButton (
            ParentInfo parent_info,
            PushButtonInfo &btn_info,
            dengMath::vec2<deng_ui32_t> window_size,
            dengUtils::StringRasterizer *p_sr 
        );

        char *getParentID();
        std::vector<WindowElement> getWindowElements();
    };


    /*
     ********* GENERAL DROP DOWN MENU STRUCTURES *********
     * Hierarchy level: 4
     * Callback: yes
     * Callback key: LMB
     * Cursor hover style: no
     * Parent usage: no
     */

    struct DropDownElementInfo {
        char *label;
        deng_bool_t is_expandable;
        std::vector<DropDownElementInfo> sub_elements;
        dengMath::vec4<deng_vec_t> show_more_tri_color;
        DDMCallback lmb_callback;
        DDMCallback mmb_callback;
        DDMCallback rmb_callback;
        DDMCallback hover_callback;
    };


    class DropDownElement {
    private:
        char *m_parent_id;
        dengUtils::BitmapStr m_label;
        dengUtils::StringRasterizer *m_p_sr;
        std::vector<DropDownElement> m_sub_elements; 
        std::vector<VERT_UNMAPPED_2D> m_vert;
        std::vector<deng_ui32_t> m_indices;
        DropDownElementInfo m_info;

    public:
        DropDownElement (
            char *parent_id,
            dengMath::vec2<deng_ui32_t> window_size,
            DropDownElementInfo info,
            dengMath::vec2<deng_vec_t> size,
            deng_vec_t y_offset,
            dengUtils::StringRasterizer *p_sr,
            das_ObjColorData background_color,
            das_ObjColorData border_color,
            dengMath::vec3<unsigned char> color,
            WindowBorder border
        );

        //~DropDownElement();
        
        // Position is from top left corner
        std::vector<DDMElement> getElems(dengMath::vec2<deng_ui32_t> win_size);
    };


    struct DropDownMenuInfo {
        dengMath::vec2<deng_vec_t> size;
        das_ObjColorData background_color;
        dengMath::vec3<unsigned char> color;
        WindowBorder border;
        das_ObjColorData border_color;
        dengUtils::StringRasterizer *p_sr;
        char *id;
    };


    class CursorDropDownMenu {
    private:
        DropDownMenuInfo m_info;
        std::vector<DropDownElement> m_menu_elems;
        dengMath::vec2<deng_ui32_t> m_win_size;
        
    private:
        std::vector<DDMElement> mkEmptyMenu();

    public:
        CursorDropDownMenu (
            DropDownMenuInfo &info,
            dengMath::vec2<deng_ui32_t> win_size
        );

        void attachMenuElement(DropDownElementInfo &elem_info);
        std::string getId();
        std::vector<DDMElement> getElems();
    };
}

#endif
