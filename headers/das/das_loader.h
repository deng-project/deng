/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#ifndef __DAS_LOADER_H
#define __DAS_LOADER_H
#define DAS_UUID_LEN    36

#ifdef __cplusplus
    extern "C" {
#endif


#ifdef __DAS_LOADER_C
    #include <stdlib.h>
    #include <string.h>
    #include <stdio.h>
    #include <stdint.h>
    #include <time.h>

    #include <common/base_types.h>
    #include <common/cerr_def.h>
    #include <common/common.h>
    #include <common/uuid.h>

    #include <das/assets.h>

    #define __DAS_INFO_HEADER_NAME          "INFO_HDR"
    #define __DAS_VERTICES_HEADER_NAME      "VERT_HDR"
    #define __DAS_INDICES_HEADER_NAME       "INDX_HDR"
    #define __DAS_GENERIC_HEADER_BEG        "BEG_HDR"
    #define __DAS_GENERIC_HEADER_END        "END_HDR"
#endif

/*
 * Information struct for specifying custom headers used in DAM
 * This structure can be written to file directly
 */
typedef struct das_HeaderInfo {
    char beg[7]; // always has to be BEG_HDR
    deng_ui32_t hdr_size;
    deng_ui32_t data_size;
    char *data;
    char end[7]; // always has to be END_HDR
} das_HeaderInfo;

/*
 * Information structure for INFO_HDR
 */
typedef struct das_INFO_HDR {
    char hdr_name[8];
    deng_ui32_t hdr_size;
    char uuid[DAS_UUID_LEN];
    deng_ui64_t time_st;
    deng_ui8_t asset_type;
    deng_ui8_t cmpr;
} das_INFO_HDR;


/* 
 * Information structure for VERT_HDR
 */
typedef struct das_VERT_HDR {
    char hdr_name[8];
    deng_ui32_t hdr_size;
    deng_ui32_t vert_c;
} das_VERT_HDR;



/*
 * Information structure for INDX_HDR
 */
typedef struct das_INDX_HDR {
    char hdr_name[8];
    deng_ui32_t hdr_size;
    deng_ui32_t ind_c;
} das_INDX_HDR;


#ifdef __DAS_LOADER_C
    /******************************************/
    /****** DAS file assembler functions ******/
    /******************************************/ 

    /*
     * Assemble INFO_HDR part in das file
     * This function assumes that wfile is a valid FILE stream
     */
    void __das_AssembleINFOHDR (
        char *uuid,
        das_AssetMode asset_mode
    );


    /*
     * Assemble VERT_HDR part in das file
     * This function assumes that wfile is a valid FILE stream
     */
    void __das_AssembleVERTHDR (
        das_VertDynamic vert, 
        das_AssetMode asset_mode
    );


    /*
     * Assemble INDX_HDR part in das file
     * This function assumes that wfile is a valid FILE stream
     */
    void __das_AssembleINDXHDR(das_IndicesDynamic ind);


    /*
     * Assemble new custom header for das file
     * This function assumes that wfile is a valid FILE stream
     */
    void __das_AssembleCustomHDR(das_HeaderInfo hdr_info);


    FILE *__wfile = NULL;
    char *__buf = NULL;
    size_t __buf_size = 0;
    size_t __offset = 0;
#endif



/* 
 * Create new asset file from exising das_Asset instance
 */
void das_Assemble (
    das_Asset *p_asset, 
    char *file_name,
    das_HeaderInfo *chdr_infos,
    size_t hdr_ic
);



/******************************************/
/********* Asset reader functions *********/
/******************************************/

/* 
 * Read .das binary asset file into das_Asset instance
 */
void das_ReadAsset (
    das_Asset *p_asset, 
    das_AssetMode dst_mode,
    char *file_name
);

 
/*
 * Read all data from asset file into buffer for reading
 */
void __das_ReadAssetFile(char *file_name); 


/*
 * Free all resources allocated in asset reading 
 */
void __das_ReadCleanup();


/*
 * Read asset information from INFO_HDR
 */
void __das_ReadINFOHDR (
    das_INFO_HDR *out_hdr,
    char *file_name
);


/*
 * Verify that all custom headers are skipped from reading
 */
void __das_SkipCustomHeaders();


/*
 * Increment reading offset by n bytes
 * If offset is greater than the buffer size the remainder
 * modulo will be used as the new offset
 */
void __das_IncrementOffset(size_t n);



/*
 * Copy asset vertices from buffer to out_vert
 */
void __das_CopyVertices (
    das_Asset *p_asset,
    das_AssetMode src_mode,
    char *file_name
);


/*
 * Read information from VERT_HDR
 */
void __das_ReadVERTHDR (
    das_VERT_HDR *out_hdr,
    char *file_name
);


/*
 * Copy all indices from buffer to p_out_ind
 */
void __das_CopyIndices (
    deng_ui32_t **p_out_ind,
    deng_ui32_t ind_c,
    char *file_name
);


/*
 * Read information from INDX_HDR
 */
void __das_ReadINDXHDR (
    das_INDX_HDR *out_hdr,
    char *file_name
);



// TEMPORARY FUNCTION LOCATIONS FOR CLEANUP
// Should be moved to elsewhere
/*
 * Cleanup all memory allocated for assets
 */
void das_DestroyAssets (
    das_Asset *assets, 
    deng_ui32_t asset_c
);


/*
 * Cleanup all heap allocated memory for textures
 */
void das_DestroyTextures (
    das_Texture *textures, 
    deng_ui32_t tex_c
);

#ifdef __cplusplus
    }
#endif
#endif
