/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __IMGUI_RENDERER_CPP
#include <imgui-layer/ui_manager.h>

namespace deng {

    UIManager::UIManager(deng::Renderer &rend) : m_rend(rend) {
        // Create new ImGui context
        ImGui::CreateContext();
        m_p_io = &ImGui::GetIO();
        
        // Create a texture atlas for ImGui
        das_Texture imgui_atlas = {};
        imgui_atlas.uuid = uuid_Generate();
        m_imgui_atlas = imgui_atlas.uuid;
        m_gui_data.tex_id = imgui_atlas.uuid;
        imgui_atlas.name = (char*) "#ImGui_atlas";
    
        // Temporary width and height variables
        deng_i32_t width, height;
        m_p_io->Fonts->GetTexDataAsRGBA32(&imgui_atlas.pixel_data.pixel_data, &width, &height);

        // Cast the width and height parameters into texture width and height
        imgui_atlas.pixel_data.width = static_cast<deng_ui16_t>(width);
        imgui_atlas.pixel_data.height = static_cast<deng_ui16_t>(height);

        imgui_atlas.pixel_data.size = width * height * 4;
        imgui_atlas.no_reg_cleanup = true;

        das_RealignPixelData(&imgui_atlas, DAS_PIXEL_FORMAT_R8G8B8A8);
        das_LogTexture(&imgui_atlas, "imgui-tex.log");
        
        // Set the texture ID
        m_p_io->Fonts->SetTexID((void*) imgui_atlas.uuid);

        m_rend.pushTexture(imgui_atlas);
        m_rend.setUIDataPtr(&m_gui_data);
    }


    // Update IO device input
    void UIManager::updateIO(const deng::Window &win) {
        m_p_io->DisplaySize.x = static_cast<deng_vec_t>(win.getSize().first);
        m_p_io->DisplaySize.y = static_cast<deng_vec_t>(win.getSize().second);
        m_p_io->MousePos.x = static_cast<deng_vec_t>(win.getMPos().first);
        m_p_io->MousePos.y = static_cast<deng_vec_t>(win.getMPos().second);
        m_p_io->WantCaptureMouse = true;

        m_p_io->MouseDown[0] = m_p_io->MouseClicked[0] = __deng_FindKeyStatus(DENG_KEY_UNKNOWN, DENG_MOUSE_BTN_1, DENG_INPUT_TYPE_MOUSE,
            DENG_INPUT_EVENT_TYPE_ACTIVE);
        m_p_io->MouseDown[1] = m_p_io->MouseClicked[1] = __deng_FindKeyStatus(DENG_KEY_UNKNOWN, DENG_MOUSE_BTN_2, DENG_INPUT_TYPE_MOUSE,
            DENG_INPUT_EVENT_TYPE_ACTIVE);
    }


    /// Update ImGui draw content according to the changed data
    void UIManager::render(ImDrawData *p_draw_data, const Window &win) {
        size_t list_offset = 0;
        m_gui_data.cmd_data.resize(p_draw_data->CmdListsCount);
        m_gui_data.entities.clear();
        std::this_thread::sleep_for(std::chrono::microseconds(1000));

        // For each command list in the list output its vertices to the renderer
        for(deng_ui32_t i = 0; i < p_draw_data->CmdListsCount; i++) {
            const ImDrawList *draw_list = p_draw_data->CmdLists[i];
            ImDrawVert *verts = draw_list->VtxBuffer.Data;
            ImDrawIdx *inds = draw_list->IdxBuffer.Data;

            // For each vertex, convert its pixel size to vector size
            for(deng_ui32_t j = 0; j < draw_list->VtxBuffer.Size; j++) {
                verts[j].pos.x = dengMath::Conversion::mouseCoordToVecCoord(verts[j].pos.x, static_cast<deng_px_t>(win.getSize().first));
                verts[j].pos.y = dengMath::Conversion::mouseCoordToVecCoord(verts[j].pos.y, static_cast<deng_px_t>(win.getSize().second));
            }

            m_gui_data.cmd_data[i].verts = verts;
            m_gui_data.cmd_data[i].vert_c = draw_list->VtxBuffer.Size;

            m_gui_data.cmd_data[i].ind = inds;
            m_gui_data.cmd_data[i].ind_c = draw_list->IdxBuffer.Size;
            
            // For each command buffer in the current command list set its vertices and indices
            for(deng_ui32_t j = 0; j < draw_list->CmdBuffer.Size; j++) {
                const ImDrawCmd *p_cmd = &draw_list->CmdBuffer[j];

                // Check if user callback should be respected
                if(p_cmd->UserCallback) 
                    p_cmd->UserCallback(draw_list, p_cmd);

                // Perform buffer data update 
                else {
                    __ImGuiEntity ent = {};
                    ent.buf_offset = list_offset + draw_list->VtxBuffer.Size * sizeof(ImDrawVert) + 
                        p_cmd->IdxOffset * sizeof(ImDrawIdx);
                    ent.ind = inds + p_cmd->IdxOffset;
                    ent.ind_c = p_cmd->ElemCount;

                    // Set up clipping rectangle parameters
                    ent.sc_rec_offset.first = static_cast<deng_i32_t>(p_cmd->ClipRect.x - p_draw_data->DisplayPos.x);
                    ent.sc_rec_offset.second = static_cast<deng_i32_t>(p_cmd->ClipRect.y - p_draw_data->DisplayPos.y);
                    ent.sc_rec_size.first = static_cast<deng_ui32_t>(p_cmd->ClipRect.z - p_cmd->ClipRect.x);
                    ent.sc_rec_size.second = static_cast<deng_ui32_t>(p_cmd->ClipRect.w - p_cmd->ClipRect.y);
                    ent.cmd_list_ind = i;

                    m_gui_data.entities.push_back(ent);
                }
            }

            // Increment the list offset accordingly
            list_offset += draw_list->VtxBuffer.Size * sizeof(ImDrawVert) + draw_list->IdxBuffer.Size * sizeof(ImDrawIdx);
        }
        
        // Update vertices data
        m_rend.uiUpdateData();
    }
}
