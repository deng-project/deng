/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define DENG_ENABLE_STD_INCL
#include <common/uuid.h>
#include <deng/deng.h>
#define SANDBOX_BACKGROUND {0.1411765f, 0.0431372f, 0.2313725f, 1.0f}

int main() {
    deng::WindowWrap window(1280, 980, "Game!");

    deng::EditorCamera ed_cam (
        0.2f,
        {0.0f, 0.0f, 0.0f}, 
        {0.7f, 0.7f},
        dengMath::Conversion::degToRad(65.0f), 
        DENG_DEFAULT_NEAR_PLANE, 
        DENG_DEFAULT_FAR_PLANE, 
        &window
    );

    //deng::FPPCamera fpp_cam (
    //    {1.0f, 1.0f, 1.0f}, 
    //    {0.7f, 0.7f}, 
    //    dengMath::Conversion::degToRad(65.0f), 
    //    DENG_DEFAULT_NEAR_PLANE, 
    //    DENG_DEFAULT_FAR_PLANE, 
    //    NULL, 
    //    NULL,
    //    &window
    //);

    deng::Renderer rend (
        &window, 
        &ed_cam,
        DENG_CAMERA_EDITOR
    );

    rend.setHints (
        DENG_RENDERER_HINT_SHOW_CMD_FPS_COUNTER |
        DENG_RENDERER_HINT_MSAA_4 |
        DENG_RENDERER_HINT_ENABLE_VALIDATION_LAYERS |
        DENG_RENDERER_HINT_MIPMAP_ENABLE
    );
    
    std::array<das_Asset, 2> assets;
    dengMath::ModelMatrix viking_mat;
    viking_mat.setRotation(0, 0.0f, 0.0f);
    viking_mat.setScale(1.0f, 1.0f, 1.0f);

    // Load some example
    #ifdef _WIN32
        das_ReadAsset (
            &assets[0], 
            DAS_ASSET_MODE_3D_TEXTURE_MAPPED,
            "..\\viking_unor.das"
        );
    #endif
    #ifdef __linux__
        das_ReadAsset (
            &assets[0],
            DAS_ASSET_MODE_3D_TEXTURE_MAPPED,
            (char*) "assets/viking_unor.das"
        );
    #endif


    assets[0].name = (char*) "viking_room";
    assets[0].is_shown = true;
    dengMath::mat4<deng_vec_t> mmat = viking_mat.getModelMatrix();
    dengMath::Transformer::apply3DModelMatrix (
        assets[0], 
        mmat
    );

    das_Texture viking_tex;
    #ifdef _WIN32
        dasLoadTexture (
            &viking_tex,
            "..\\viking_room.tga"
        );
    #endif
    #ifdef __linux__  
        das_LoadTexture (
            &viking_tex,
            "../viking_room.tga"
        );
    #endif
    viking_tex.uuid = uuid_Generate();
    viking_tex.name = (char*) "viking";
    assets[0].tex_uuid = viking_tex.uuid;
    
    dengUtils::GridGenerator grid_gen (
        DENG_DEFAULT_GRID_COLOR, 
        50.0f, 
        150
    );

    assets[1] = grid_gen.getGrid();
    assets[1].is_shown = true;

    rend.submitAssets(assets.data(), assets.size());
    rend.submitTextures(&viking_tex, 1);

    rend.initRenderer (
        DENG_RENDERER_USAGE_MAP_EDITOR, 
        SANDBOX_BACKGROUND
    );

    rend.run();
    return EXIT_SUCCESS;
}
