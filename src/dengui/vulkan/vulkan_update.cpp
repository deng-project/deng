/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __VULKAN_UPDATE_CPP
#include <dengui/vulkan/vulkan_update.h>


namespace dengui {
    namespace vulkan {
        /***************************************/
        /********* FRAME UPDATER CLASS *********/
        /***************************************/
        __FrameUpdater::__FrameUpdater(EventInfo *p_info) 
        { m_p_info = p_info; }


        /* External asset mutex lockers and unlockers */
        void __FrameUpdater::lockAssets() {
            m_p_info->p_res_mut->lock();
        }


        void __FrameUpdater::unlockAssets() {
            m_p_info->p_res_mut->unlock();
        }

        
        /* 
         * External frame mutex lockers and unlockers 
         */
        void __FrameUpdater::lockFrame() {
            m_p_info->p_frame_mut->lock();
            vkDeviceWaitIdle(m_p_info->p_ic->getDev());
        }

        void __FrameUpdater::unlockFrame() {
            m_p_info->p_frame_mut->unlock();
        }


        /* Reallocate vertex buffer */
        void __FrameUpdater::reallocBuffer() {
            vkDestroyBuffer (
                m_p_info->p_ic->getDev(),
                m_p_info->p_ra->getBD()->main_buffer,
                NULL
            );

            vkFreeMemory (
                m_p_info->p_ic->getDev(),
                m_p_info->p_ra->getBD()->main_buffer_memory,
                NULL
            );

            m_p_info->p_ra->mkBuffers (
                m_p_info->p_ic->getDev(),
                m_p_info->p_ic->getGpu(),
                m_p_info->p_dc->getComPool(),
                m_p_info->p_ic->getQFF().graphics_queue
            );
        }

        
        /* Update vertices for every asset between bounds */
        void __FrameUpdater::updateVerts(dengMath::vec2<deng_ui32_t> update_bounds) {
            m_p_info->p_ra->remapAssetVerts (
                m_p_info->p_ic->getDev(),
                m_p_info->p_ic->getGpu(),
                m_p_info->p_dc->getComPool(),
                m_p_info->p_ic->getQFF().graphics_queue,
                update_bounds
            );
        }


        /* 
         * Update descriptor sets with texture sampling 
         */
        void __FrameUpdater::updateTexDS (
            deng_bool_t realloc_ds, 
            dengMath::vec2<deng_ui32_t> *p_tex_bounds
        ) {
            m_p_info->p_desc_c->updateTexDescriptors (
                m_p_info->p_ic->getDev(),
                m_p_info->sc_img_size,
                realloc_ds,
                p_tex_bounds,
                m_p_info->p_ra->getBD()
            );
        }


        /* 
         * Update newly pushed texture objects 
         */
        void __FrameUpdater::updateTextures(dengMath::vec2<deng_ui32_t> tex_bounds) {
            m_p_info->p_ra->mkTextureImages (
                m_p_info->p_ic->getDev(),
                m_p_info->p_ic->getGpu(),
                m_p_info->p_dc->getComPool(),
                m_p_info->p_ic->getLFSupport(),
                tex_bounds,
                m_p_info->p_ic->getQFF().graphics_queue,
                m_p_info->sc_img_size
            );

            updateTexDS (
                true, 
                &tex_bounds
            );
        }


        /* Update command buffers */
        void __FrameUpdater::updateCmdBuffers() {
            m_p_info->p_dc->recordMainCmdBuffers (
                m_p_info->renderpass,
                m_p_info->ext,
                m_p_info->background,
                *m_p_info->p_ra->getBD()
            );
        }
    }
}
