/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


// DO NOT COMPILE THIS FILE!!!
#ifndef __VEC2_CPP
#define __VEC2_CPP

namespace dengMath {

    template<typename T>
    const vec2<T> vec2<T>::operator+(const vec2<T> &vec) const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            vec2<T> out = { first + vec.first, second + vec.second };
            return out; 
        }
        
        else return vec2<T>{};
    }


    template<typename T>
    const vec2<T> vec2<T>::operator+(const T c) const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            vec2<T> out = { first + c, second + c };
            return out; 
        }
        
        else return vec2<T>{};
    }


    template<typename T>
    const vec2<T> vec2<T>::operator-(const vec2<T> &vec) const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            vec2<T> out = { first - vec.first, second - vec.second };
            return out;
        }
        
        else return vec2<T>{};
    }


    template<typename T>
    const vec2<T> vec2<T>::operator-(const T c) const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            vec2<T> out = { first - c, second - c };
            return out; 
        }
        
        else return vec2<T>{};
    }


    template<typename T>
    const T vec2<T>::operator*(const vec2<T> &vec) const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            T out = (vec.first * first + vec.second * second);
            return out;
        }
        
        else return T{};
    }


    template<typename T>
    const vec2<T> vec2<T>::operator*(const T c) const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            vec2<T> out = {
                c * first,
                c * second,
            };

            return out; 
        }
        
        else return vec2<T>{};
    }


    template<typename T>
    const vec2<T> vec2<T>::operator/(const T c) const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            vec2<T> out = {
                first / c,
                second / c
            };

            return c;
        } 
        
        else return vec2<T>{};
    }


    template<typename T>
    void vec2<T>::operator*=(const T c) {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            first *= c;
            second *= c;
        }
    }


    template<typename T>
    void vec2<T>::operator*=(const mat2<T> &m) {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) 
            *this = m * (*this);
    }


    template<typename T>
    void vec2<T>::operator+=(const vec2<T> &vec) {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            first += vec.first;
            second += vec.second;
        }
    }


    template<typename T>
    void vec2<T>::operator+=(const T c) {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            first += c;
            second += c;
        }
    }

    
    template<typename T>
    void vec2<T>::operator-=(const vec2<T> &vec) {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            first -= vec.first;
            second -= vec.second;
        }
    }

    
    template<typename T>
    void vec2<T>::operator-=(const T c) {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            first -= c;
            second -= c;
        }
    }


    template<typename T>
    void vec2<T>::operator/=(const T c) {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            first /= c;
            second /= c;
        }
    }


    template<typename T>
    const deng_bool_t vec2<T>::operator==(const vec2<T> &vec) const {
        return static_cast<deng_bool_t>(first == vec.first && second == vec.second); 
    }


    template<typename T>
    void vec2<T>::operator=(const das_ObjTextureData tex) {
        if(std::is_floating_point<T>::value) {
            first = tex.tex_x;
            second = tex.tex_y;
        }
    }


    template<typename T>
    void vec2<T>::operator=(const das_ObjPosData2D pos) {
        if(std::is_floating_point<T>::value) {
            first = pos.vert_x;
            second = pos.vert_y;
        }
    }

    
    template<typename T>
    const deng_bool_t vec2<T>::operator==(const das_ObjTextureData tex) const {
        if(std::is_floating_point<T>::value) {
            return static_cast<deng_bool_t>(
                first == tex.tex_x &&
                second == tex.tex_y
            );
        }

        else return false;
    }


    template<typename T>
    const deng_bool_t vec2<T>::operator==(const das_ObjPosData2D pos) const {
        if(std::is_floating_point<T>::value) {
            return static_cast<deng_bool_t>(
                first == pos.vert_x &&
                second == pos.vert_y
            );
        }

        else return false;
    }


    template<typename T>
    const T vec2<T>::length() const {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            return (T) sqrt (
                first * first +
                second * second
            );
        }

        else return T{};
    }


    template<typename T>
    void vec2<T>::norm() {
        if(std::is_floating_point<T>::value || std::is_integral<T>::value) {
            T len = length();
            first /= len;
            second /= len;
        }
    }
}

#endif
