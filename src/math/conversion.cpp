/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __CONVERSION_CPP
#include <math/conversion.h>


namespace dengMath {

    /// Convert degrees into radians
    const deng_f64_t Conversion::degToRad(deng_f64_t deg) {
        return PI * deg / 180;
    }


    /// Convert radians into degrees
    const deng_f64_t Conversion::radToDeg(deng_f64_t rad) {
        return 180 * rad / PI;
    }


    /// Convert from vector coordinate size into pixel size
    const deng_px_t Conversion::vector2DSizeToPixelSize (
        deng_vec_t vec_size, 
        deng_ui32_t window_size
    ) { return static_cast<deng_px_t>(vec_size * static_cast<deng_vec_t>(window_size) / 2.0f); }



    /// Convert from pixel size into vector coordinate size
    const deng_vec_t Conversion::pixelSizeToVector2DSize (
        deng_px_t pixel_size, 
        deng_ui32_t window_size
    ) { return 2.0f * static_cast<deng_vec_t>(pixel_size) / static_cast<deng_vec_t>(window_size); }


    /// Find the absolute position of child coordinates
    /// vert must be a pointer to valid array with at least 4 members
    const vec2<deng_vec_t> Conversion::findAbsPosition (
        das_ObjPosData *vert,
        vec2<deng_vec_t> child_pos
    ) {
        vec2<deng_vec_t> size;
        size.first = vert[1].vert_x - vert[0].vert_x;
        size.second = vert[3].vert_y - vert[0].vert_y;

        vec2<deng_vec_t> abs_coords = {
            vert[0].vert_x + (child_pos.first + 1.0f / 2 * size.first),
            vert[0].vert_y + (child_pos.second + 1.0f) / 2 * size.second
        };
       
        return abs_coords;
    }


    /// Find the relative position of absolute coordinates
    /// NOTE: vert must be a pointer to valid array with at least 4 members
    const vec2<deng_vec_t> Conversion::findRelPosition (
        das_ObjPosData *vert,
        vec2<deng_vec_t> abs_pos
    ) {
        vec2<deng_vec_t> size;
        size.first = vert[1].vert_x - vert[0].vert_x;
        size.second = vert[3].vert_y - vert[0].vert_y;

        vec2<deng_vec_t> rel_pos = {
            2 * (abs_pos.first + vert[0].vert_x) / size.first - 1.0f,
            2 * (abs_pos.second + vert[0].vert_y) / size.second - 1.0f
        }; 

        return rel_pos; 
    }


    /// Find the absolute size of the child element
    const deng_vec_t Conversion::findAbsSize (
        deng_vec_t parent_size,
        deng_vec_t child_size
    ) { return parent_size / 2 * child_size; }



    /// Find the relative size of abs_size from its parent_size
    const deng_vec_t Conversion::findRelSize (
        deng_vec_t parent_size,
        deng_vec_t abs_size
    ) { return abs_size / parent_size * 2; }


    /// Convert mouse axis position to corresponding vector coordinate
    const deng_vec_t Conversion::mouseCoordToVecCoord(const deng_px_t mouse_axis_pos, const deng_px_t axis_len) {
        return ((2.0f * static_cast<deng_vec_t>(mouse_axis_pos) - static_cast<deng_vec_t>(axis_len)) / axis_len);
    }


    /// Convert vector axis coordinate to corresponding mouse coordinate
    const deng_vec_t Conversion::vecCoordToMouseCoord(const deng_vec_t vec_axis_pos, const deng_px_t axis_len) {
        return (vec_axis_pos + 1.0f) * axis_len / 2;
    }
}
