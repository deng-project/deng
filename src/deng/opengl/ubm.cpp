/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __GL_UBM_CPP
#include <deng/opengl/ubm.h>


namespace deng {
    namespace opengl {

        __gl_UniformManager::__gl_UniformManager(__GlobalRegistry &reg, std::vector<deng_Id> &assets, __gl_Resources &res) 
            : __OffsetFinder(assets, reg), m_reg(reg), m_resources(res) {
            glGenBuffers(1, &m_resources.ubo_buffer);
            glBindBuffer(GL_UNIFORM_BUFFER, m_resources.ubo_buffer);
            glBufferData(GL_UNIFORM_BUFFER, __OffsetFinder::getSectionInfo().ui_cap, NULL, GL_DYNAMIC_DRAW);  
        }


        /// Reserve a uniform data memory location for OpenGL asset
        void __gl_UniformManager::mapUniformBufferArea(das_Asset &asset) {
            asset.offsets.ubo_offset = __OffsetFinder::getSectionInfo().ubo_asset_size;

            // Check the asset mode for assgning correct asset data values
            if(asset.asset_mode == DAS_ASSET_MODE_3D_UNMAPPED ||
               asset.asset_mode == DAS_ASSET_MODE_3D_TEXTURE_MAPPED) {
                __OffsetFinder::getSectionInfo().ubo_asset_size += sizeof(__UniformAssetData2D);
            }

            else __OffsetFinder::getSectionInfo().ubo_asset_size += sizeof(__UniformAssetData);

            // Check if the uniform buffer needs to be reallocated
            if(__OffsetFinder::getSectionInfo().ubo_asset_size > __OffsetFinder::getSectionInfo().ubo_asset_cap) {
                const deng_ui64_t non_asset_ubo_asset_size = sizeof(__UniformObjectTransform) + sizeof(__UniformObjectTransform2D) + 
                    sizeof(__UniformLightData);

                // Set the asset ubo capacity
                __OffsetFinder::getSectionInfo().ubo_asset_cap = std::max(__OffsetFinder::getSectionInfo().ubo_asset_cap * 3 / 2, 
                    __OffsetFinder::getSectionInfo().ubo_asset_size * 3 / 2);

                // Set the overall ubo capacity
                __OffsetFinder::getSectionInfo().ubo_cap = __OffsetFinder::getSectionInfo().ubo_asset_cap + 
                    __OffsetFinder::getSectionInfo().ubo_non_asset_size;

                // Reallocate uniform buffers
                glBufferData(GL_UNIFORM_BUFFER, __OffsetFinder::getSectionInfo().ui_cap, NULL, GL_DYNAMIC_DRAW);
            }
        }


        /// Update uniform transformation data for the frame according to 
        /// camera's view and projection matrix
        void __gl_UniformManager::updateUboTransform3D(Camera3D *p_cam) {
            __UniformObjectTransform ubo;
            ubo.transform = p_cam->getCameraMat();
            ubo.view = p_cam->getViewMat();

            // 3D uniform transformation data always has binding of 0 and offset of 0
            glBindBufferRange(GL_UNIFORM_BUFFER, 0, m_resources.ubo_buffer, 0, sizeof(__UniformObjectTransform));
        }


        /// Update asset uniform buffer data
        void __gl_UniformManager::updateAssetUboData(das_Asset &asset) {
            if(asset.asset_mode == DAS_ASSET_MODE_3D_TEXTURE_MAPPED ||
               asset.asset_mode == DAS_ASSET_MODE_3D_UNMAPPED) {
                __UniformAssetData ubo = {};

                // Set all asset lighting / material properties
                ubo.ambient = asset.ambient;
                ubo.diffuse = asset.diffuse;
                ubo.phong_exp = asset.phong_exp;

                // Additional asset shader flags
                ubo.ignore_transform = static_cast<deng_ui32_t>(asset.is_transformed);
                ubo.is_unmapped = static_cast<deng_ui32_t>(asset.force_unmap);

                // Asset uniform binding is always 1 and has offset of specified asset ubo_offset
                glBindBufferRange(GL_UNIFORM_BUFFER, 1, m_resources.ubo_buffer, asset.offsets.ubo_offset, sizeof(__UniformAssetData));
            }

            else {
                __UniformAssetData2D ubo = {};
                ubo.color = asset.diffuse;
                ubo.is_transform = asset.is_transformed;
                ubo.is_unmapped = asset.force_unmap;

                // Asset uniform binding is always 1 and has offset of specified asset ubo_offset
                glBindBufferRange(GL_UNIFORM_BUFFER, 1, m_resources.ubo_buffer, asset.offsets.ubo_offset, sizeof(__UniformAssetData2D));
            }
        }

        
        /// Update lighting uniform data
        void __gl_UniformManager::updateUboLighting(std::array<deng_Id, __DENG_MAX_LIGHT_SRC_COUNT> &light_srcs) {
            __UniformLightData ubo = {};

            // For each light source add it to light source ubo structure
            for(deng_ui64_t i = 0; i < light_srcs.size(); i++) {
                // Quit if no light source id is specified
                if(!light_srcs[i]) break;

                deng_SupportedRegType rtype = {};
                deng_SupportedRegTypeBitMask mask_type = DENG_SUPPORTED_REG_TYPE_PT_LIGHT | DENG_SUPPORTED_REG_TYPE_SUN_LIGHT | 
                    DENG_SUPPORTED_REG_TYPE_DIR_LIGHT;

                // Retrieve the current light source from the registry
                RegType &reg_light = m_reg.retrieve(light_srcs[i], mask_type, &rtype);

                switch(rtype) {
                case DENG_SUPPORTED_REG_TYPE_PT_LIGHT:
                    ubo.light_srcs[i].intensity = reg_light.pt_light.intensity;
                    ubo.light_srcs[i].pos = reg_light.pt_light.pos;
                    ubo.light_src_c++;
                    break;

                default:
                    goto BIND;
                }
            }

            // Light source always has a binding of 2 and offset of sizeof(__UniformAssetData) + sizeof(__UniformAssetData2D)
            BIND:
            glBindBufferRange(GL_UNIFORM_BUFFER, 2, m_resources.ubo_buffer, sizeof(__UniformAssetData) + 
                sizeof(__UniformAssetData2D), sizeof(__UniformLightData));
        }
    }
}
