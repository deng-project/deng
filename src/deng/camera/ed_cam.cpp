/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __ED_CAM_CPP
#include <deng/camera/ed_cam.h>

extern deng::__SharedMouseData __ext_md;

namespace deng {

    /********************************/
    /********************************/
    /********* Editor Camera ********/
    /********************************/
    /********************************/

    __EditorCameraEv::__EditorCameraEv (
        const dengMath::vec2<deng_f64_t> &mouse_sens,
        deng_vec_t zoom_step,
        const dengMath::vec3<deng_vec_t> &origin,
        Window *p_win
    ) : __EventBase (
            {
                DENG_VCP_OVERFLOW_ACTION_TO_OPPOSITE_POSITION,
                DENG_VCP_OVERFLOW_ACTION_BLOCK_POSITION
            },
            {{static_cast<deng_px_t>(-BASE_MAX_VC_X / mouse_sens.first), static_cast<deng_px_t>(BASE_MAX_VC_X / mouse_sens.first)}, 
             {static_cast<deng_px_t>(-BASE_MAX_VC_Y / mouse_sens.second), static_cast<deng_px_t>(BASE_MAX_VC_Y / mouse_sens.second)}},
            {PI / 2, PI * 2},
            p_win
    ) { 
        m_p_win = p_win;
        m_zoom_step = zoom_step;
    } 


    /*
     * Check if any camera events have occured
     */
    void __EditorCameraEv::findEditorEvent() {
        __ext_md.mut.lock();

        deng_bool_t rot_act = __checkInputAction(DENG_CAMERA_ACTION_CHANGE_MM);
        deng_bool_t out_zoom = __checkInputAction(DENG_CAMERA_ACTION_MOV_W);
        deng_bool_t in_zoom = __checkInputAction(DENG_CAMERA_ACTION_MOV_NW);

        // Check if rotation mode should be enabled
        if(rot_act) {
            m_editor_cam_ev = DENG_EDITOR_CAMERA_EVENT_MOUSE_ROTATE;
        }
        else if(out_zoom) m_editor_cam_ev = DENG_EDITOR_CAMERA_EVENT_Z_MOV_OUT;
        else if(in_zoom) m_editor_cam_ev = DENG_EDITOR_CAMERA_EVENT_Z_MOV_IN;
        else m_editor_cam_ev = DENG_EDITOR_CAMERA_EVENT_NONE;
        
        __ext_md.mut.unlock();
    }


    /*
     * Zoom in the editor camera 
     */
    void __EditorCameraEv::zoomIn(dengMath::CameraMatrix *p_vm) {
        p_vm->moveCamera (
            dengMath::vec3<deng_vec_t>{0.0f, 0.0f, m_zoom_step},
            true,
            false,
            DENG_COORD_AXIS_Z
        );
    }


    /// Move camera position in z direction 
    void __EditorCameraEv::zoomOut(dengMath::CameraMatrix *p_vm) {
        p_vm->moveCamera (
            dengMath::vec3<deng_vec_t>{0.0f, 0.0f, -m_zoom_step},
            true,
            false,
            DENG_COORD_AXIS_Z
        );
    }


    /// Update editor camera event polling 
    void __EditorCameraEv::updateEv (
        dengMath::vec3<deng_vec_t> origin, 
        dengMath::CameraMatrix *p_vm
    ) {
        if(m_is_rot_cur) 
            __EventBase::__updateMouseEvData();
        findEditorEvent();

        switch(m_editor_cam_ev) {
        case DENG_EDITOR_CAMERA_EVENT_Z_MOV_IN: {
            if(m_is_rot_cur) {
                m_p_win->changeVCMode(false);
                m_is_rot_cur = false;
            }

            zoomIn(p_vm);
            p_vm->setOriginRotation (
                origin, 
                static_cast<deng_vec_t>(m_last_rot.first),
                static_cast<deng_vec_t>(m_last_rot.second)
            );
            break;
        }

        case DENG_EDITOR_CAMERA_EVENT_Z_MOV_OUT: {
            if(m_is_rot_cur) {
                m_p_win->changeVCMode(false);
                m_is_rot_cur = false;
            }

            zoomOut(p_vm);
            p_vm->setOriginRotation (
                origin,
                static_cast<deng_vec_t>(m_last_rot.first), 
                static_cast<deng_vec_t>(m_last_rot.second)
            );

            break;
        }

        case DENG_EDITOR_CAMERA_EVENT_MOUSE_ROTATE: {
            if(!m_is_rot_cur) {
                m_p_win->changeVCMode(true);
                m_is_rot_cur = true;
            }

            m_last_rot = __EventBase::__getMouseRotation();
            p_vm->setOriginRotation (
                origin,
                static_cast<deng_vec_t>(m_last_rot.first),
                static_cast<deng_vec_t>(m_last_rot.second)
            );
            break;
        }
                                              
        default:
            if(m_is_rot_cur) {
                m_p_win->changeVCMode(false);
                m_is_rot_cur = false;
            }
            break;
        }

        p_vm->camTransform(true);
    }


    /// Set the editor camera bindings
    void __EditorCameraEv::setBindings(const Camera3DBindings &bindings) {
        m_bindings = bindings;
    }

    
    /*
     * Get the pointer to the window instance
     */
    Window *__EditorCameraEv::getWinPtr() {
        return m_p_win;
    }

    
    /*
     * Set the window pointer
     */
    void __EditorCameraEv::setWinPtr(Window *p_win) {
        m_p_win = p_win;
    }


    /********************************/
    /********************************/
    /********* EditorCamera *********/
    /********************************/
    /********************************/

    __EditorCamera::__EditorCamera (
        deng_vec_t zoom_step,
        const dengMath::vec3<deng_vec_t> &origin,
        const dengMath::vec2<deng_f64_t> &mouse_sens,
        deng_vec_t fov,
        deng_vec_t near_plane,
        deng_vec_t far_plane,
        Window *p_ww
    ) : __EditorCameraEv (
            mouse_sens, 
            zoom_step, 
            origin, 
            p_ww
        ), 
        __CameraBase (
            DENG_CAMERA_TYPE_EDITOR,
            fov,
            {near_plane, far_plane},
            (deng_vec_t) __EditorCameraEv::getWinPtr()->getSize().first / (deng_vec_t) __EditorCameraEv::getWinPtr()->getSize().second
        ) {
        m_origin = origin;
        setWinPtr(p_ww);
        getWinPtr()->changeVCMode(false);
    }


    /*
     * Move origin point in world coordinate system by delta_mov
     */
    void __EditorCamera::moveOrigin(const dengMath::vec3<deng_vec_t> &delta_mov) {
        m_origin += delta_mov;
    }


    /// Set camera control bindings for editor camera system
    void __EditorCamera::setBindings(const Camera3DBindings &bindings) {
        m_bindings = bindings;
    }


    /// Wrapper method for updating camera events
    void __EditorCamera::update() {
        updateEv (
            m_origin,
            &m_cam_mat
        );
    }
}
