/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


/*
 * This file's purpose is to provide high level API access
 * in C language without having to use C++
 */

#define __CDENG_CPP
#include <deng/cdeng.h>

/*
 * Create surface window and start new renderer instance
 */
void deng_InitApi (
    deng_ui32_t width, 
    deng_ui32_t height, 
    char *title,
    void *cam_info,
    deng_CameraType cam_type
) {
    __p_win = new deng::WindowWrap(width, height, title);

    // Create new 2D shape generator instances
    __p_tri_gen = new dengUtils::TriangleGenerator(__p_win->getSize());
    __p_rec_gen = new dengUtils::RectangleGenerator(__p_win->getSize());
    __p_cir_gen = new dengUtils::CircleGenerator(__p_win->getSize());

    // Create new camera instance accordingly 
    switch(cam_type)
    {
    case DENG_CAMERA_FPP: {
        __cam_t = cam_type;
        deng_FPPCameraInfoC *p_i = (deng_FPPCameraInfoC*) cam_info;
        __p_fpp_cam = new deng::FPPCamera (
            {
                p_i->camera_mov_speed.vert_x, 
                p_i->camera_mov_speed.vert_y, 
                p_i->camera_mov_speed.vert_z
            },
            {
                (deng_f64_t) p_i->mouse_sens.vert_x,
                (deng_f64_t) p_i->mouse_sens.vert_y
            },
            p_i->FOV,
            p_i->near_plane,
            p_i->far_plane,
            NULL,
            NULL,
            __p_win
        );   

        __p_rend = new deng::Renderer (
            __p_win,
            __p_fpp_cam,
            __cam_t
        );
        break;
    }

    case DENG_CAMERA_EDITOR: {
        deng_EditorCameraInfoC *p_i = (deng_EditorCameraInfoC*) cam_info;
        __p_ed_cam = new deng::EditorCamera (
            p_i->zoom_step,
            {
                p_i->origin.vert_x,
                p_i->origin.vert_y,
                p_i->origin.vert_z
            },
            {
                (deng_f64_t) p_i->mouse_sens.vert_x,
                (deng_f64_t) p_i->mouse_sens.vert_y
            },
            p_i->FOV,
            p_i->near_plane,
            p_i->far_plane,
            __p_win
        );

        __p_rend = new deng::Renderer (
            __p_win,
            __p_ed_cam,
            __cam_t
        );
        break;
    }

    default:
        break;
    }
}


/*
 * Free all memory allocated for the DENG API
 */
void deng_DestroyApiC() {
    switch(__cam_t)
    {
    case DENG_CAMERA_FPP:
        delete __p_fpp_cam;
        break;

    case DENG_CAMERA_EDITOR:
        delete __p_ed_cam;
        break;

    default:
        break;
    }

    delete __p_rend;
    delete __p_win;
    delete __p_rec_gen;
    delete __p_tri_gen;
    delete __p_cir_gen;
}


/*
 * Give renderer usage hints to the renderer
 */
void deng_SetRendererHintsC(deng_RendererHintBits hints) {
    __p_rend->setHints(hints);
}


/*
 * Submit asset_c amount of assets to the renderer
 */
void deng_SubmitAssetsC (
    das_Asset *assets, 
    size_t asset_c
) {
    __p_rend->submitAssets (
        assets,
        asset_c
    );
}


/*
 * Submit tex_c amount of textures to the renderer
 */
void deng_SubmitTexturesC (
    das_Texture *textures,
    deng_i32_t tex_c
) {
    __p_rend->submitTextures (
        textures,
        tex_c
    );
}


/*
 * Submit texture file to renderer
 */
void deng_SubmitTextureFile (
    char *tex_file, 
    char *uuid
) {
    __p_rend->submitTextureFile (
        std::string(tex_file), 
        std::string(uuid)
    );
}


/*
 * Finish renderer initialisation and run renderer
 */
void deng_RunRenderer (
    das_ObjColorData background,
    deng_RendererUsageMode usage
) {
    __p_rend->initRenderer (
        usage,
        {
            background.col_r,
            background.col_g,
            background.col_b,
            background.col_a
        }
    );


    __p_rend->run();
}
