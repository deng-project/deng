/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __ASSET_MAN_CPP
#include <deng/renderer/asset_man.h>

    
namespace deng {

    __AssetManager::__AssetManager (
        std::shared_ptr<vulkan::__vk_Renderer> &vk_rend, 
        std::shared_ptr<vulkan::__vk_ConfigVars> &vk_vars,
        deng_RendererHintBits &api
    ) : m_api_bits(api), m_vk_vars(vk_vars), m_vk_rend(vk_rend) {}


    /// Increment asset type instance count
    void __AssetManager::__assetTypeIncr(das_Asset &asset) {
        // Check the asset type and increment count accordingly
        switch(asset.asset_mode) {
        case DAS_ASSET_MODE_2D_UNMAPPED:
            m_vu2d_c++;
            break;

        case DAS_ASSET_MODE_2D_TEXTURE_MAPPED:
            m_vm2d_c++;
            break;

        case DAS_ASSET_MODE_3D_UNMAPPED:
            m_vu3d_c++;
            break;

        case DAS_ASSET_MODE_3D_TEXTURE_MAPPED:
            m_vm3d_c++;
            break;

        default: 
            break;
        }
    }


    /// Add texture id to submission queue
    /// PS! Texture UUIDs have to be generated before submitting them
    void __AssetManager::submitTexture(das_Texture &texture) {
        RegType reg_tex = { { 0 } };
        reg_tex.tex = texture;
        m_reg.push(reg_tex.tex.uuid, DENG_SUPPORTED_REG_TYPE_TEXTURE, reg_tex);
        m_texture_queue.push(reg_tex.tex.uuid);
    }


    /// Add asset id to submission queue
    /// PS! Asset UUIDs have to be generated before submitting them
    void __AssetManager::submitAsset(das_Asset &asset) {
        __assetTypeIncr(asset);

        RegType reg_asset = { { 0 } };
        reg_asset.asset = asset;
        m_reg.push(reg_asset.asset.uuid, DENG_SUPPORTED_REG_TYPE_ASSET, reg_asset);
        m_asset_queue.push(reg_asset.asset.uuid);
    }


    /// Submit all assets to in submission queue to renderer
    void __AssetManager::submitAssetQueue(const dengMath::vec4<deng_vec_t> &background) {
        // Idle the renderer
        if(m_api_bits == DENG_RENDERER_HINT_API_VULKAN)
            m_vk_rend->idle();

        // Keep popping asset ids from the queue
        deng_ui32_t old_size = static_cast<deng_ui32_t>(m_assets.size());
        while(!m_asset_queue.empty()) {
            m_assets.push_back(m_asset_queue.front());
            if(m_api_bits == DENG_RENDERER_HINT_API_VULKAN)
                m_vk_rend->prepareAsset(m_asset_queue.front());

            m_asset_queue.pop();
        }

        // Push data to buffer and allocate descriptor sets
        m_vk_rend->assetToBufferPushBack({ old_size, static_cast<deng_ui32_t>(m_assets.size()) });
        m_vk_rend->updateDS({ old_size, static_cast<deng_ui32_t>(m_assets.size()) });
        m_vk_rend->updateCmdBuffers(background);
    }


    /// Submit all textures in submission queue to renderer
    void __AssetManager::submitTextureQueue() {
        if(m_api_bits == DENG_RENDERER_HINT_API_VULKAN)
            m_vk_rend->idle();

        // Pop the queue while not empty
        while(!m_texture_queue.empty()) {
            m_textures.push_back(m_texture_queue.front());
            if(m_api_bits == DENG_RENDERER_HINT_API_VULKAN)
                m_vk_rend->prepareTexture(m_texture_queue.front());

            m_texture_queue.pop();
        }
    }


    /// Push asset to renderer and initialise it, possibly reallocate vertices buffer if needed
    /// PS! Asset UUIDs have to be generated before push and renderer must be setup
    void __AssetManager::pushAsset(das_Asset &asset) {
        submitAsset(asset);
        __assetTypeIncr(asset);

        // Check the currently used API instance
        switch(m_api_bits) {
        case DENG_RENDERER_HINT_API_VULKAN:
            m_vk_rend->idle();
            m_vk_rend->updateDS(dengMath::vec2<deng_ui32_t>{ static_cast<deng_ui32_t>(m_assets.size() - 1), 
                static_cast<deng_ui32_t>(m_assets.size()) } );

            m_vk_rend->assetToBufferPushBack({ static_cast<deng_ui32_t>(m_assets.size() - 1), 
                static_cast<deng_ui32_t>(m_assets.size()) });
            m_vk_rend->updateCmdBuffers(m_vk_vars->background);
            break;

        default:
            break;
        }
    }


    /// Push texture to renderer and initialise it, possibly reallocate texture memory if needed,
    /// PS! Texture UUIDs have to be generated before submitting them and renderer must be setup
    void __AssetManager::pushTexture(das_Texture &texture) {
        submitTexture(texture);
        m_vk_rend->prepareTexture(m_textures.back());
    }
}
