/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __CAMERA_CPP
#include <deng/camera.h>


namespace deng {

    /**********************************/
    /**********************************/
    /************ Camera3D ************/
    /**********************************/
    /**********************************/

    Camera3D::Camera3D (
        deng_CameraType cam_type,
        deng_vec_t fov,
        const dengMath::vec2<deng_vec_t> &planes,
        const dengMath::vec3<deng_vec_t> &mov_speed,
        const dengMath::vec2<deng_f64_t> &rot_sens,
        deng_bool_t ignore_pitch_rot,
        Window *win
    ) {
        m_p_win = win;
        m_cam_type = cam_type;

        // Check for camera instance to create
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_FPP:
            p_fpp_cam = new __FPPCamera (
                mov_speed,
                rot_sens, 
                fov,
                planes.first,
                planes.second,
                ignore_pitch_rot,
                m_p_win
            );
            break;

        case DENG_CAMERA_TYPE_EDITOR: {
            deng_vec_t zoom_step = __DENG_DEFAULT_ZOOM_STEP * (mov_speed.first + mov_speed.second + mov_speed.third) / 3;
            p_ed_cam = new __EditorCamera (
                zoom_step,
                {0.0f, 0.0f, 0.0f},
                rot_sens,
                fov,
                planes.first,
                planes.second,
                m_p_win
            );
            break;
        }   

        default:
            break;
        }
    }


    /*
     * Set the camera key bindings
     * NOTE: These bindings are the ones that control camera movement and rotation actions
     */
    void Camera3D::setBindings(const Camera3DBindings &bindings) {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_FPP:
            p_fpp_cam->setBindings(bindings);
            break;

        case DENG_CAMERA_TYPE_EDITOR:
            p_ed_cam->setBindings(bindings);
            break;

        default:
            break;
        }
    }


    /*
     * Move camera's origin in world space by delta_mov
     * NOTE: This method only effects editor camera and third person perspective camera
     * systems. It does nothing on the first person camera.
     */
    void Camera3D::moveOrigin(const dengMath::vec3<deng_vec_t> &delta_mov) {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_EDITOR:
            p_ed_cam->moveOrigin(delta_mov);
            break;

        /// Reserved for future use
        default:
            break;
        }
    }


    /*
     * Move camera's position by delta_mov in camera's coordinate system
     */
    void Camera3D::moveCameraPOVC (
        const dengMath::vec3<deng_vec_t> &delta_mov,
        deng_bool_t ignore_pitch
    ) {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_FPP:
            if(delta_mov.first)
                p_fpp_cam->moveU(delta_mov.first, ignore_pitch);
            if(delta_mov.second)
                p_fpp_cam->moveV(delta_mov.second, ignore_pitch);
            if(delta_mov.third)
                p_fpp_cam->moveW(delta_mov.third, ignore_pitch);
            break;

        case DENG_CAMERA_TYPE_EDITOR:
            if(delta_mov.first)
                p_ed_cam->moveU(delta_mov.first, ignore_pitch);
            if(delta_mov.second)
                p_ed_cam->moveV(delta_mov.second, ignore_pitch);
            if(delta_mov.third)
                p_ed_cam->moveW(delta_mov.third, ignore_pitch);
            break;

        default:
            break;
        }
    }


    /*
     * Move camera's position in world coordinate system
     */
    void Camera3D::moveCameraPOVW (
        const dengMath::vec3<deng_vec_t> &delta_mov,
        deng_bool_t ignore_pitch
    ) {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_FPP:
            if(delta_mov.first)
                p_fpp_cam->moveX(delta_mov.first, ignore_pitch);
            if(delta_mov.second)
                p_fpp_cam->moveY(delta_mov.second, ignore_pitch);
            if(delta_mov.third)
                p_fpp_cam->moveZ(delta_mov.third, ignore_pitch);
            break;

        case DENG_CAMERA_TYPE_EDITOR:
            if(delta_mov.first)
                p_ed_cam->moveX(delta_mov.first, ignore_pitch);
            if(delta_mov.second)
                p_ed_cam->moveY(delta_mov.second, ignore_pitch);
            if(delta_mov.third)
                p_ed_cam->moveZ(delta_mov.third, ignore_pitch);
            break;

        default:
            break;
        }
    }


    /*
     * Rotate camera's position by rot in camera's coordinate system
     */
    void Camera3D::rotCameraPOVC(const dengMath::vec2<deng_vec_t> &rot) {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_EDITOR:
            p_ed_cam->rotU(rot.first);
            p_ed_cam->rotV(rot.second);
            break;

        case DENG_CAMERA_TYPE_FPP:
            p_fpp_cam->rotU(rot.first);
            p_fpp_cam->rotV(rot.second);
            break;

        default:
            break;
        }
    }


    /*
     * Rotate camera's position by rot in world's coordinate system
     */
    void Camera3D::rotCameraPOVW(const dengMath::vec2<deng_vec_t> &rot) {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_EDITOR:
            p_ed_cam->rotX(rot.first);
            p_ed_cam->rotY(rot.second);
            break;

        case DENG_CAMERA_TYPE_FPP:
            p_fpp_cam->rotX(rot.first);
            p_fpp_cam->rotY(rot.second);
            break;

        default:
            break;
        }
    }


    /*
     * Main camera system update method
     */
    void Camera3D::update() {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_EDITOR:
            p_ed_cam->update();
            break;

        case DENG_CAMERA_TYPE_FPP:
            p_fpp_cam->update();
            break;

        default:
            break;
        }
    }


    /*
     * Get the camera type of the current camera instance
     */
    deng_CameraType Camera3D::getType() {
        return m_cam_type;
    }


    /*
     * Get the dot product of camera's view and projection matrix
     */
    dengMath::mat4<deng_vec_t> Camera3D::getCameraMat() {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_EDITOR:
            return p_ed_cam->getCamMat() * p_ed_cam->getProjMat();

        case DENG_CAMERA_TYPE_FPP:
            return p_fpp_cam->getCamMat() * p_fpp_cam->getProjMat();

        default:
            return dengMath::mat4<deng_vec_t>();
        }
    }


    /*
     * Get the bare camera view matrix
     */
    dengMath::mat4<deng_vec_t> Camera3D::getViewMat() {
        switch(m_cam_type)
        {
        case DENG_CAMERA_TYPE_EDITOR:
            return p_ed_cam->getCamMat();

        case DENG_CAMERA_TYPE_FPP:
            return p_fpp_cam->getCamMat();

        default:
            return dengMath::mat4<deng_vec_t>();
        }
    }


    /*
     * Returns true if camera has perspective view
     */
    deng_bool_t Camera3D::isPerspective() { return true; }
}
