/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 * ----------------------------------------------------------------
 *  Name: offset_finder - asset and gui data offset finder  
 *  Purpose: Provide a base class for calculating asset and gui offsets
 *  Author: Karl-Mihkel Ott
 */ 


#define __OFFSET_FINDER_CPP
#include <deng/cross_api/offset_finder.h>


namespace deng {

    __OffsetFinder::__OffsetFinder(std::vector<deng_Id> &assets, __GlobalRegistry &reg) : 
        m_assets(assets), m_reg(reg) {}


    /// Find offsets for the current asset
    void __OffsetFinder::__findAssetOffsets(das_Asset &asset) {
        // In each case increment the buffer size and find correct and vertices and 
        // indices' offsets
        switch (asset.asset_mode) {
        case DAS_ASSET_MODE_2D_UNMAPPED:
            // Set all vertices' offsets and the vertices that are not available mark as
            // UINT64_MAX
            asset.offsets.pos_offset = m_buf_sec_info.asset_size;
            asset.offsets.tex_offset = UINT64_MAX;
            asset.offsets.nor_offset = UINT64_MAX;

            m_buf_sec_info.asset_size += asset.vertices.v2d.pn * 
                sizeof(das_ObjPosData2D);

            /// Round the asset size to 
            m_buf_sec_info.asset_size += ZERO_MOD_CEIL_REM(m_buf_sec_info.asset_size, sizeof(deng_idx_t));
            asset.offsets.ind_offset = m_buf_sec_info.asset_size;
            m_buf_sec_info.asset_size += asset.indices.n * sizeof(deng_ui32_t);
            break;
        
        case DAS_ASSET_MODE_2D_TEXTURE_MAPPED:
            // Set all vertices' offsets and the vertices that are not available mark as
            // UINT64_MAX
            asset.offsets.pos_offset = m_buf_sec_info.asset_size;
            asset.offsets.tex_offset = m_buf_sec_info.asset_size +
                asset.vertices.v2d.pn * sizeof(das_ObjPosData2D);
            asset.offsets.nor_offset = UINT64_MAX;

            m_buf_sec_info.asset_size += asset.vertices.v2d.pn * sizeof(das_ObjPosData2D) + 
                asset.vertices.v2d.tn * sizeof(das_ObjTextureData);

            m_buf_sec_info.asset_size += ZERO_MOD_CEIL_REM(m_buf_sec_info.asset_size, sizeof(deng_idx_t));
            asset.offsets.ind_offset = m_buf_sec_info.asset_size;
            m_buf_sec_info.asset_size += 2 * asset.indices.n * sizeof(deng_ui32_t);
            break;

        case DAS_ASSET_MODE_3D_UNMAPPED:
            // Set all vertices' offsets and the vertices that are not available mark as
            // UINT64_MAX
            asset.offsets.pos_offset = m_buf_sec_info.asset_size;
            asset.offsets.tex_offset = UINT64_MAX;
            asset.offsets.nor_offset = m_buf_sec_info.asset_size + 
                asset.vertices.v3d.pn * sizeof(das_ObjPosData);

            m_buf_sec_info.asset_size += asset.vertices.v3d.pn * sizeof(das_ObjPosData) +
            asset.vertices.v3d.nn * sizeof(das_ObjNormalData);

            m_buf_sec_info.asset_size += ZERO_MOD_CEIL_REM(m_buf_sec_info.asset_size, sizeof(deng_idx_t));
            asset.offsets.ind_offset = m_buf_sec_info.asset_size;
            m_buf_sec_info.asset_size += 2 * asset.indices.n * sizeof(deng_ui32_t);
            break;

        case DAS_ASSET_MODE_3D_TEXTURE_MAPPED:
            asset.offsets.pos_offset = m_buf_sec_info.asset_size;
            asset.offsets.tex_offset = m_buf_sec_info.asset_size +
                asset.vertices.v3d.pn * sizeof(das_ObjPosData);
            asset.offsets.nor_offset = m_buf_sec_info.asset_size +
                asset.vertices.v3d.pn * sizeof(das_ObjPosData) + 
                asset.vertices.v3d.tn * sizeof(das_ObjTextureData);

            m_buf_sec_info.asset_size += asset.vertices.v3d.pn * sizeof(das_ObjPosData) +
                asset.vertices.v3d.tn * sizeof(das_ObjTextureData) + 
                asset.vertices.v3d.nn * sizeof(das_ObjNormalData);

            m_buf_sec_info.asset_size += ZERO_MOD_CEIL_REM(m_buf_sec_info.asset_size, sizeof(deng_idx_t));
            asset.offsets.ind_offset = m_buf_sec_info.asset_size;
            m_buf_sec_info.asset_size += 3 * asset.indices.n * sizeof(deng_ui32_t);
            break;
        
        default:
            RUN_ERR("deng::vulkan::__vk_ResourceManager::mkBuffers()", 
                "Invalid asset vertices format for asset " + std::string(asset.uuid));
            break;
        }
    }

    /// Find offsets for all ImGui entities 
    void __OffsetFinder::__findGuiEntitiesOffsets() {
        // For each command data vector element, calculate its offset from the beginning of the ui memory area
        for(size_t i = 0; i < m_p_imgui_data->cmd_data.size(); i++) {
            m_p_imgui_data->cmd_data[i].offset = m_buf_sec_info.ui_size;
            m_buf_sec_info.ui_size += m_p_imgui_data->cmd_data[i].vert_c * sizeof(ImDrawVert);
            m_buf_sec_info.ui_size += ZERO_MOD_CEIL_REM(m_buf_sec_info.ui_size, sizeof(ImDrawIdx));
            m_buf_sec_info.ui_size += m_p_imgui_data->cmd_data[i].ind_c * sizeof(ImDrawIdx);
        }
    }
    

    /// Find the largest asset size
    deng_ui64_t __OffsetFinder::__findMaxAssetSize(const dengMath::vec2<deng_ui32_t> &bounds) {
        VkDeviceSize max_size = 0;
        VkDeviceSize cur_size = 0;

        // For each asset in bounds check the size and find the largest one
        for(size_t i = bounds.first; i < bounds.second; i++) {
            // Retrieve assets from the registry
            RegType &reg_asset = m_reg.retrieve(m_assets[i], DENG_SUPPORTED_REG_TYPE_ASSET, NULL);

            // Check how much memory the asset consumes by checking their mode, which
            // they used to allocate memory for the vertex buffer
            switch(reg_asset.asset.asset_mode) {
            case DAS_ASSET_MODE_2D_UNMAPPED:
                cur_size = reg_asset.asset.vertices.v2d.pn * sizeof(das_ObjPosData);
                cur_size += ZERO_MOD_CEIL_REM(cur_size, sizeof(deng_idx_t));
                cur_size += reg_asset.asset.indices.n * sizeof(deng_idx_t);
                break;

            case DAS_ASSET_MODE_2D_TEXTURE_MAPPED:
                cur_size = reg_asset.asset.vertices.v2d.pn * sizeof(das_ObjPosData) +
                    reg_asset.asset.vertices.v2d.tn * sizeof(das_ObjTextureData);
                cur_size += ZERO_MOD_CEIL_REM(cur_size, sizeof(deng_idx_t));
                cur_size += 2 * reg_asset.asset.indices.n * sizeof(deng_idx_t);
                break;

            case DAS_ASSET_MODE_3D_UNMAPPED:
                cur_size = reg_asset.asset.vertices.v3d.pn * sizeof(das_ObjPosData) +
                    reg_asset.asset.vertices.v3d.nn * sizeof(das_ObjNormalData);
                cur_size += ZERO_MOD_CEIL_REM(cur_size, sizeof(deng_idx_t));
                cur_size += 2 * reg_asset.asset.indices.n * sizeof(deng_idx_t);
                break;

            case DAS_ASSET_MODE_3D_TEXTURE_MAPPED:
                cur_size = reg_asset.asset.vertices.v3d.pn * sizeof(das_ObjPosData) +
                    reg_asset.asset.vertices.v3d.tn * sizeof(das_ObjTextureData) +
                    reg_asset.asset.vertices.v3d.nn * sizeof(das_ObjNormalData);
                cur_size += ZERO_MOD_CEIL_REM(cur_size, sizeof(deng_idx_t));
                cur_size += 3 * reg_asset.asset.indices.n * sizeof(deng_idx_t);
                break;

            default:
                break;
            }

            // Perform maximum required memory check for the asset
            if(cur_size > max_size)
                max_size = cur_size;
        }

        return max_size;
    }


    
    void __OffsetFinder::setUIData(__ImGuiData *p_gui) { m_p_imgui_data = p_gui; }
    const BufferSectionInfo &__OffsetFinder::getSectionInfo() { return m_buf_sec_info; }
}
