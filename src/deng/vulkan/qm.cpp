/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __QM_CPP
#include <deng/vulkan/qm.h>

namespace deng {
    namespace vulkan {
        /******************************/
        /******** __vk_QueueManager ********/
        /******************************/

        /*
         * Search for queue family that supports graphics queues
         * This method checks for all queue families available on given physical 
         * device and searches for one that supports graphics queues.
         */
        deng_bool_t __vk_QueueManager::findGraphicsFamily(const VkPhysicalDevice &gpu) {
            deng_ui32_t index;
            // Get the total count of queue families
            deng_ui32_t family_count = 0;
            vkGetPhysicalDeviceQueueFamilyProperties (
                gpu, 
                &family_count, 
                nullptr
            );
            
            // Get properties of all queue families
            std::vector<VkQueueFamilyProperties> queue_family_properties(family_count);
            vkGetPhysicalDeviceQueueFamilyProperties (
                gpu, 
                &family_count, 
                queue_family_properties.data()
            );

            // Check which family is graphics family
            for(index = 0; index < family_count; index++) {
                if(queue_family_properties[index].queueFlags & VK_QUEUE_GRAPHICS_BIT) {
                    m_graphics_family_index = index;
                    return true;
                }
            }

            return false;
        }


        /*
         * Search for queue family that supports present queues
         * This method checks for all queue families available on given physical 
         * device and searches for one that supports present queues
         */
        deng_bool_t __vk_QueueManager::findPresentSupportFamily (
            const VkPhysicalDevice &gpu, 
            const VkSurfaceKHR &surface
        ) {
            deng_ui32_t index;
            // Get the total count of queue families
            deng_ui32_t family_count = 0;
            VkBool32 support = false;
            vkGetPhysicalDeviceQueueFamilyProperties (
                gpu, 
                &family_count, 
                nullptr
            );
            
            // Get properties of all queue families
            std::vector<VkQueueFamilyProperties> family_properties(family_count);
            vkGetPhysicalDeviceQueueFamilyProperties (
                gpu, 
                &family_count, 
                family_properties.data()
            );

            for(index = 0; index < family_count; index++) {
                vkGetPhysicalDeviceSurfaceSupportKHR (
                    gpu, 
                    index, 
                    surface, 
                    &support
                );

                if(support && m_graphics_family_index != index) {
                    m_present_family_index = index; 
                    return true;
                }
            }
            return false;
        }


        /* Graphics queuefamily getter method */
        deng_ui32_t __vk_QueueManager::getGraphicsQFIndex() { return m_graphics_family_index; }
        /* Present queue family getter method */
        deng_ui32_t __vk_QueueManager::getPresentQFIndex() { return m_present_family_index; }
    }
}
