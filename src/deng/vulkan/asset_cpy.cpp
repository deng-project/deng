/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __ASSET_CPY_CPP
#include <deng/vulkan/asset_cpy.h>


namespace deng {
    namespace vulkan {

        void __AssetCpy::cpyToBuffer(VkDevice device, das_Asset &asset, VkDeviceMemory mem) {
            // Check for the correct method to call based on the asset mode
            switch(asset.asset_mode) {
            case DAS_ASSET_MODE_2D_UNMAPPED:
                __cpyVu2D(device, asset, mem);
                break;

            case DAS_ASSET_MODE_2D_TEXTURE_MAPPED:
                __cpyVm2D(device, asset, mem);
                break;

            case DAS_ASSET_MODE_3D_UNMAPPED:
                __cpyVu3D(device, asset, mem);
                break;
            
            case DAS_ASSET_MODE_3D_TEXTURE_MAPPED:
                __cpyVm3D(device, asset, mem);
                break;
            
            default:
                break;
            }
        }


        void __AssetCpy::bufCpyVertBuffer(VkDevice device, VkCommandPool cmd_pool, das_Asset &asset, 
            VkBuffer src_buf, VkBuffer dst_buf, VkQueue g_queue) {
            // Check for the correct bufCpy method to call based on the asset mode
            switch(asset.asset_mode) {
            case DAS_ASSET_MODE_2D_UNMAPPED:
                __bufCpyVu2DToVertBuffer(device, cmd_pool, asset, src_buf, dst_buf, g_queue);
                break;

            case DAS_ASSET_MODE_2D_TEXTURE_MAPPED:
                __bufCpyVm2DToVertBuffer(device, cmd_pool, asset, src_buf, dst_buf, g_queue);
                break;

            case DAS_ASSET_MODE_3D_UNMAPPED:
                __bufCpyVu3DToVertBuffer(device, cmd_pool, asset, src_buf, dst_buf, g_queue);
                break;

            case DAS_ASSET_MODE_3D_TEXTURE_MAPPED:
                __bufCpyVm3DToVertBuffer(device, cmd_pool, asset, src_buf, dst_buf, g_queue);
                break;

            default:
                break;
            }
        }


        /************************************/
        /* Vertex to buffer copying methods */
        /************************************/
        void __AssetCpy::__cpyVu2D(VkDevice device, das_Asset &asset, VkDeviceMemory mem) {
            // Copy position vertices
            __vk_BufferCreator::cpyToBufferMem (
                device, 
                asset.vertices.v2d.pn * sizeof(das_ObjPosData2D),
                asset.vertices.v2d.pos,
                mem,
                asset.offsets.pos_offset
            );

            // Copy indices
            __vk_BufferCreator::cpyToBufferMem (
                device,
                asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.pos,
                mem,
                asset.offsets.ind_offset
            );
        }


        void __AssetCpy::__cpyVm2D(VkDevice device, das_Asset &asset, VkDeviceMemory mem) {
            // Copy position vertices
            __vk_BufferCreator::cpyToBufferMem(device, asset.vertices.v2d.pn * sizeof(das_ObjPosData2D),
                asset.vertices.v2d.pos, mem, asset.offsets.pos_offset);

            // Copy texture vertices
            __vk_BufferCreator::cpyToBufferMem(device, asset.vertices.v2d.tn * sizeof(das_ObjTextureData),
                asset.vertices.v2d.tex, mem, asset.offsets.tex_offset);

            // Copy position indices
            __vk_BufferCreator::cpyToBufferMem(device, asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.pos, mem, asset.offsets.ind_offset); 

            // Copy texture indices
            __vk_BufferCreator::cpyToBufferMem(device, asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.tex, mem, asset.offsets.ind_offset + asset.indices.n * sizeof(deng_ui32_t));
        }


        void __AssetCpy::__cpyVu3D(VkDevice device, das_Asset &asset, VkDeviceMemory mem) {
            // Copy position vertices
            __vk_BufferCreator::cpyToBufferMem (
                device, 
                asset.vertices.v3d.pn * sizeof(das_ObjPosData),
                asset.vertices.v3d.pos, 
                mem, 
                asset.offsets.pos_offset
            );

            // Copy vertex normals
            __vk_BufferCreator::cpyToBufferMem (
                device, 
                asset.vertices.v3d.nn * sizeof(das_ObjNormalData),
                asset.vertices.v3d.norm, 
                mem, 
                asset.offsets.nor_offset
            );

            // Copy position indices
            __vk_BufferCreator::cpyToBufferMem (
                device,
                asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.pos,
                mem,
                asset.offsets.ind_offset
            );

            // Copy vertex normal indices
            __vk_BufferCreator::cpyToBufferMem (
                device,
                asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.norm,
                mem,
                asset.offsets.ind_offset + asset.indices.n * sizeof(deng_ui32_t)
            );
        }


        void __AssetCpy::__cpyVm3D(VkDevice device, das_Asset &asset, VkDeviceMemory mem) {
            // Copy position vertices
            __vk_BufferCreator::cpyToBufferMem(device, asset.vertices.v3d.pn * sizeof(das_ObjPosData),
                asset.vertices.v3d.pos, mem, asset.offsets.pos_offset);

            // Copy texture vertices
            __vk_BufferCreator::cpyToBufferMem(device, asset.vertices.v3d.tn * sizeof(das_ObjTextureData),
                asset.vertices.v3d.tex, mem, asset.offsets.tex_offset); 

            // Copy vertex normals
            __vk_BufferCreator::cpyToBufferMem(device, asset.vertices.v3d.nn * sizeof(das_ObjNormalData),
                asset.vertices.v3d.norm, mem, asset.offsets.nor_offset);

            // Copy position indices
            __vk_BufferCreator::cpyToBufferMem(device, asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.pos, mem, asset.offsets.ind_offset);

            // Copy texture vertex indices
            __vk_BufferCreator::cpyToBufferMem(device, asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.tex, mem, asset.offsets.ind_offset + asset.indices.n * sizeof(deng_ui32_t));

            // Copy vertex normal indices
            __vk_BufferCreator::cpyToBufferMem(device, asset.indices.n * sizeof(deng_ui32_t),
                asset.indices.norm, mem, asset.offsets.ind_offset + 2 * asset.indices.n * sizeof(deng_ui32_t));
        }


        /***********************************************************/
        /* Single asset data buffer to main buffer copying methods */
        /***********************************************************/
        void __AssetCpy::__bufCpyVu2DToVertBuffer (
            VkDevice device, 
            VkCommandPool cmd_pool, 
            das_Asset &asset,
            VkBuffer src_buf, 
            VkBuffer dst_buf, 
            VkQueue g_queue
        ) {
            // Copy position vertices
            __vk_BufferCreator::cpyBufferToBuffer (
                device,
                cmd_pool,
                g_queue,
                src_buf,
                dst_buf,
                asset.vertices.v2d.pn * sizeof(das_ObjPosData2D),
                0,
                asset.offsets.pos_offset
            );
        }


        void __AssetCpy::__bufCpyVm2DToVertBuffer (
            VkDevice device, 
            VkCommandPool cmd_pool, 
            das_Asset &asset,
            VkBuffer src_buf, 
            VkBuffer dst_buf, 
            VkQueue g_queue
        ) {
            // Copy position vertices and texture vertices
            __vk_BufferCreator::cpyBufferToBuffer (
                device,
                cmd_pool,
                g_queue,
                src_buf,
                dst_buf,
                asset.vertices.v2d.pn * sizeof(das_ObjPosData2D) + 
                asset.vertices.v2d.tn * sizeof(das_ObjTextureData),
                0,
                asset.offsets.pos_offset
            );
        }


        void __AssetCpy::__bufCpyVu3DToVertBuffer (
            VkDevice device, 
            VkCommandPool cmd_pool, 
            das_Asset &asset,
            VkBuffer src_buf, 
            VkBuffer dst_buf, 
            VkQueue g_queue
        ) {
            // Copy position vertices and vertex normals
            __vk_BufferCreator::cpyBufferToBuffer (
                device,
                cmd_pool,
                g_queue,
                src_buf,
                dst_buf,
                asset.vertices.v3d.pn * sizeof(das_ObjPosData) + 
                asset.vertices.v3d.nn * sizeof(das_ObjNormalData),
                0,
                asset.offsets.pos_offset
            );
        }

        
        void __AssetCpy::__bufCpyVm3DToVertBuffer (
            VkDevice device,
            VkCommandPool cmd_pool,
            das_Asset &asset,
            VkBuffer src_buf,
            VkBuffer dst_buf,
            VkQueue g_queue
        ) {
            // Copy position vertices, texture vertices and vertex normals
            __vk_BufferCreator::cpyBufferToBuffer (
                device,
                cmd_pool,
                g_queue,
                src_buf,
                dst_buf,
                asset.vertices.v3d.pn * sizeof(das_ObjPosData) +
                asset.vertices.v3d.tn * sizeof(das_ObjTextureData) +
                asset.vertices.v3d.nn * sizeof(das_ObjNormalData),
                0,
                asset.offsets.pos_offset
            );
        }
    }
}
