/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 */ 


#define __OPENGL_SANDBOX_CPP
#include <../src/sandbox/opengl/opengl_sandbox.h>


namespace deng {

    OpenGLApplication::OpenGLApplication() : 
        m_win(1280, 720, DENG_RENDERER_HINT_API_OPENGL, "OpenGL sample"),
        m_cam(DENG_CAMERA_TYPE_EDITOR, dengMath::Conversion::degToRad(65.0), dengMath::vec2<deng_vec_t>{0.1f, -25.0f}, 
            dengMath::vec3<deng_vec_t>{0.7f, 0.7f, 0.7f}, dengMath::vec2<deng_f64_t>{0.3, 0.3}, false, &m_win) {

        // Check the current camera type and create input bindings accordingly
        switch(m_cam.getType()) {
        case DENG_CAMERA_TYPE_FPP:
            __bindFPP();
            break;

        case DENG_CAMERA_TYPE_EDITOR:
            __bindEditor();
            break;

        default:
            break;
        }

        // Set config variables
        m_cfg.background = dengMath::vec4<deng_vec_t>{0.0f, 0.0f, 0.0f, 1.0f};
        m_cfg.p_cam = &m_cam;
        m_cfg.p_win = &m_win;
        
        m_rend = std::make_unique<opengl::__gl_Renderer>(m_cfg, m_reg, m_assets, m_textures);

        // Load asset and texture files
        RegType reg_tex = {};
        das_LoadTexture(&reg_tex.tex, "textures/viking_room.tga");

        RegType reg_asset = {};
        das_LoadAsset(&reg_asset.asset, DAS_ASSET_MODE_UNDEFINED, das_ObjColorData{0.2f, 0.7f, 0.0f, 1.0f}, false, 
            reg_tex.tex.uuid, "assets/viking.das");
        reg_asset.asset.force_unmap = false;

        m_reg.push(reg_asset.asset.uuid, DENG_SUPPORTED_REG_TYPE_ASSET, reg_asset);
        m_reg.push(reg_tex.tex.uuid, DENG_SUPPORTED_REG_TYPE_TEXTURE, reg_tex);
        m_assets.push_back(reg_asset.asset.uuid);
        m_textures.push_back(reg_tex.tex.uuid);

        // Prepare texture for usage
        m_rend->prepareAssets(dengMath::vec2<deng_ui32_t>{0, static_cast<deng_ui32_t>(m_assets.size())});
        m_rend->prepareTexture(reg_tex.tex.uuid);
    }


    void OpenGLApplication::__bindFPP() {
        deng::Camera3DBindings bindings = {};
        bindings.mov_u = deng_CreateInputMask(1, DENG_KEY_D);
        bindings.mov_nu = deng_CreateInputMask(1, DENG_KEY_A);
        bindings.mov_v = deng_CreateInputMask(1, DENG_KEY_SPACE);
        bindings.mov_nv = deng_CreateInputMask(1, DENG_KEY_LEFT_CTRL);
        bindings.mov_w = deng_CreateInputMask(1, DENG_KEY_S);
        bindings.mov_nw = deng_CreateInputMask(1, DENG_KEY_W);

        bindings.rot_u = deng_CreateInputMask(1, DENG_MOUSE_DELTA_NY);
        bindings.rot_nu = deng_CreateInputMask(1, DENG_MOUSE_DELTA_Y);
        bindings.rot_v = deng_CreateInputMask(1, DENG_MOUSE_DELTA_NX);
        bindings.rot_nv = deng_CreateInputMask(1, DENG_MOUSE_DELTA_X);
        bindings.ch_vcp = deng_CreateInputMask(1, DENG_KEY_ESCAPE);
        m_cam.setBindings(bindings);
    }


    void OpenGLApplication::__bindEditor() {
        deng::Camera3DBindings bindings;
        bindings.mov_w = deng_CreateInputMask(1, DENG_MOUSE_SCROLL_UP);
        bindings.mov_nw = deng_CreateInputMask(1, DENG_MOUSE_SCROLL_DOWN);
        bindings.ch_vcp = deng_CreateInputMask(1, DENG_MOUSE_BTN_2);

        m_cam.setBindings(bindings);
    }


    void OpenGLApplication::run() {
        while(deng_IsRunning()) {
            m_win.update();
            m_cam.update();
            m_rend->makeFrame();
        }
    }
}


int main() {
    deng::OpenGLApplication app;
    app.run();
    return 0;
}
