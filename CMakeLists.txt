#    ____         ________     __      _        ______  
#   |  _ \_      |  ______|   |  \    | |     _/  ____\
#   | | \_ \_    |  |         |   \   | |    /  _/   
#   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
#   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
#   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
#   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
#   |____/       |________|   |_|    \__|       \____/
#               
# __________________________________________________________
# __________________________________________________________
#                       Project DENG 
#
#
# Copyright (C) 2020 - 2021
# This Software is licensed under Apache License as described 
# in the LICENSE.md file, which you should have recieved with 
# this distribution.
# 
# You may reproduce and distribute copies of the
# Work or Derivative Works thereof in any medium, with or without
# modifications, and in Source or Object form, provided that You
# meet the following conditions:
#
# (a) You must give any other recipients of the Work or
#     Derivative Works a copy of this License and
#
# (b) You must cause any modified files to carry prominent notices
#     stating that You changed the files and
#
# (c) You must retain, in the Source form of any Derivative Works
#     that You distribute, all copyright, patent, trademark, and
#     attribution notices from the Source form of the Work,
#     excluding those notices that do not pertain to any part of
#     the Derivative Works and
#
# (d) If the Work includes a "NOTICE" text file as part of its
#     distribution, then any Derivative Works that You distribute must
#     include a readable copy of the attribution notices contained
#     within such NOTICE file, excluding those notices that do not
#     pertain to any part of the Derivative Works, in at least one
#     of the following places: within a NOTICE text file distributed
#     as part of the Derivative Works within the Source form or
#     documentation, if provided along with the Derivative Works or,
#     within a display generated by the Derivative Works, if and
#     wherever such third-party notices normally appear. The contents
#     of the NOTICE file are for informational purposes only and
#     do not modify the License. You may add Your own attribution
#     notices within Derivative Works that You distribute, alongside
#     or as an addendum to the NOTICE text from the Work, provided
#     that such additional attribution notices cannot be construed
#     as modifying the License.
#
# You may add Your own copyright statement to Your modifications and
# may provide additional or different license terms and conditions
# for use, reproduction, or distribution of Your modifications, or
# for any such Derivative Works as a whole, provided Your use,
# reproduction, and distribution of the Work otherwise complies with
# the conditions stated in this License.


################## CMAKE MAIN FLAGS ###################
# These flags specify which targets are going to be built
# In order to build all targets set only BUILD_ALL flag
# BUILD_DAM - Build DENG asset manager (dam)
# BUILD_FREETYPE - Build freetype library from source used as in a git submodule 
# BUILD_LIBDENG - Build libdeng library
# BUILD_SANDBOX - Build sandbox application
# BUILD_ALL - Build all targets



################## CMAKE TESTING FLAGS #####################
# These flags are to be used separatelly from main build flags
# Test flags enable to build some feature testing code
# TEST_VULKAN - Build Vulkan renderer testing program
# TEST_DAS - Build program that tests reading from das file and 
# compares it with the data read from the obj file


############# PLATFORM SPECIFIC FLAGS ############
# The purpose of these flags is to set some platform specific values
# that may be needed
# VULKAN_SDK_PATH - This flag must be set to the valid path of the VulkanSDK installation (Windows only)


cmake_minimum_required(VERSION 3.10)

project(deng CXX C)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_POSITION_INDEPENDENT_CODE True)


# Find the correct library extensions
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(STATIC_LIB_EXT ".a")
    set(DYNAMIC_LIB_EXT ".so")
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(STATIC_LIB_EXT ".lib")
    set(DYNAMIC_LIB_EXT ".dll")
endif()


include(cmake/freetype.cmake)
include(cmake/vulkan.cmake)
include(cmake/deng.cmake)
include(cmake/sandbox.cmake)
include(cmake/dam.cmake)


# Build target list checking
if(BUILD_ALL OR BUILD_SANDBOX OR BUILD_LIBDENG)
    CheckFreetype()
    CheckVulkan()
    BuildLibdeng()
    
    if(BUILD_SANDBOX OR BUILD_ALL)
        BuildSandbox()
    endif()
endif()

if(BUILD_DAM OR BUILD_ALL)
    BuildDAM()
endif()


# Check for any test builds
if(TEST_VULKAN)
    include(tests/cmake/vulkan.cmake)
endif()
if(TEST_DAS)
    include(tests/cmake/das.cmake)
endif()
