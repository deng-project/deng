!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(BUILD_DIR)/obj/dam/common.c.o	Makefile	/^$(BUILD_DIR)\/obj\/dam\/common.c.o: $(SRC_DIR)\/common\/common.c$/;"	t
$(BUILD_DIR)/obj/dam/dam.c.o	Makefile	/^$(BUILD_DIR)\/obj\/dam\/dam.c.o: $(SRC_DIR)\/das\/dam.c$/;"	t
$(BUILD_DIR)/obj/dam/das_handler.c.o	Makefile	/^$(BUILD_DIR)\/obj\/dam\/das_handler.c.o: $(SRC_DIR)\/das\/das_handler.c$/;"	t
$(BUILD_DIR)/obj/dam/data_loader.c.o	Makefile	/^$(BUILD_DIR)\/obj\/dam\/data_loader.c.o: $(SRC_DIR)\/das\/data_loader.c$/;"	t
$(BUILD_DIR)/obj/dam/hashmap.c.o	Makefile	/^$(BUILD_DIR)\/obj\/dam\/hashmap.c.o: $(SRC_DIR)\/common\/hashmap.c$/;"	t
$(BUILD_DIR)/obj/libdeng/camera.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/camera.cpp.o: $(SRC_DIR)\/deng\/camera.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/common.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/common.c.o: $(SRC_DIR)\/common\/common.c$/;"	t
$(BUILD_DIR)/obj/libdeng/das_handler.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/das_handler.c.o: $(SRC_DIR)\/das\/das_handler.c$/;"	t
$(BUILD_DIR)/obj/libdeng/data_loader.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/data_loader.c.o: $(SRC_DIR)\/das\/data_loader.c$/;"	t
$(BUILD_DIR)/obj/libdeng/deng_math.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/deng_math.cpp.o: $(SRC_DIR)\/deng\/deng_math.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/dengui_events.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/dengui_events.cpp.o: $(SRC_DIR)\/dengui\/dengui_events.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/dengui_window.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/dengui_window.cpp.o: $(SRC_DIR)\/dengui\/dengui_window.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/events.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/events.cpp.o: $(SRC_DIR)\/deng\/events.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/font.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/font.cpp.o: $(SRC_DIR)\/utils\/font.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/hashmap.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/hashmap.c.o: $(SRC_DIR)\/common\/hashmap.c$/;"	t
$(BUILD_DIR)/obj/libdeng/key_translation.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/key_translation.c.o: $(SRC_DIR)\/deng\/key_translation.c$/;"	t
$(BUILD_DIR)/obj/libdeng/key_vector.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/key_vector.c.o: $(SRC_DIR)\/deng\/key_vector.c$/;"	t
$(BUILD_DIR)/obj/libdeng/map_editor_ui.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/map_editor_ui.cpp.o: $(SRC_DIR)\/dengui\/map_editor_ui.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/rend_helpers.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/rend_helpers.cpp.o: $(SRC_DIR)\/deng\/rend_helpers.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/renderer.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/renderer.cpp.o: $(SRC_DIR)\/deng\/renderer.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/shapes.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/shapes.cpp.o: $(SRC_DIR)\/utils\/shapes.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/timer.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/timer.cpp.o: $(SRC_DIR)\/utils\/timer.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/vulkan_handler.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/vulkan_handler.c.o: $(SRC_DIR)\/deng\/vulkan_handler.c$/;"	t
$(BUILD_DIR)/obj/libdeng/window.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/window.cpp.o: $(SRC_DIR)\/deng\/window.cpp$/;"	t
$(BUILD_DIR)/obj/libdeng/x11_surface.c.o	Makefile	/^$(BUILD_DIR)\/obj\/libdeng\/x11_surface.c.o: $(SRC_DIR)\/deng\/x11_surface.c$/;"	t
$(BUILD_DIR)/obj/sandboxapp/sandbox_3d.cpp.o	Makefile	/^$(BUILD_DIR)\/obj\/sandboxapp\/sandbox_3d.cpp.o: $(SRC_DIR)\/main\/sandbox_3d.cpp$/;"	t
$(DAM_TARGET)	Makefile	/^$(DAM_TARGET): .init $(DAM_OBJ) $(LIBDENG_TARGET)$/;"	t
$(LIBDENG_TARGET)	Makefile	/^$(LIBDENG_TARGET): .init $(LIBDENG_OBJ)$/;"	t
$(SANDBOXAPP_TARGET)	Makefile	/^$(SANDBOXAPP_TARGET): .init $(SANDBOXAPP_OBJ) $(LIBDENG_TARGET)$/;"	t
$(TARGET)	src/das/Makefile	/^$(TARGET): $(OBJ)$/;"	t
.cpy	Makefile	/^.cpy: .init$/;"	t
.init	Makefile	/^.init:$/;"	t
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:0.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:1.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:10.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:11.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:12.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:2.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:3.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:4.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:5.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:6.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:7.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:8.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-g++",$/;"	s	array:9.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:13.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:14.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:15.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:16.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:17.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:18.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:19.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:20.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:21.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:22.arguments
0	compile_commands.json	/^      "\/usr\/x86_64-pc-linux-gnu\/gcc-bin\/9.3.0\/x86_64-pc-linux-gnu-gcc",$/;"	s	array:23.arguments
0	compile_commands.json	/^  {$/;"	o
1	compile_commands.json	/^      "-c",$/;"	s	array:0.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:1.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:10.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:11.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:12.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:13.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:14.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:15.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:16.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:17.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:18.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:19.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:2.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:20.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:21.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:22.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:23.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:3.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:4.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:5.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:6.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:7.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:8.arguments
1	compile_commands.json	/^      "-c",$/;"	s	array:9.arguments
1	compile_commands.json	/^  {$/;"	o
10	compile_commands.json	/^      "-I",$/;"	s	array:0.arguments
10	compile_commands.json	/^      "-I",$/;"	s	array:13.arguments
10	compile_commands.json	/^      "-I",$/;"	s	array:14.arguments
10	compile_commands.json	/^      "-I",$/;"	s	array:15.arguments
10	compile_commands.json	/^      "-I",$/;"	s	array:16.arguments
10	compile_commands.json	/^      "-I",$/;"	s	array:17.arguments
10	compile_commands.json	/^      "-I",$/;"	s	array:18.arguments
10	compile_commands.json	/^      "-I",$/;"	s	array:19.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:1.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:10.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:11.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:12.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:2.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:3.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:4.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:5.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:6.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:7.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:8.arguments
10	compile_commands.json	/^      "-g",$/;"	s	array:9.arguments
10	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:20.arguments
10	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:21.arguments
10	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:22.arguments
10	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:23.arguments
10	compile_commands.json	/^  {$/;"	o
11	compile_commands.json	/^      "-I",$/;"	s	array:1.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:10.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:11.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:12.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:2.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:20.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:21.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:22.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:23.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:3.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:4.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:5.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:6.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:7.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:8.arguments
11	compile_commands.json	/^      "-I",$/;"	s	array:9.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:0.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:13.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:14.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:15.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:16.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:17.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:18.arguments
11	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:19.arguments
11	compile_commands.json	/^  {$/;"	o
12	compile_commands.json	/^      "-I",$/;"	s	array:0.arguments
12	compile_commands.json	/^      "-I",$/;"	s	array:13.arguments
12	compile_commands.json	/^      "-I",$/;"	s	array:14.arguments
12	compile_commands.json	/^      "-I",$/;"	s	array:15.arguments
12	compile_commands.json	/^      "-I",$/;"	s	array:16.arguments
12	compile_commands.json	/^      "-I",$/;"	s	array:17.arguments
12	compile_commands.json	/^      "-I",$/;"	s	array:18.arguments
12	compile_commands.json	/^      "-I",$/;"	s	array:19.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:1.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:10.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:11.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:12.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:2.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:3.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:4.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:5.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:6.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:7.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:8.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2",$/;"	s	array:9.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:20.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:21.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:22.arguments
12	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:23.arguments
12	compile_commands.json	/^  {$/;"	o
13	compile_commands.json	/^      "-I",$/;"	s	array:1.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:10.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:11.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:12.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:2.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:3.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:4.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:5.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:6.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:7.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:8.arguments
13	compile_commands.json	/^      "-I",$/;"	s	array:9.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:0.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:13.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:14.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:15.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:16.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:17.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:18.arguments
13	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:19.arguments
13	compile_commands.json	/^  {$/;"	o
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:1.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:10.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:11.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:12.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:2.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:3.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:4.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:5.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:6.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:7.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:8.arguments
14	compile_commands.json	/^      "\/usr\/include\/freetype2\/include"$/;"	s	array:9.arguments
14	compile_commands.json	/^  {$/;"	o
15	compile_commands.json	/^  {$/;"	o
16	compile_commands.json	/^  {$/;"	o
17	compile_commands.json	/^  {$/;"	o
18	compile_commands.json	/^  {$/;"	o
19	compile_commands.json	/^  {$/;"	o
2	compile_commands.json	/^      "src\/common\/common.c",$/;"	s	array:13.arguments
2	compile_commands.json	/^      "src\/common\/common.c",$/;"	s	array:23.arguments
2	compile_commands.json	/^      "src\/das\/dam.c",$/;"	s	array:20.arguments
2	compile_commands.json	/^      "src\/das\/das_handler.c",$/;"	s	array:14.arguments
2	compile_commands.json	/^      "src\/das\/das_handler.c",$/;"	s	array:21.arguments
2	compile_commands.json	/^      "src\/das\/data_loader.c",$/;"	s	array:15.arguments
2	compile_commands.json	/^      "src\/das\/data_loader.c",$/;"	s	array:22.arguments
2	compile_commands.json	/^      "src\/deng\/camera.cpp",$/;"	s	array:1.arguments
2	compile_commands.json	/^      "src\/deng\/deng_math.cpp",$/;"	s	array:5.arguments
2	compile_commands.json	/^      "src\/deng\/events.cpp",$/;"	s	array:6.arguments
2	compile_commands.json	/^      "src\/deng\/key_translation.c",$/;"	s	array:16.arguments
2	compile_commands.json	/^      "src\/deng\/key_vector.c",$/;"	s	array:17.arguments
2	compile_commands.json	/^      "src\/deng\/rend_helpers.cpp",$/;"	s	array:4.arguments
2	compile_commands.json	/^      "src\/deng\/renderer.cpp",$/;"	s	array:2.arguments
2	compile_commands.json	/^      "src\/deng\/vulkan_handler.c",$/;"	s	array:18.arguments
2	compile_commands.json	/^      "src\/deng\/window.cpp",$/;"	s	array:3.arguments
2	compile_commands.json	/^      "src\/deng\/x11_surface.c",$/;"	s	array:19.arguments
2	compile_commands.json	/^      "src\/dengui\/dengui_events.cpp",$/;"	s	array:10.arguments
2	compile_commands.json	/^      "src\/dengui\/dengui_window.cpp",$/;"	s	array:11.arguments
2	compile_commands.json	/^      "src\/dengui\/map_editor_ui.cpp",$/;"	s	array:12.arguments
2	compile_commands.json	/^      "src\/main\/sandbox.cpp",$/;"	s	array:0.arguments
2	compile_commands.json	/^      "src\/utils\/font.cpp",$/;"	s	array:7.arguments
2	compile_commands.json	/^      "src\/utils\/shapes.cpp",$/;"	s	array:9.arguments
2	compile_commands.json	/^      "src\/utils\/timer.cpp",$/;"	s	array:8.arguments
2	compile_commands.json	/^  {$/;"	o
20	compile_commands.json	/^  {$/;"	o
21	compile_commands.json	/^  {$/;"	o
22	compile_commands.json	/^  {$/;"	o
23	compile_commands.json	/^  {$/;"	o
3	compile_commands.json	/^      "-o",$/;"	s	array:0.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:1.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:10.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:11.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:12.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:13.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:14.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:15.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:16.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:17.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:18.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:19.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:2.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:20.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:21.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:22.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:23.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:3.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:4.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:5.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:6.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:7.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:8.arguments
3	compile_commands.json	/^      "-o",$/;"	s	array:9.arguments
3	compile_commands.json	/^  {$/;"	o
4	compile_commands.json	/^      "build\/obj\/dam\/common.c.o",$/;"	s	array:23.arguments
4	compile_commands.json	/^      "build\/obj\/dam\/dam.c.o",$/;"	s	array:20.arguments
4	compile_commands.json	/^      "build\/obj\/dam\/das_handler.c.o",$/;"	s	array:21.arguments
4	compile_commands.json	/^      "build\/obj\/dam\/data_loader.c.o",$/;"	s	array:22.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/camera.cpp.o",$/;"	s	array:1.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/common.c.o",$/;"	s	array:13.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/das_handler.c.o",$/;"	s	array:14.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/data_loader.c.o",$/;"	s	array:15.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/deng_math.cpp.o",$/;"	s	array:5.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/dengui_events.cpp.o",$/;"	s	array:10.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/dengui_window.cpp.o",$/;"	s	array:11.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/events.cpp.o",$/;"	s	array:6.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/font.cpp.o",$/;"	s	array:7.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/key_translation.c.o",$/;"	s	array:16.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/key_vector.c.o",$/;"	s	array:17.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/map_editor_ui.cpp.o",$/;"	s	array:12.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/rend_helpers.cpp.o",$/;"	s	array:4.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/renderer.cpp.o",$/;"	s	array:2.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/shapes.cpp.o",$/;"	s	array:9.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/timer.cpp.o",$/;"	s	array:8.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/vulkan_handler.c.o",$/;"	s	array:18.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/window.cpp.o",$/;"	s	array:3.arguments
4	compile_commands.json	/^      "build\/obj\/libdeng\/x11_surface.c.o",$/;"	s	array:19.arguments
4	compile_commands.json	/^      "build\/obj\/sandboxapp\/sandbox.cpp.o",$/;"	s	array:0.arguments
4	compile_commands.json	/^  {$/;"	o
5	compile_commands.json	/^      "-Wall",$/;"	s	array:0.arguments
5	compile_commands.json	/^      "-Wall",$/;"	s	array:20.arguments
5	compile_commands.json	/^      "-Wall",$/;"	s	array:21.arguments
5	compile_commands.json	/^      "-Wall",$/;"	s	array:22.arguments
5	compile_commands.json	/^      "-Wall",$/;"	s	array:23.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:1.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:10.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:11.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:12.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:13.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:14.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:15.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:16.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:17.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:18.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:19.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:2.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:3.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:4.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:5.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:6.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:7.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:8.arguments
5	compile_commands.json	/^      "-fPIC",$/;"	s	array:9.arguments
5	compile_commands.json	/^  {$/;"	o
6	compile_commands.json	/^      "-Wall",$/;"	s	array:1.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:10.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:11.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:12.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:13.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:14.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:15.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:16.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:17.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:18.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:19.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:2.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:3.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:4.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:5.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:6.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:7.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:8.arguments
6	compile_commands.json	/^      "-Wall",$/;"	s	array:9.arguments
6	compile_commands.json	/^      "-m64",$/;"	s	array:0.arguments
6	compile_commands.json	/^      "-m64",$/;"	s	array:20.arguments
6	compile_commands.json	/^      "-m64",$/;"	s	array:21.arguments
6	compile_commands.json	/^      "-m64",$/;"	s	array:22.arguments
6	compile_commands.json	/^      "-m64",$/;"	s	array:23.arguments
6	compile_commands.json	/^  {$/;"	o
7	compile_commands.json	/^      "-O3",$/;"	s	array:20.arguments
7	compile_commands.json	/^      "-O3",$/;"	s	array:21.arguments
7	compile_commands.json	/^      "-O3",$/;"	s	array:22.arguments
7	compile_commands.json	/^      "-O3",$/;"	s	array:23.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:1.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:10.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:11.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:12.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:13.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:14.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:15.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:16.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:17.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:18.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:19.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:2.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:3.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:4.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:5.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:6.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:7.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:8.arguments
7	compile_commands.json	/^      "-m64",$/;"	s	array:9.arguments
7	compile_commands.json	/^      "-std=c++11",$/;"	s	array:0.arguments
7	compile_commands.json	/^  {$/;"	o
8	compile_commands.json	/^      "-O3",$/;"	s	array:0.arguments
8	compile_commands.json	/^      "-O3",$/;"	s	array:13.arguments
8	compile_commands.json	/^      "-O3",$/;"	s	array:14.arguments
8	compile_commands.json	/^      "-O3",$/;"	s	array:15.arguments
8	compile_commands.json	/^      "-O3",$/;"	s	array:16.arguments
8	compile_commands.json	/^      "-O3",$/;"	s	array:17.arguments
8	compile_commands.json	/^      "-O3",$/;"	s	array:18.arguments
8	compile_commands.json	/^      "-O3",$/;"	s	array:19.arguments
8	compile_commands.json	/^      "-g",$/;"	s	array:20.arguments
8	compile_commands.json	/^      "-g",$/;"	s	array:21.arguments
8	compile_commands.json	/^      "-g",$/;"	s	array:22.arguments
8	compile_commands.json	/^      "-g",$/;"	s	array:23.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:1.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:10.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:11.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:12.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:2.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:3.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:4.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:5.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:6.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:7.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:8.arguments
8	compile_commands.json	/^      "-std=c++11",$/;"	s	array:9.arguments
8	compile_commands.json	/^  {$/;"	o
9	compile_commands.json	/^      "-I",$/;"	s	array:20.arguments
9	compile_commands.json	/^      "-I",$/;"	s	array:21.arguments
9	compile_commands.json	/^      "-I",$/;"	s	array:22.arguments
9	compile_commands.json	/^      "-I",$/;"	s	array:23.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:1.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:10.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:11.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:12.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:2.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:3.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:4.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:5.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:6.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:7.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:8.arguments
9	compile_commands.json	/^      "-O3",$/;"	s	array:9.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:0.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:13.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:14.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:15.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:16.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:17.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:18.arguments
9	compile_commands.json	/^      "-g",$/;"	s	array:19.arguments
9	compile_commands.json	/^  {$/;"	o
ACTIVE_KEYS	headers/deng/deng_surface_window.h	/^#define ACTIVE_KEYS /;"	d
API_CORE_H	headers/deng/api_core.h	/^#define API_CORE_H$/;"	d
ASSETS_H	headers/das/assets.h	/^#define ASSETS_H$/;"	d
ASSET_CREATOR_CORE_H	headers/das/das_core.h	/^#define ASSET_CREATOR_CORE_H$/;"	d
AssetMaker2D	headers/utils/shapes.h	/^    struct AssetMaker2D {$/;"	s	namespace:dengUtils
BASE_TYPES_H	headers/common/base_types.h	/^#define BASE_TYPES_H$/;"	d
BMPColorHeader	headers/das/hdr_data.h	/^typedef struct BMPColorHeader {$/;"	s
BMPColorHeader	headers/das/hdr_data.h	/^} BMPColorHeader;$/;"	t	typeref:struct:BMPColorHeader
BMPFileHeader	headers/das/hdr_data.h	/^typedef struct BMPFileHeader {$/;"	s
BMPFileHeader	headers/das/hdr_data.h	/^} BMPFileHeader;$/;"	t	typeref:struct:BMPFileHeader
BMPInfoHeader	headers/das/hdr_data.h	/^typedef struct BMPInfoHeader {$/;"	s
BMPInfoHeader	headers/das/hdr_data.h	/^} BMPInfoHeader;$/;"	t	typeref:struct:BMPInfoHeader
BUILD_DIR	Makefile	/^BUILD_DIR = build$/;"	m
BaseWindowShapes	headers/dengui/dengui_window.h	/^    class BaseWindowShapes {$/;"	c	namespace:dengui
BaseWindowShapes	src/dengui/dengui_window.cpp	/^    BaseWindowShapes::BaseWindowShapes ($/;"	f	class:dengui::BaseWindowShapes
BitmapChar	headers/utils/font.h	/^    struct BitmapChar {$/;"	s	namespace:dengUtils
BitmapGlyphData	headers/utils/font.h	/^    struct BitmapGlyphData {$/;"	s	namespace:dengUtils
BitmapStr	headers/utils/font.h	/^    struct BitmapStr {$/;"	s	namespace:dengUtils
BorderGenerator	headers/utils/shapes.h	/^    struct BorderGenerator {$/;"	s	namespace:dengUtils
BufferCreator	headers/deng/rend_helpers.h	/^    struct BufferCreator {$/;"	s	namespace:deng
BufferData	headers/deng/rend_helpers.h	/^    struct BufferData {$/;"	s	namespace:deng
Build using Saucer	docs/getting-started.md	/^### Build using Saucer    $/;"	S
Building	BUILD.md	/^### Building$/;"	S
Building	README.md	/^## Building$/;"	s
Building DENG	docs/getting-started.md	/^## Building DENG $/;"	s
Building intructions	BUILD.md	/^# Building intructions$/;"	c
CAMERA_H	headers/deng/camera.h	/^#define CAMERA_H$/;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	src/das/Makefile	/^CC = gcc$/;"	m
CC_FLAGS	Makefile	/^CC_FLAGS = -Wall -m64 -O3 -g$/;"	m
CHILD_OVERLAP_HIDE	headers/dengui/dengui_child.h	/^        CHILD_OVERLAP_HIDE      = 0,$/;"	e	enum:dengui::ChildOverlapMode
CHILD_OVERLAP_NONE	headers/dengui/dengui_child.h	/^        CHILD_OVERLAP_NONE      = 2$/;"	e	enum:dengui::ChildOverlapMode
CHILD_OVERLAP_SCROLL	headers/dengui/dengui_child.h	/^        CHILD_OVERLAP_SCROLL    = 1,$/;"	e	enum:dengui::ChildOverlapMode
CIR_INDEX	src/main/sandbox_shape.cpp	/^#define CIR_INDEX /;"	d	file:
COMMON_H	headers/common/common.h	/^#define COMMON_H$/;"	d
CXX	Makefile	/^CXX = g++$/;"	m
CXX_FLAGS	Makefile	/^CXX_FLAGS = -Wall -m64 -std=c++11 -O3 -g$/;"	m
Camera	headers/deng/camera.h	/^    class Camera$/;"	c	namespace:deng
Camera	src/deng/camera.cpp	/^    Camera::Camera ($/;"	f	class:deng::Camera
ChainData	headers/common/hashmap.h	/^typedef struct ChainData {$/;"	s
ChainData	headers/common/hashmap.h	/^} ChainData;$/;"	t	typeref:struct:ChainData
ChildInfo	headers/dengui/dengui_child.h	/^    struct ChildInfo {$/;"	s	namespace:dengui
ChildOverlapMode	headers/dengui/dengui_child.h	/^    enum ChildOverlapMode {$/;"	g	namespace:dengui
ChildWindow	headers/dengui/dengui_child.h	/^    class ChildWindow {$/;"	c	namespace:dengui
CircleGenerator	headers/utils/shapes.h	/^    class CircleGenerator : private BorderGenerator, private AssetMaker2D {$/;"	c	namespace:dengUtils
CircleGenerator	src/utils/shapes.cpp	/^    CircleGenerator::CircleGenerator ($/;"	f	class:dengUtils::CircleGenerator
CommandBufferRecorder	headers/deng/rend_helpers.h	/^    struct CommandBufferRecorder {$/;"	s	namespace:deng
Configuring build config	BUILD.md	/^### Configuring build config$/;"	S
Conversion	headers/deng/deng_math.h	/^        Conversion() {$/;"	f	struct:dengMath::Conversion
Conversion	headers/deng/deng_math.h	/^    struct Conversion {$/;"	s	namespace:dengMath
Creating WindowWrap and Renderer instances	docs/getting-started.md	/^### Creating WindowWrap and Renderer instances$/;"	S
DAM_OBJ	Makefile	/^DAM_OBJ = $(BUILD_DIR)\/obj\/dam\/dam.c.o \\$/;"	m
DAM_TARGET	Makefile	/^DAM_TARGET = $(BUILD_DIR)\/deng\/dam$/;"	m
DAM_VERSION	headers/das/dam.h	/^#define DAM_VERSION /;"	d
DAS_EXT_HANDLER	headers/das/dam.h	/^#define DAS_EXT_HANDLER$/;"	d
DAS_EXT_HANDLER	src/das/das_handler.c	/^#define DAS_EXT_HANDLER$/;"	d	file:
DAS_EXT_LOADERS	src/das/data_loader.c	/^#define DAS_EXT_LOADERS$/;"	d	file:
DAS_GENERIC_HELPERS	headers/das/dam.h	/^#define DAS_GENERIC_HELPERS$/;"	d
DAS_GENERIC_HELPERS	src/das/data_loader.c	/^#define DAS_GENERIC_HELPERS$/;"	d	file:
DATA_H	headers/das/hdr_data.h	/^#define DATA_H$/;"	d
DEFAULT_ASSET_COLOR	headers/das/data_loader.h	/^#define DEFAULT_ASSET_COLOR /;"	d
DEFAULT_FONT_PATH	headers/utils/font.h	/^#define DEFAULT_FONT_PATH /;"	d
DEFAULT_WINDOW_BORDER	headers/deng/deng_surface_window.h	/^    #define DEFAULT_WINDOW_BORDER /;"	d
DENG	README.md	/^# DENG$/;"	c
DENG asset file format (.das) specifications	docs/das.md	/^# DENG asset file format (.das) specifications  $/;"	c
DENGUI_CHILD_H	headers/dengui/dengui_child.h	/^#define DENGUI_CHILD_H$/;"	d
DENGUI_CLOSE_BTN	headers/dengui/dengui_window.h	/^#define DENGUI_CLOSE_BTN /;"	d
DENGUI_CLOSE_BTN_ID	headers/dengui/dengui_window.h	/^#define DENGUI_CLOSE_BTN_ID /;"	d
DENGUI_DEFAULT_FONT_FILE	headers/dengui/dengui_window.h	/^#define DENGUI_DEFAULT_FONT_FILE /;"	d
DENGUI_DEFAULT_POS	headers/dengui/dengui_window.h	/^#define DENGUI_DEFAULT_POS /;"	d
DENGUI_DEFAULT_PRIMARY_COLOR	headers/dengui/dengui_window.h	/^#define DENGUI_DEFAULT_PRIMARY_COLOR /;"	d
DENGUI_DEFAULT_SECONDARY_COLOR	headers/dengui/dengui_window.h	/^#define DENGUI_DEFAULT_SECONDARY_COLOR /;"	d
DENGUI_DEFAULT_SIZE	headers/dengui/dengui_window.h	/^#define DENGUI_DEFAULT_SIZE /;"	d
DENGUI_DEFAULT_TERTIARY_COLOR	headers/dengui/dengui_window.h	/^#define DENGUI_DEFAULT_TERTIARY_COLOR /;"	d
DENGUI_EVENTS_H	headers/dengui/dengui_events.h	/^#define DENGUI_EVENTS_H$/;"	d
DENGUI_EV_INPUT_SLEEP_INTERVAL	headers/dengui/dengui_events.h	/^#define DENGUI_EV_INPUT_SLEEP_INTERVAL /;"	d
DENGUI_FORM_ID	headers/dengui/dengui_window.h	/^#define DENGUI_FORM_ID /;"	d
DENGUI_H	headers/dengui/dengui.h	/^#define DENGUI_H$/;"	d
DENGUI_HEAVY_BORDER_THICKNESS	headers/dengui/dengui_window.h	/^#define DENGUI_HEAVY_BORDER_THICKNESS /;"	d
DENGUI_ITERATION_SLEEP_INTERVAL	headers/dengui/dengui_events.h	/^#define DENGUI_ITERATION_SLEEP_INTERVAL /;"	d
DENGUI_LIGHT_BORDER_THICKNESS	headers/dengui/dengui_window.h	/^#define DENGUI_LIGHT_BORDER_THICKNESS /;"	d
DENGUI_MAXIMISE_TRIANGLE_ID	headers/dengui/dengui_window.h	/^#define DENGUI_MAXIMISE_TRIANGLE_ID /;"	d
DENGUI_MEDIUM_BORDER_THICKNESS	headers/dengui/dengui_window.h	/^#define DENGUI_MEDIUM_BORDER_THICKNESS /;"	d
DENGUI_MINIMISE_TRIANGLE_ID	headers/dengui/dengui_window.h	/^#define DENGUI_MINIMISE_TRIANGLE_ID /;"	d
DENGUI_TITLEBAR_ELEM_MARGIN	headers/dengui/dengui_window.h	/^#define DENGUI_TITLEBAR_ELEM_MARGIN /;"	d
DENGUI_TITLEBAR_HEIGHT	headers/dengui/dengui_window.h	/^#define DENGUI_TITLEBAR_HEIGHT /;"	d
DENGUI_TITLEBAR_ID	headers/dengui/dengui_window.h	/^#define DENGUI_TITLEBAR_ID /;"	d
DENGUI_TITLE_ID	headers/dengui/dengui_window.h	/^#define DENGUI_TITLE_ID /;"	d
DENGUI_WINDOW_FLAG_ALWAYS_ON_TOP	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_ALWAYS_ON_TOP /;"	d
DENGUI_WINDOW_FLAG_MENUBAR	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_MENUBAR /;"	d
DENGUI_WINDOW_FLAG_NO_CLOSE	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_NO_CLOSE /;"	d
DENGUI_WINDOW_FLAG_NO_COLLAPSE	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_NO_COLLAPSE /;"	d
DENGUI_WINDOW_FLAG_NO_MOVE	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_NO_MOVE /;"	d
DENGUI_WINDOW_FLAG_NO_RESIZE	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_NO_RESIZE /;"	d
DENGUI_WINDOW_FLAG_NO_TITLEBAR	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_NO_TITLEBAR /;"	d
DENGUI_WINDOW_FLAG_NULL	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_FLAG_NULL /;"	d
DENGUI_WINDOW_H	headers/dengui/dengui_window.h	/^#define DENGUI_WINDOW_H$/;"	d
DENG_ASSET_MODE_2D_TEXTURE_MAPPED	headers/das/assets.h	/^    DENG_ASSET_MODE_2D_TEXTURE_MAPPED               = 4,$/;"	e	enum:deng_AssetMode
DENG_ASSET_MODE_2D_UNMAPPED	headers/das/assets.h	/^    DENG_ASSET_MODE_2D_UNMAPPED                     = 5$/;"	e	enum:deng_AssetMode
DENG_ASSET_MODE_3D_TEXTURE_MAPPED	headers/das/assets.h	/^    DENG_ASSET_MODE_3D_TEXTURE_MAPPED               = 2,$/;"	e	enum:deng_AssetMode
DENG_ASSET_MODE_3D_TEXTURE_MAPPED_NORMALISED	headers/das/assets.h	/^    DENG_ASSET_MODE_3D_TEXTURE_MAPPED_NORMALISED    = 0,$/;"	e	enum:deng_AssetMode
DENG_ASSET_MODE_3D_UNMAPPED	headers/das/assets.h	/^    DENG_ASSET_MODE_3D_UNMAPPED                     = 3,$/;"	e	enum:deng_AssetMode
DENG_ASSET_MODE_3D_UNMAPPED_NORMALISED	headers/das/assets.h	/^    DENG_ASSET_MODE_3D_UNMAPPED_NORMALISED          = 1,$/;"	e	enum:deng_AssetMode
DENG_CAMERA_BASE_SPEED_X	headers/deng/camera.h	/^#define DENG_CAMERA_BASE_SPEED_X /;"	d
DENG_CAMERA_BASE_SPEED_Y	headers/deng/camera.h	/^#define DENG_CAMERA_BASE_SPEED_Y /;"	d
DENG_CAMERA_BASE_SPEED_Z	headers/deng/camera.h	/^#define DENG_CAMERA_BASE_SPEED_Z /;"	d
DENG_CAMERA_DEFAULT_X	headers/deng/camera.h	/^#define DENG_CAMERA_DEFAULT_X /;"	d
DENG_CAMERA_DEFAULT_Y	headers/deng/camera.h	/^#define DENG_CAMERA_DEFAULT_Y /;"	d
DENG_CAMERA_DEFAULT_Z	headers/deng/camera.h	/^#define DENG_CAMERA_DEFAULT_Z /;"	d
DENG_CAMERA_UNIFORM_NO_CAMERA_MODE_2D	headers/deng/api_core.h	/^#define DENG_CAMERA_UNIFORM_NO_CAMERA_MODE_2D /;"	d
DENG_CAMERA_UNIFORM_NO_CAMERA_MODE_3D	headers/deng/api_core.h	/^#define DENG_CAMERA_UNIFORM_NO_CAMERA_MODE_3D /;"	d
DENG_CAMERA_UNIFORM_ORTHOGRAPHIC_CAMERA_MODE_2D	headers/deng/api_core.h	/^#define DENG_CAMERA_UNIFORM_ORTHOGRAPHIC_CAMERA_MODE_2D /;"	d
DENG_CAMERA_UNIFORM_ORTHOGRAPHIC_CAMERA_MODE_3D	headers/deng/api_core.h	/^#define DENG_CAMERA_UNIFORM_ORTHOGRAPHIC_CAMERA_MODE_3D /;"	d
DENG_CAMERA_UNIFORM_PERSPECTIVE_CAMERA_MODE_3D	headers/deng/api_core.h	/^#define DENG_CAMERA_UNIFORM_PERSPECTIVE_CAMERA_MODE_3D /;"	d
DENG_CIRCLE_MIN_VERT_COUNT	headers/utils/shapes.h	/^#define DENG_CIRCLE_MIN_VERT_COUNT /;"	d
DENG_CIRCLE_VERT_COUNT_MULTIPLIER	headers/utils/shapes.h	/^#define DENG_CIRCLE_VERT_COUNT_MULTIPLIER /;"	d
DENG_COORD_AXIS_UNDEFINED	headers/deng/api_core.h	/^    DENG_COORD_AXIS_UNDEFINED = -1,$/;"	e	enum:deng_CoordinateAxisType
DENG_COORD_AXIS_X	headers/deng/api_core.h	/^    DENG_COORD_AXIS_X = 0,$/;"	e	enum:deng_CoordinateAxisType
DENG_COORD_AXIS_Y	headers/deng/api_core.h	/^    DENG_COORD_AXIS_Y = 1,$/;"	e	enum:deng_CoordinateAxisType
DENG_COORD_AXIS_Z	headers/deng/api_core.h	/^    DENG_COORD_AXIS_Z = 2$/;"	e	enum:deng_CoordinateAxisType
DENG_CURSOR_DEFAULT	headers/deng/deng_surface_window.h	/^    #define DENG_CURSOR_DEFAULT /;"	d
DENG_CURSOR_HIDDEN	headers/deng/deng_surface_window.h	/^    #define DENG_CURSOR_HIDDEN /;"	d
DENG_DEFAULT_FAR_PLANE	headers/deng/renderer.h	/^        #define DENG_DEFAULT_FAR_PLANE /;"	d
DENG_DEFAULT_NEAR_PLANE	headers/deng/renderer.h	/^        #define DENG_DEFAULT_NEAR_PLANE /;"	d
DENG_ERR_AUTOREPEAT_DISABLE	headers/deng/deng_surface_window.h	/^#define DENG_ERR_AUTOREPEAT_DISABLE /;"	d
DENG_GRID_TRIANGLE_THICKNESS	headers/utils/grid_generator.h	/^#define DENG_GRID_TRIANGLE_THICKNESS /;"	d
DENG_INPUT_MOVEMENT	headers/deng/api_core.h	/^    DENG_INPUT_MOVEMENT = 1$/;"	e	enum:deng_InputMode
DENG_INPUT_NONMOVEMENT	headers/deng/api_core.h	/^    DENG_INPUT_NONMOVEMENT = 0,$/;"	e	enum:deng_InputMode
DENG_KEY_0	headers/deng/deng_key_definitions.h	/^    DENG_KEY_0              =   48,$/;"	e	enum:deng_Key
DENG_KEY_1	headers/deng/deng_key_definitions.h	/^    DENG_KEY_1              =   49,$/;"	e	enum:deng_Key
DENG_KEY_2	headers/deng/deng_key_definitions.h	/^    DENG_KEY_2              =   50,$/;"	e	enum:deng_Key
DENG_KEY_3	headers/deng/deng_key_definitions.h	/^    DENG_KEY_3              =   51,$/;"	e	enum:deng_Key
DENG_KEY_4	headers/deng/deng_key_definitions.h	/^    DENG_KEY_4              =   52,$/;"	e	enum:deng_Key
DENG_KEY_5	headers/deng/deng_key_definitions.h	/^    DENG_KEY_5              =   53,$/;"	e	enum:deng_Key
DENG_KEY_6	headers/deng/deng_key_definitions.h	/^    DENG_KEY_6              =   54,$/;"	e	enum:deng_Key
DENG_KEY_7	headers/deng/deng_key_definitions.h	/^    DENG_KEY_7              =   55,$/;"	e	enum:deng_Key
DENG_KEY_8	headers/deng/deng_key_definitions.h	/^    DENG_KEY_8              =   56,$/;"	e	enum:deng_Key
DENG_KEY_9	headers/deng/deng_key_definitions.h	/^    DENG_KEY_9              =   57,$/;"	e	enum:deng_Key
DENG_KEY_A	headers/deng/deng_key_definitions.h	/^    DENG_KEY_A              =   65,$/;"	e	enum:deng_Key
DENG_KEY_APOSTROPHE	headers/deng/deng_key_definitions.h	/^    DENG_KEY_APOSTROPHE     =   39,$/;"	e	enum:deng_Key
DENG_KEY_B	headers/deng/deng_key_definitions.h	/^    DENG_KEY_B              =   66,$/;"	e	enum:deng_Key
DENG_KEY_BACKSPACE	headers/deng/deng_key_definitions.h	/^    DENG_KEY_BACKSPACE      =   259,$/;"	e	enum:deng_Key
DENG_KEY_C	headers/deng/deng_key_definitions.h	/^    DENG_KEY_C              =   67,$/;"	e	enum:deng_Key
DENG_KEY_CAPS_LOCK	headers/deng/deng_key_definitions.h	/^    DENG_KEY_CAPS_LOCK      =   280,$/;"	e	enum:deng_Key
DENG_KEY_COMMA	headers/deng/deng_key_definitions.h	/^    DENG_KEY_COMMA          =   44,$/;"	e	enum:deng_Key
DENG_KEY_D	headers/deng/deng_key_definitions.h	/^    DENG_KEY_D              =   68,$/;"	e	enum:deng_Key
DENG_KEY_DEFINITIONS_H	headers/deng/deng_key_definitions.h	/^#define DENG_KEY_DEFINITIONS_H$/;"	d
DENG_KEY_DELETE	headers/deng/deng_key_definitions.h	/^    DENG_KEY_DELETE         =   261,$/;"	e	enum:deng_Key
DENG_KEY_DOT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_DOT            =   46,$/;"	e	enum:deng_Key
DENG_KEY_DOWN	headers/deng/deng_key_definitions.h	/^    DENG_KEY_DOWN           =   264,$/;"	e	enum:deng_Key
DENG_KEY_E	headers/deng/deng_key_definitions.h	/^    DENG_KEY_E              =   69,$/;"	e	enum:deng_Key
DENG_KEY_END	headers/deng/deng_key_definitions.h	/^    DENG_KEY_END            =   269,$/;"	e	enum:deng_Key
DENG_KEY_ENTER	headers/deng/deng_key_definitions.h	/^    DENG_KEY_ENTER          =   257,$/;"	e	enum:deng_Key
DENG_KEY_EQUAL	headers/deng/deng_key_definitions.h	/^    DENG_KEY_EQUAL          =   61,$/;"	e	enum:deng_Key
DENG_KEY_ESCAPE	headers/deng/deng_key_definitions.h	/^    DENG_KEY_ESCAPE         =   256,$/;"	e	enum:deng_Key
DENG_KEY_F	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F              =   70,$/;"	e	enum:deng_Key
DENG_KEY_F1	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F1             =   290,$/;"	e	enum:deng_Key
DENG_KEY_F10	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F10            =   299,$/;"	e	enum:deng_Key
DENG_KEY_F11	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F11            =   300,$/;"	e	enum:deng_Key
DENG_KEY_F12	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F12            =   301,$/;"	e	enum:deng_Key
DENG_KEY_F13	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F13            =   302,$/;"	e	enum:deng_Key
DENG_KEY_F14	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F14            =   303,$/;"	e	enum:deng_Key
DENG_KEY_F15	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F15            =   304,$/;"	e	enum:deng_Key
DENG_KEY_F16	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F16            =   305,$/;"	e	enum:deng_Key
DENG_KEY_F17	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F17            =   306,$/;"	e	enum:deng_Key
DENG_KEY_F18	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F18            =   307,$/;"	e	enum:deng_Key
DENG_KEY_F19	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F19            =   308,$/;"	e	enum:deng_Key
DENG_KEY_F2	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F2             =   291,$/;"	e	enum:deng_Key
DENG_KEY_F20	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F20            =   309,$/;"	e	enum:deng_Key
DENG_KEY_F21	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F21            =   310,$/;"	e	enum:deng_Key
DENG_KEY_F22	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F22            =   311,$/;"	e	enum:deng_Key
DENG_KEY_F23	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F23            =   312,$/;"	e	enum:deng_Key
DENG_KEY_F24	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F24            =   313,$/;"	e	enum:deng_Key
DENG_KEY_F25	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F25            =   314,$/;"	e	enum:deng_Key
DENG_KEY_F3	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F3             =   292,$/;"	e	enum:deng_Key
DENG_KEY_F4	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F4             =   293,$/;"	e	enum:deng_Key
DENG_KEY_F5	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F5             =   294,$/;"	e	enum:deng_Key
DENG_KEY_F6	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F6             =   295,$/;"	e	enum:deng_Key
DENG_KEY_F7	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F7             =   296,$/;"	e	enum:deng_Key
DENG_KEY_F8	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F8             =   297,$/;"	e	enum:deng_Key
DENG_KEY_F9	headers/deng/deng_key_definitions.h	/^    DENG_KEY_F9             =   298,$/;"	e	enum:deng_Key
DENG_KEY_G	headers/deng/deng_key_definitions.h	/^    DENG_KEY_G              =   71,$/;"	e	enum:deng_Key
DENG_KEY_H	headers/deng/deng_key_definitions.h	/^    DENG_KEY_H              =   72,$/;"	e	enum:deng_Key
DENG_KEY_HOME	headers/deng/deng_key_definitions.h	/^    DENG_KEY_HOME           =   268,$/;"	e	enum:deng_Key
DENG_KEY_I	headers/deng/deng_key_definitions.h	/^    DENG_KEY_I              =   73,$/;"	e	enum:deng_Key
DENG_KEY_INSERT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_INSERT         =   260,$/;"	e	enum:deng_Key
DENG_KEY_J	headers/deng/deng_key_definitions.h	/^    DENG_KEY_J              =   74, $/;"	e	enum:deng_Key
DENG_KEY_K	headers/deng/deng_key_definitions.h	/^    DENG_KEY_K              =   75,$/;"	e	enum:deng_Key
DENG_KEY_L	headers/deng/deng_key_definitions.h	/^    DENG_KEY_L              =   76,$/;"	e	enum:deng_Key
DENG_KEY_LEFT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_LEFT           =   263,$/;"	e	enum:deng_Key
DENG_KEY_LEFT_ALT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_LEFT_ALT       =   342,$/;"	e	enum:deng_Key
DENG_KEY_LEFT_CTRL	headers/deng/deng_key_definitions.h	/^    DENG_KEY_LEFT_CTRL      =   341,$/;"	e	enum:deng_Key
DENG_KEY_LEFT_SHIFT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_LEFT_SHIFT     =   340,$/;"	e	enum:deng_Key
DENG_KEY_LEFT_SUPER	headers/deng/deng_key_definitions.h	/^    DENG_KEY_LEFT_SUPER     =   343,$/;"	e	enum:deng_Key
DENG_KEY_M	headers/deng/deng_key_definitions.h	/^    DENG_KEY_M              =   77,$/;"	e	enum:deng_Key
DENG_KEY_MENU	headers/deng/deng_key_definitions.h	/^    DENG_KEY_MENU           =   348$/;"	e	enum:deng_Key
DENG_KEY_MINUS	headers/deng/deng_key_definitions.h	/^    DENG_KEY_MINUS          =   45,$/;"	e	enum:deng_Key
DENG_KEY_N	headers/deng/deng_key_definitions.h	/^    DENG_KEY_N              =   78,$/;"	e	enum:deng_Key
DENG_KEY_NP_0	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_0           =   320,$/;"	e	enum:deng_Key
DENG_KEY_NP_1	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_1           =   321,$/;"	e	enum:deng_Key
DENG_KEY_NP_2	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_2           =   322,$/;"	e	enum:deng_Key
DENG_KEY_NP_3	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_3           =   323,$/;"	e	enum:deng_Key
DENG_KEY_NP_4	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_4           =   324,$/;"	e	enum:deng_Key
DENG_KEY_NP_5	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_5           =   325,$/;"	e	enum:deng_Key
DENG_KEY_NP_6	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_6           =   326,$/;"	e	enum:deng_Key
DENG_KEY_NP_7	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_7           =   327,$/;"	e	enum:deng_Key
DENG_KEY_NP_8	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_8           =   328,$/;"	e	enum:deng_Key
DENG_KEY_NP_9	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_9           =   329,$/;"	e	enum:deng_Key
DENG_KEY_NP_ADD	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_ADD         =   334,$/;"	e	enum:deng_Key
DENG_KEY_NP_DECIMAL	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_DECIMAL     =   330,$/;"	e	enum:deng_Key
DENG_KEY_NP_DIVIDE	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_DIVIDE      =   331,$/;"	e	enum:deng_Key
DENG_KEY_NP_ENTER	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_ENTER       =   335,$/;"	e	enum:deng_Key
DENG_KEY_NP_EQUAL	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_EQUAL       =   336,$/;"	e	enum:deng_Key
DENG_KEY_NP_MULTIPLY	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_MULTIPLY    =   332,$/;"	e	enum:deng_Key
DENG_KEY_NP_SUBTRACT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NP_SUBTRACT    =   333,$/;"	e	enum:deng_Key
DENG_KEY_NUM_LOCK	headers/deng/deng_key_definitions.h	/^    DENG_KEY_NUM_LOCK       =   282,$/;"	e	enum:deng_Key
DENG_KEY_O	headers/deng/deng_key_definitions.h	/^    DENG_KEY_O              =   79,$/;"	e	enum:deng_Key
DENG_KEY_P	headers/deng/deng_key_definitions.h	/^    DENG_KEY_P              =   80,$/;"	e	enum:deng_Key
DENG_KEY_PAGE_DOWN	headers/deng/deng_key_definitions.h	/^    DENG_KEY_PAGE_DOWN      =   267,$/;"	e	enum:deng_Key
DENG_KEY_PAGE_UP	headers/deng/deng_key_definitions.h	/^    DENG_KEY_PAGE_UP        =   266,$/;"	e	enum:deng_Key
DENG_KEY_PAUSE	headers/deng/deng_key_definitions.h	/^    DENG_KEY_PAUSE          =   284,$/;"	e	enum:deng_Key
DENG_KEY_PRESS_INTERVAL	headers/deng/events.h	/^#define DENG_KEY_PRESS_INTERVAL /;"	d
DENG_KEY_PRINT_SCREEN	headers/deng/deng_key_definitions.h	/^    DENG_KEY_PRINT_SCREEN   =   283,$/;"	e	enum:deng_Key
DENG_KEY_Q	headers/deng/deng_key_definitions.h	/^    DENG_KEY_Q              =   81,$/;"	e	enum:deng_Key
DENG_KEY_R	headers/deng/deng_key_definitions.h	/^    DENG_KEY_R              =   82,$/;"	e	enum:deng_Key
DENG_KEY_RIGHT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_RIGHT          =   262,$/;"	e	enum:deng_Key
DENG_KEY_RIGHT_ALT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_RIGHT_ALT      =   346,$/;"	e	enum:deng_Key
DENG_KEY_RIGHT_CTRL	headers/deng/deng_key_definitions.h	/^    DENG_KEY_RIGHT_CTRL     =   345,$/;"	e	enum:deng_Key
DENG_KEY_RIGHT_SHIFT	headers/deng/deng_key_definitions.h	/^    DENG_KEY_RIGHT_SHIFT    =   344,$/;"	e	enum:deng_Key
DENG_KEY_RIGHT_SUPER	headers/deng/deng_key_definitions.h	/^    DENG_KEY_RIGHT_SUPER    =   347,$/;"	e	enum:deng_Key
DENG_KEY_S	headers/deng/deng_key_definitions.h	/^    DENG_KEY_S              =   83,$/;"	e	enum:deng_Key
DENG_KEY_SCROLL_LOCK	headers/deng/deng_key_definitions.h	/^    DENG_KEY_SCROLL_LOCK    =   281,$/;"	e	enum:deng_Key
DENG_KEY_SEMICOLON	headers/deng/deng_key_definitions.h	/^    DENG_KEY_SEMICOLON      =   59,$/;"	e	enum:deng_Key
DENG_KEY_SLASH	headers/deng/deng_key_definitions.h	/^    DENG_KEY_SLASH          =   47,$/;"	e	enum:deng_Key
DENG_KEY_SPACE	headers/deng/deng_key_definitions.h	/^    DENG_KEY_SPACE          =   32,$/;"	e	enum:deng_Key
DENG_KEY_T	headers/deng/deng_key_definitions.h	/^    DENG_KEY_T              =   84,$/;"	e	enum:deng_Key
DENG_KEY_TAB	headers/deng/deng_key_definitions.h	/^    DENG_KEY_TAB            =   258,$/;"	e	enum:deng_Key
DENG_KEY_U	headers/deng/deng_key_definitions.h	/^    DENG_KEY_U              =   85,$/;"	e	enum:deng_Key
DENG_KEY_UNKNOWN	headers/deng/deng_key_definitions.h	/^    DENG_KEY_UNKNOWN        =   -1,$/;"	e	enum:deng_Key
DENG_KEY_UP	headers/deng/deng_key_definitions.h	/^    DENG_KEY_UP             =   265,$/;"	e	enum:deng_Key
DENG_KEY_V	headers/deng/deng_key_definitions.h	/^    DENG_KEY_V              =   86,$/;"	e	enum:deng_Key
DENG_KEY_W	headers/deng/deng_key_definitions.h	/^    DENG_KEY_W              =   87,$/;"	e	enum:deng_Key
DENG_KEY_X	headers/deng/deng_key_definitions.h	/^    DENG_KEY_X              =   88,$/;"	e	enum:deng_Key
DENG_KEY_Y	headers/deng/deng_key_definitions.h	/^    DENG_KEY_Y              =   89,$/;"	e	enum:deng_Key
DENG_KEY_Z	headers/deng/deng_key_definitions.h	/^    DENG_KEY_Z              =   90,$/;"	e	enum:deng_Key
DENG_MAP_UI_ASSET_WINDOW_FLAGS	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_ASSET_WINDOW_FLAGS /;"	d
DENG_MAP_UI_ASSET_WINDOW_TYPE	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_ASSET_WINDOW_TYPE /;"	d
DENG_MAP_UI_BORDER	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_BORDER /;"	d
DENG_MAP_UI_MAIN_WINDOW_FLAGS	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_MAIN_WINDOW_FLAGS /;"	d
DENG_MAP_UI_MAIN_WINDOW_TYPE	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_MAIN_WINDOW_TYPE /;"	d
DENG_MAP_UI_PRIMARY_COLOR	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_PRIMARY_COLOR /;"	d
DENG_MAP_UI_SECONDARY_COLOR	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_SECONDARY_COLOR /;"	d
DENG_MAP_UI_TERTIARY_COLOR	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_TERTIARY_COLOR /;"	d
DENG_MAP_UI_TEXTURE_WINDOW_FLAGS	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_TEXTURE_WINDOW_FLAGS /;"	d
DENG_MAP_UI_TEXTURE_WINDOW_TYPE	headers/dengui/map_editor_ui.h	/^    #define DENG_MAP_UI_TEXTURE_WINDOW_TYPE /;"	d
DENG_MATH_H	headers/deng/deng_math.h	/^#define DENG_MATH_H$/;"	d
DENG_MAX_FRAMES_IN_FLIGHT	headers/deng/renderer.h	/^        #define DENG_MAX_FRAMES_IN_FLIGHT /;"	d
DENG_MOUSE_BASE_SENSITIVITY_X	headers/deng/camera.h	/^#define DENG_MOUSE_BASE_SENSITIVITY_X /;"	d
DENG_MOUSE_BASE_SENSIVITY_Y	headers/deng/camera.h	/^#define DENG_MOUSE_BASE_SENSIVITY_Y /;"	d
DENG_MOUSE_BTN_1	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_BTN_1 = 0,$/;"	e	enum:deng_MouseButton
DENG_MOUSE_BTN_2	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_BTN_2 = 1,$/;"	e	enum:deng_MouseButton
DENG_MOUSE_BTN_3	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_BTN_3 = 2,$/;"	e	enum:deng_MouseButton
DENG_MOUSE_BTN_UNKNOWN	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_BTN_UNKNOWN = -1,$/;"	e	enum:deng_MouseButton
DENG_MOUSE_MODE_CURSOR_VISIBLE	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_MODE_CURSOR_VISIBLE  = 1$/;"	e	enum:deng_MouseMode
DENG_MOUSE_MODE_VIRTUAL	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_MODE_VIRTUAL         = 0,$/;"	e	enum:deng_MouseMode
DENG_MOUSE_SCROLL_DOWN	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_SCROLL_DOWN = 3,$/;"	e	enum:deng_MouseButton
DENG_MOUSE_SCROLL_UP	headers/deng/deng_key_definitions.h	/^    DENG_MOUSE_SCROLL_UP = 4$/;"	e	enum:deng_MouseButton
DENG_MOVEMENT_BACKWARD	headers/deng/api_core.h	/^    DENG_MOVEMENT_BACKWARD = 1,$/;"	e	enum:deng_MovementEvent
DENG_MOVEMENT_DOWNWARD	headers/deng/api_core.h	/^    DENG_MOVEMENT_DOWNWARD = 5$/;"	e	enum:deng_MovementEvent
DENG_MOVEMENT_FORWARD	headers/deng/api_core.h	/^    DENG_MOVEMENT_FORWARD = 0,$/;"	e	enum:deng_MovementEvent
DENG_MOVEMENT_INTERVAL	headers/deng/events.h	/^#define DENG_MOVEMENT_INTERVAL /;"	d
DENG_MOVEMENT_LEFTWARD	headers/deng/api_core.h	/^    DENG_MOVEMENT_LEFTWARD = 3,$/;"	e	enum:deng_MovementEvent
DENG_MOVEMENT_NONE	headers/deng/api_core.h	/^    DENG_MOVEMENT_NONE = -1,$/;"	e	enum:deng_MovementEvent
DENG_MOVEMENT_RIGHTWARD	headers/deng/api_core.h	/^    DENG_MOVEMENT_RIGHTWARD = 2,$/;"	e	enum:deng_MovementEvent
DENG_MOVEMENT_UPWARD	headers/deng/api_core.h	/^    DENG_MOVEMENT_UPWARD = 4,$/;"	e	enum:deng_MovementEvent
DENG_PIPELINE_COUNT	headers/deng/renderer.h	/^        #define DENG_PIPELINE_COUNT /;"	d
DENG_PIPELINE_TYPE_TEXTURE_MAPPED_2D	headers/deng/api_core.h	/^    DENG_PIPELINE_TYPE_TEXTURE_MAPPED_2D = 5$/;"	e	enum:deng_PipelineType
DENG_PIPELINE_TYPE_TEXTURE_MAPPED_3D	headers/deng/api_core.h	/^    DENG_PIPELINE_TYPE_TEXTURE_MAPPED_3D = 2,$/;"	e	enum:deng_PipelineType
DENG_PIPELINE_TYPE_TEXTURE_MAPPED_3D_NORM	headers/deng/api_core.h	/^    DENG_PIPELINE_TYPE_TEXTURE_MAPPED_3D_NORM = 3,$/;"	e	enum:deng_PipelineType
DENG_PIPELINE_TYPE_UNMAPPED_2D	headers/deng/api_core.h	/^    DENG_PIPELINE_TYPE_UNMAPPED_2D = 4,$/;"	e	enum:deng_PipelineType
DENG_PIPELINE_TYPE_UNMAPPED_3D	headers/deng/api_core.h	/^    DENG_PIPELINE_TYPE_UNMAPPED_3D = 0,$/;"	e	enum:deng_PipelineType
DENG_PIPELINE_TYPE_UNMAPPED_3D_NORM	headers/deng/api_core.h	/^    DENG_PIPELINE_TYPE_UNMAPPED_3D_NORM = 1,$/;"	e	enum:deng_PipelineType
DENG_REFRESH_INTERVAL	headers/deng/deng_surface_window.h	/^#define DENG_REFRESH_INTERVAL /;"	d
DENG_RENDERER_HINT_API_OPENGL	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_API_OPENGL /;"	d
DENG_RENDERER_HINT_API_VULKAN	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_API_VULKAN /;"	d
DENG_RENDERER_HINT_CUSTOM_LOOP	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_CUSTOM_LOOP /;"	d
DENG_RENDERER_HINT_ENABLE_VALIDATION_LAYERS	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_ENABLE_VALIDATION_LAYERS /;"	d
DENG_RENDERER_HINT_ENABLE_VSYNC	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_ENABLE_VSYNC /;"	d
DENG_RENDERER_HINT_MIPMAP_ENABLE	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MIPMAP_ENABLE /;"	d
DENG_RENDERER_HINT_MSAA_1	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_1 /;"	d
DENG_RENDERER_HINT_MSAA_16	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_16 /;"	d
DENG_RENDERER_HINT_MSAA_2	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_2 /;"	d
DENG_RENDERER_HINT_MSAA_32	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_32 /;"	d
DENG_RENDERER_HINT_MSAA_4	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_4 /;"	d
DENG_RENDERER_HINT_MSAA_64	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_64 /;"	d
DENG_RENDERER_HINT_MSAA_8	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_8 /;"	d
DENG_RENDERER_HINT_MSAA_MAX_HARDWARE_SUPPORTED	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_MSAA_MAX_HARDWARE_SUPPORTED /;"	d
DENG_RENDERER_HINT_SHOW_FPS_COUNTER	headers/deng/api_core.h	/^#define DENG_RENDERER_HINT_SHOW_FPS_COUNTER /;"	d
DENG_RENDERER_USAGE_ASSET_EDITOR	headers/deng/api_core.h	/^    DENG_RENDERER_USAGE_ASSET_EDITOR = 0,$/;"	e	enum:deng_RendererUsageMode
DENG_RENDERER_USAGE_GAME_MODE	headers/deng/api_core.h	/^    DENG_RENDERER_USAGE_GAME_MODE = 2,$/;"	e	enum:deng_RendererUsageMode
DENG_RENDERER_USAGE_MAP_EDITOR	headers/deng/api_core.h	/^    DENG_RENDERER_USAGE_MAP_EDITOR = 1,$/;"	e	enum:deng_RendererUsageMode
DENG_SURFACE_CORE_H	headers/deng/deng_surface_core.h	/^#define DENG_SURFACE_CORE_H$/;"	d
DENG_SURFACE_WINDOW_H	headers/deng/deng_surface_window.h	/^#define DENG_SURFACE_WINDOW_H$/;"	d
DENG_TRIANGLE_ANGLE_ALPHA	headers/deng/api_core.h	/^    DENG_TRIANGLE_ANGLE_ALPHA = 0,$/;"	e	enum:deng_TriangleAngleType
DENG_TRIANGLE_ANGLE_BETA	headers/deng/api_core.h	/^    DENG_TRIANGLE_ANGLE_BETA = 1,$/;"	e	enum:deng_TriangleAngleType
DENG_TRIANGLE_ANGLE_GAMMA	headers/deng/api_core.h	/^    DENG_TRIANGLE_ANGLE_GAMMA = 2$/;"	e	enum:deng_TriangleAngleType
DENG_VK_DEBUG_UTILS_EXT_NAME	headers/deng/vulkan_handler.h	/^#define DENG_VK_DEBUG_UTILS_EXT_NAME /;"	d
DENG_VK_WIN32_SURFACE_EXT_NAME	headers/deng/vulkan_handler.h	/^#define DENG_VK_WIN32_SURFACE_EXT_NAME /;"	d
DENG_VK_WSI_EXT_NAME	headers/deng/vulkan_handler.h	/^#define DENG_VK_WSI_EXT_NAME /;"	d
DENG_VK_XLIB_SURFACE_EXT_NAME	headers/deng/vulkan_handler.h	/^#define DENG_VK_XLIB_SURFACE_EXT_NAME /;"	d
DENG_WIN32_CLASS_NAME	headers/deng/deng_surface_window.h	/^        #define DENG_WIN32_CLASS_NAME /;"	d
DENG_WINDOW_HINT_FULL_SCREEN	headers/deng/api_core.h	/^#define DENG_WINDOW_HINT_FULL_SCREEN /;"	d
DENG_WINDOW_HINT_NO_CURSOR_HIDE	headers/deng/api_core.h	/^#define DENG_WINDOW_HINT_NO_CURSOR_HIDE /;"	d
DENG_WINDOW_HINT_NO_MOUSE_LOCK	headers/deng/api_core.h	/^#define DENG_WINDOW_HINT_NO_MOUSE_LOCK /;"	d
DENG_WINDOW_HINT_WINDOWED	headers/deng/api_core.h	/^#define DENG_WINDOW_HINT_WINDOWED /;"	d
DENG_WINDOW_MODE_BORDERLESS	headers/deng/deng_surface_window.h	/^    DENG_WINDOW_MODE_BORDERLESS     = 2,$/;"	e	enum:deng_SurfaceWindowMode
DENG_WINDOW_MODE_FIXED	headers/deng/deng_surface_window.h	/^    DENG_WINDOW_MODE_FIXED          = 0,$/;"	e	enum:deng_SurfaceWindowMode
DENG_WINDOW_MODE_FLEXIBLE	headers/deng/deng_surface_window.h	/^    DENG_WINDOW_MODE_FLEXIBLE       = 3$/;"	e	enum:deng_SurfaceWindowMode
DENG_WINDOW_MODE_FULL_SCREEN	headers/deng/deng_surface_window.h	/^    DENG_WINDOW_MODE_FULL_SCREEN    = 1,$/;"	e	enum:deng_SurfaceWindowMode
DescriptorCreator	headers/deng/renderer.h	/^    class DescriptorCreator : private VulkanDescriptorInfo {$/;"	c	namespace:deng
DescriptorCreator	src/deng/renderer.cpp	/^    DescriptorCreator::DescriptorCreator ($/;"	f	class:deng::DescriptorCreator
DrawCaller	headers/deng/renderer.h	/^    class DrawCaller {$/;"	c	namespace:deng
DrawCaller	src/deng/renderer.cpp	/^    DrawCaller::DrawCaller ($/;"	f	class:deng::DrawCaller
Drawing simple 2D objects	docs/getting-started.md	/^## Drawing simple 2D objects $/;"	s
DropDownMenu	headers/dengui/dengui_window.h	/^    class DropDownMenu {$/;"	c	namespace:dengui
ELEMENT_COLOR_MODE_TEXTURE_MAPPED	headers/dengui/dengui_events.h	/^        ELEMENT_COLOR_MODE_TEXTURE_MAPPED   = 1$/;"	e	enum:dengui::ElementColorMode
ELEMENT_COLOR_MODE_UNMAPPED	headers/dengui/dengui_events.h	/^        ELEMENT_COLOR_MODE_UNMAPPED         = 0,$/;"	e	enum:dengui::ElementColorMode
ERRME	headers/deng/err_def.h	/^    #define ERRME(/;"	d
ERR_DEF_H	headers/deng/err_def.h	/^#define ERR_DEF_H$/;"	d
EVENTS_H	headers/deng/events.h	/^#define EVENTS_H$/;"	d
EVENT_MASKS	headers/deng/deng_surface_window.h	/^    #define EVENT_MASKS /;"	d
ElementColorMode	headers/dengui/dengui_events.h	/^    enum ElementColorMode {$/;"	g	namespace:dengui
Enabling debug mode	BUILD.md	/^### Enabling debug mode$/;"	S
EventInfo	headers/dengui/dengui_events.h	/^    struct EventInfo {$/;"	s	namespace:dengui
Events	headers/deng/events.h	/^    class Events$/;"	c	namespace:dengMath
Events	headers/dengui/dengui_events.h	/^    class Events {$/;"	c	namespace:dengui
Events	src/deng/events.cpp	/^    Events::Events(deng::WindowWrap *p_win, deng::Camera *p_camera) {$/;"	f	class:dengMath::Events
Events	src/dengui/dengui_events.cpp	/^    Events::Events(EventInfo &ev_info) {$/;"	f	class:dengui::Events
FONT_ERR	headers/deng/err_def.h	/^#define FONT_ERR(/;"	d
FORWARD_DEC_H	headers/deng/forward_dec.h	/^#define FORWARD_DEC_H$/;"	d
Final code	docs/getting-started.md	/^### Final code$/;"	S
GNU/Linux dependencies	BUILD.md	/^## GNU\/Linux dependencies$/;"	s
GRID_GENERATOR_H	headers/utils/grid_generator.h	/^#define GRID_GENERATOR_H$/;"	d
GUI_BINDINGS_H	headers/dengui/map_editor_ui.h	/^#define GUI_BINDINGS_H$/;"	d
Generating 2D shape assets	docs/getting-started.md	/^### Generating 2D shape assets$/;"	S
Getting started with DENG	docs/getting-started.md	/^# Getting started with DENG$/;"	c
GridManager	headers/utils/grid_generator.h	/^    class GridManager {$/;"	c	namespace:dengUtils
GridManager	src/utils/grid_generator.cpp	/^    GridManager::GridManager(dengUtils::SpecifiedObject *grid, const float &max_distance, float /;"	f	class:dengUtils::GridManager
HASHMAP_H	headers/common/hashmap.h	/^#define HASHMAP_H$/;"	d
HardwareSpecs	headers/deng/rend_helpers.h	/^    struct HardwareSpecs {$/;"	s	namespace:deng
HashData	headers/common/hashmap.h	/^typedef struct HashData {$/;"	s
HashData	headers/common/hashmap.h	/^} HashData;$/;"	t	typeref:struct:HashData
Hashmap	headers/common/hashmap.h	/^typedef struct Hashmap {$/;"	s
Hashmap	headers/common/hashmap.h	/^} Hashmap;$/;"	t	typeref:struct:Hashmap
IMAGE_FORMAT_BMP	headers/das/data_loader.h	/^    IMAGE_FORMAT_BMP = 0,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_JPG	headers/das/data_loader.h	/^    IMAGE_FORMAT_JPG = 3,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_PNG	headers/das/data_loader.h	/^    IMAGE_FORMAT_PNG = 2,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_TGA	headers/das/data_loader.h	/^    IMAGE_FORMAT_TGA = 1,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_UNKNOWN	headers/das/data_loader.h	/^    IMAGE_FORMAT_UNKNOWN = 4$/;"	e	enum:ImageFormat
INCL_PATH	Makefile	/^INCL_PATH = -I \/usr\/include\/freetype2 \\$/;"	m
INDICES_HEADER_NAME	headers/das/das_handler.h	/^#define INDICES_HEADER_NAME /;"	d
INDX_HDR	docs/das.md	/^## INDX_HDR  $/;"	s
INDX_HDR	headers/das/hdr_data.h	/^typedef struct INDX_HDR {$/;"	s
INDX_HDR	headers/das/hdr_data.h	/^} INDX_HDR;$/;"	t	typeref:struct:INDX_HDR
INFO_HDR	docs/das.md	/^## INFO_HDR  $/;"	s
INFO_HDR	headers/das/hdr_data.h	/^typedef struct INFO_HDR {$/;"	s
INFO_HDR	headers/das/hdr_data.h	/^} INFO_HDR;$/;"	t	typeref:struct:INFO_HDR
INFO_HEADER_NAME	headers/das/das_handler.h	/^#define INFO_HEADER_NAME /;"	d
ImageFormat	headers/das/data_loader.h	/^typedef enum ImageFormat {$/;"	g
ImageFormat	headers/das/data_loader.h	/^} ImageFormat;$/;"	t	typeref:enum:ImageFormat
Includes	docs/getting-started.md	/^### Includes$/;"	S
IndexSet	headers/das/data_loader.h	/^    typedef struct IndexSet {$/;"	s
IndexSet	headers/das/data_loader.h	/^    } IndexSet;$/;"	t	typeref:struct:IndexSet
InstanceCreator	headers/deng/renderer.h	/^    class InstanceCreator : private VulkanInstanceInfo, private VulkanDeviceInfo {$/;"	c	namespace:deng
InstanceCreator	src/deng/renderer.cpp	/^    InstanceCreator::InstanceCreator ($/;"	f	class:deng::InstanceCreator
KB_KEY	headers/deng/deng_surface_window.h	/^#define KB_KEY /;"	d
KEY_VECTOR_H	headers/deng/key_vector.h	/^#define KEY_VECTOR_H$/;"	d
LIBDENG_OBJ	Makefile	/^LIBDENG_OBJ = $(BUILD_DIR)\/obj\/libdeng\/camera.cpp.o \\$/;"	m
LIBDENG_TARGET	Makefile	/^LIBDENG_TARGET = $(BUILD_DIR)\/deng\/lib\/libdeng.so$/;"	m
LIB_PATH	Makefile	/^LIB_PATH = -L build\/deng\/lib$/;"	m
LOADER_H	headers/das/data_loader.h	/^#define LOADER_H$/;"	d
LOG	headers/deng/err_def.h	/^    #define LOG(/;"	d
MAIN_H	headers/das/dam.h	/^#define MAIN_H$/;"	d
MATH_ERR	headers/deng/err_def.h	/^#define MATH_ERR(/;"	d
MAX_MOUSE_PTR_DISTANCE_FROM_BORDER	headers/deng/deng_surface_window.h	/^#define MAX_MOUSE_PTR_DISTANCE_FROM_BORDER /;"	d
MEM_ERR	headers/deng/err_def.h	/^#define MEM_ERR(/;"	d
MOUSE_BUTTON	headers/deng/deng_surface_window.h	/^#define MOUSE_BUTTON /;"	d
MapEditor	headers/dengui/map_editor_ui.h	/^    class MapEditor {$/;"	c	namespace:dengui
MapEditor	src/dengui/map_editor_ui.cpp	/^    MapEditor::MapEditor ($/;"	f	class:dengui::MapEditor
Model formats	README.md	/^### Model formats$/;"	S
ModelMatrix	headers/deng/deng_math.h	/^    class ModelMatrix {$/;"	c	namespace:dengMath
ModelMatrix	src/deng/deng_math.cpp	/^    ModelMatrix::ModelMatrix() {$/;"	f	class:dengMath::ModelMatrix
MouseInputInfo	headers/dengui/dengui_events.h	/^    struct MouseInputInfo {$/;"	s	namespace:dengui
OBJ	src/das/Makefile	/^OBJ = das_handler.c.o \\$/;"	m
Object and texture formats	README.md	/^## Object and texture formats$/;"	s
PI	headers/deng/deng_math.h	/^#define PI /;"	d
PS! There is absolutely no guarantee that this configuration would work on Windows, since I have not managed to successfully build DENG for Windows yet.	BUILD.md	/^### PS! There is absolutely no guarantee that this configuration would work on Windows, since I /;"	S
PipelineCreateinfoSpecifiers	headers/deng/rend_helpers.h	/^    struct PipelineCreateinfoSpecifiers {$/;"	s	namespace:deng
PipelineCreator	headers/deng/rend_helpers.h	/^    class PipelineCreator : private VulkanDeviceInfo, private PipelineCreateinfoSpecifiers {$/;"	c	namespace:deng
PipelineCreator	src/deng/rend_helpers.cpp	/^    PipelineCreator::PipelineCreator ($/;"	f	class:deng::PipelineCreator
PipelineData	headers/deng/rend_helpers.h	/^    struct PipelineData {$/;"	s	namespace:deng
ProjectionMatrix	headers/deng/deng_math.h	/^    class ProjectionMatrix {$/;"	c	namespace:dengMath
ProjectionMatrix	src/deng/deng_math.cpp	/^    ProjectionMatrix::ProjectionMatrix(const float &FOV, const float &near_plane, const float &f/;"	f	class:dengMath::ProjectionMatrix
PushButtonInfo	headers/dengui/dengui_child.h	/^    struct PushButtonInfo {$/;"	s	namespace:dengui
QueueFamilyFinder	headers/deng/rend_helpers.h	/^    class QueueFamilyFinder {$/;"	c	namespace:deng
REC_INDEX	src/main/sandbox_shape.cpp	/^#define REC_INDEX /;"	d	file:
REC_ORIGIN_VERTEX_BOTTOM_LEFT	headers/dengui/dengui_window.h	/^        REC_ORIGIN_VERTEX_BOTTOM_LEFT    = 2,$/;"	e	enum:dengui::RectangleOrigin
REC_ORIGIN_VERTEX_BOTTOM_RIGHT	headers/dengui/dengui_window.h	/^        REC_ORIGIN_VERTEX_BOTTOM_RIGHT   = 3$/;"	e	enum:dengui::RectangleOrigin
REC_ORIGIN_VERTEX_TOP_LEFT	headers/dengui/dengui_window.h	/^        REC_ORIGIN_VERTEX_TOP_LEFT       = 0,$/;"	e	enum:dengui::RectangleOrigin
REC_ORIGIN_VERTEX_TOP_RIGHT	headers/dengui/dengui_window.h	/^        REC_ORIGIN_VERTEX_TOP_RIGHT      = 1,$/;"	e	enum:dengui::RectangleOrigin
RELEASE_KEYS	headers/deng/deng_surface_window.h	/^#define RELEASE_KEYS /;"	d
RENDERER_H	headers/deng/renderer.h	/^#define RENDERER_H$/;"	d
REND_HELPERS_H	headers/deng/rend_helpers.h	/^#define REND_HELPERS_H$/;"	d
REND_UTILS_H	headers/utils/font.h	/^#define REND_UTILS_H$/;"	d
RectangleGenerator	headers/utils/shapes.h	/^    class RectangleGenerator : private BorderGenerator, AssetMaker2D {$/;"	c	namespace:dengUtils
RectangleGenerator	src/utils/shapes.cpp	/^    RectangleGenerator::RectangleGenerator ($/;"	f	class:dengUtils::RectangleGenerator
RectangleOrigin	headers/dengui/dengui_window.h	/^    enum RectangleOrigin {$/;"	g	namespace:dengui
Renderer	headers/deng/renderer.h	/^    class Renderer {   $/;"	c	namespace:deng
Renderer	src/deng/renderer.cpp	/^    Renderer::Renderer(WindowWrap *p_win) { m_p_ww = p_win; }$/;"	f	class:deng::Renderer
ResourceAllocator	headers/deng/renderer.h	/^    class ResourceAllocator : private VulkanResourceInfo {$/;"	c	namespace:deng
ResourceAllocator	src/deng/renderer.cpp	/^    ResourceAllocator::ResourceAllocator ($/;"	f	class:deng::ResourceAllocator
SANDBOXAPP_OBJ	Makefile	/^SANDBOXAPP_OBJ = $(BUILD_DIR)\/obj\/sandboxapp\/sandbox_3d.cpp.o$/;"	m
SANDBOXAPP_TARGET	Makefile	/^SANDBOXAPP_TARGET = $(BUILD_DIR)\/deng\/sandboxapp$/;"	m
SANDBOX_BACKGROUND	src/main/sandbox_3d.cpp	/^#define SANDBOX_BACKGROUND /;"	d	file:
SANDBOX_BACKGROUND	src/main/sandbox_shape.cpp	/^#define SANDBOX_BACKGROUND /;"	d	file:
SCCleanup	src/deng/renderer.cpp	/^    void SwapChainCreator::SCCleanup() {$/;"	f	class:deng::SwapChainCreator	typeref:typename:void
SECONDS_IN_FEBRUARY	headers/das/dam.h	/^#define SECONDS_IN_FEBRUARY /;"	d
SECONDS_IN_LEAP_YEAR_FEBRUARY	headers/das/dam.h	/^#define SECONDS_IN_LEAP_YEAR_FEBRUARY /;"	d
SECONDS_PER_30_DAY_MONTH	headers/das/dam.h	/^#define SECONDS_PER_30_DAY_MONTH /;"	d
SECONDS_PER_31_DAY_MONTH	headers/das/dam.h	/^#define SECONDS_PER_31_DAY_MONTH /;"	d
SECONDS_PER_LEAP_YEAR	headers/das/dam.h	/^#define SECONDS_PER_LEAP_YEAR /;"	d
SECONDS_PER_YEAR	headers/das/dam.h	/^#define SECONDS_PER_YEAR /;"	d
SHAPE_REC_H	headers/utils/shapes.h	/^#define SHAPE_REC_H$/;"	d
Setting hints for renderer	docs/getting-started.md	/^### Setting hints for renderer$/;"	S
SharedWindowUpdateInfos	headers/dengui/dengui_window.h	/^    struct SharedWindowUpdateInfos {$/;"	s	namespace:dengui
StringRasterizer	headers/utils/font.h	/^    class StringRasterizer {$/;"	c	namespace:dengUtils
StringRasterizer	src/utils/font.cpp	/^    StringRasterizer::StringRasterizer ($/;"	f	class:dengUtils::StringRasterizer
Submit assets and finish renderer initialisation	docs/getting-started.md	/^### Submit assets and finish renderer initialisation$/;"	S
SwapChainCreator	headers/deng/renderer.h	/^    class SwapChainCreator : private VulkanSwapChainInfo, private VulkanDeviceInfo {$/;"	c	namespace:deng
SwapChainCreator	src/deng/renderer.cpp	/^    SwapChainCreator::SwapChainCreator ($/;"	f	class:deng::SwapChainCreator
SwapChainDetails	headers/deng/rend_helpers.h	/^    class SwapChainDetails {$/;"	c	namespace:deng
SwapChainDetails	src/deng/rend_helpers.cpp	/^    SwapChainDetails::SwapChainDetails ($/;"	f	class:deng::SwapChainDetails
TARGET	src/das/Makefile	/^TARGET = dam$/;"	m
TEXTURE_MAPPED_FRAG_SHADER	headers/deng/renderer.h	/^        #define TEXTURE_MAPPED_FRAG_SHADER /;"	d
TEXTURE_MAPPED_VERT_SHADER_2D	headers/deng/renderer.h	/^        #define TEXTURE_MAPPED_VERT_SHADER_2D /;"	d
TEXTURE_MAPPED_VERT_SHADER_3D	headers/deng/renderer.h	/^        #define TEXTURE_MAPPED_VERT_SHADER_3D /;"	d
TEXTURE_MAPPPED_NORM_VERT_SHADER_3D	headers/deng/renderer.h	/^        #define TEXTURE_MAPPPED_NORM_VERT_SHADER_3D /;"	d
TGAColorMapHeader	headers/das/hdr_data.h	/^typedef struct TGAColorMapHeader {$/;"	s
TGAColorMapHeader	headers/das/hdr_data.h	/^} TGAColorMapHeader;$/;"	t	typeref:struct:TGAColorMapHeader
TGAInfoHeader	headers/das/hdr_data.h	/^typedef struct TGAInfoHeader {$/;"	s
TGAInfoHeader	headers/das/hdr_data.h	/^} TGAInfoHeader;$/;"	t	typeref:struct:TGAInfoHeader
TGATypeHeader	headers/das/hdr_data.h	/^typedef struct TGATypeHeader {$/;"	s
TGATypeHeader	headers/das/hdr_data.h	/^} TGATypeHeader;$/;"	t	typeref:struct:TGATypeHeader
TIMER_H	headers/utils/timer.h	/^#define TIMER_H$/;"	d
TM2D_I	headers/deng/renderer.h	/^        #define TM2D_I /;"	d
TM3D_NOR_I	headers/deng/renderer.h	/^        #define TM3D_NOR_I /;"	d
TM3D_UNOR_I	headers/deng/renderer.h	/^        #define TM3D_UNOR_I /;"	d
TO_HELP	headers/das/dam.h	/^#define TO_HELP /;"	d
TRI_INDEX	src/main/sandbox_shape.cpp	/^#define TRI_INDEX /;"	d	file:
Table of contents	docs/getting-started.md	/^## Table of contents$/;"	s
Texture formats	README.md	/^### Texture formats$/;"	S
TextureImageData	headers/deng/rend_helpers.h	/^    struct TextureImageData {$/;"	s	namespace:deng
Timer	headers/utils/timer.h	/^    class Timer {$/;"	c	namespace:dengUtils
Timer	src/utils/timer.cpp	/^    Timer::Timer() {$/;"	f	class:dengUtils::Timer
TriangleGenerator	headers/utils/shapes.h	/^    class TriangleGenerator : private BorderGenerator, private AssetMaker2D {$/;"	c	namespace:dengUtils
TriangleGenerator	src/utils/shapes.cpp	/^    TriangleGenerator::TriangleGenerator ($/;"	f	class:dengUtils::TriangleGenerator
UM2D_I	headers/deng/renderer.h	/^        #define UM2D_I /;"	d
UM3D_NOR_I	headers/deng/renderer.h	/^        #define UM3D_NOR_I /;"	d
UM3D_UNOR_I	headers/deng/renderer.h	/^        #define UM3D_UNOR_I /;"	d
UNI_OFFSET	headers/das/assets.h	/^typedef struct UNI_OFFSET {$/;"	s
UNI_OFFSET	headers/das/assets.h	/^} UNI_OFFSET;$/;"	t	typeref:struct:UNI_OFFSET
UNMAPPED_FRAG_SHADER	headers/deng/renderer.h	/^        #define UNMAPPED_FRAG_SHADER /;"	d
UNMAPPED_NORM_VERT_SHADER_3D	headers/deng/renderer.h	/^        #define UNMAPPED_NORM_VERT_SHADER_3D /;"	d
UNMAPPED_VERT_SHADER_2D	headers/deng/renderer.h	/^        #define UNMAPPED_VERT_SHADER_2D /;"	d
UNMAPPED_VERT_SHADER_3D	headers/deng/renderer.h	/^        #define UNMAPPED_VERT_SHADER_3D /;"	d
UniformData	headers/deng/deng_math.h	/^    struct UniformData {$/;"	s	namespace:dengMath
VERTICES_HEADER_NAME	headers/das/das_handler.h	/^#define VERTICES_HEADER_NAME /;"	d
VERT_HDR	docs/das.md	/^## VERT_HDR  $/;"	s
VERT_HDR	headers/das/hdr_data.h	/^typedef struct VERT_HDR {$/;"	s
VERT_HDR	headers/das/hdr_data.h	/^} VERT_HDR;$/;"	t	typeref:struct:VERT_HDR
VERT_MAPPED_2D	headers/das/assets.h	/^typedef struct VERT_MAPPED_2D {$/;"	s
VERT_MAPPED_2D	headers/das/assets.h	/^} VERT_MAPPED_2D;$/;"	t	typeref:struct:VERT_MAPPED_2D
VERT_MAPPED_NOR	headers/das/assets.h	/^typedef struct VERT_MAPPED_NOR {$/;"	s
VERT_MAPPED_NOR	headers/das/assets.h	/^} VERT_MAPPED_NOR;$/;"	t	typeref:struct:VERT_MAPPED_NOR
VERT_MAPPED_UNOR	headers/das/assets.h	/^typedef struct VERT_MAPPED_UNOR {$/;"	s
VERT_MAPPED_UNOR	headers/das/assets.h	/^} VERT_MAPPED_UNOR;$/;"	t	typeref:struct:VERT_MAPPED_UNOR
VERT_UNMAPPED_2D	headers/das/assets.h	/^typedef struct VERT_UNMAPPED_2D {$/;"	s
VERT_UNMAPPED_2D	headers/das/assets.h	/^} VERT_UNMAPPED_2D;$/;"	t	typeref:struct:VERT_UNMAPPED_2D
VERT_UNMAPPED_NOR	headers/das/assets.h	/^typedef struct VERT_UNMAPPED_NOR {$/;"	s
VERT_UNMAPPED_NOR	headers/das/assets.h	/^} VERT_UNMAPPED_NOR;$/;"	t	typeref:struct:VERT_UNMAPPED_NOR
VERT_UNMAPPED_UNOR	headers/das/assets.h	/^typedef struct VERT_UNMAPPED_UNOR {$/;"	s
VERT_UNMAPPED_UNOR	headers/das/assets.h	/^} VERT_UNMAPPED_UNOR;$/;"	t	typeref:struct:VERT_UNMAPPED_UNOR
VK_BUFFER_ERR	headers/deng/err_def.h	/^#define VK_BUFFER_ERR(/;"	d
VK_DESC_ERR	headers/deng/err_def.h	/^#define VK_DESC_ERR(/;"	d
VK_DRAWCMD_ERR	headers/deng/err_def.h	/^#define VK_DRAWCMD_ERR(/;"	d
VK_FRAME_ERR	headers/deng/err_def.h	/^#define VK_FRAME_ERR(/;"	d
VK_GEN_ERR	headers/deng/err_def.h	/^#define VK_GEN_ERR(/;"	d
VK_INSTANCE_ERR	headers/deng/err_def.h	/^#define VK_INSTANCE_ERR(/;"	d
VK_PIPELINEC_ERR	headers/deng/err_def.h	/^#define VK_PIPELINEC_ERR(/;"	d
VK_RES_ERR	headers/deng/err_def.h	/^#define VK_RES_ERR(/;"	d
VK_SWAPCHAIN_ERR	headers/deng/err_def.h	/^#define VK_SWAPCHAIN_ERR(/;"	d
VK_USE_PLATFORM_WIN32_KHR	headers/deng/deng_surface_core.h	/^    #define VK_USE_PLATFORM_WIN32_KHR /;"	d
VK_VAL_LAYER	headers/deng/err_def.h	/^#define VK_VAL_LAYER(/;"	d
VULKAN_HANDLER_H	headers/deng/vulkan_handler.h	/^#define VULKAN_HANDLER_H$/;"	d
ViewMatrix	headers/deng/deng_math.h	/^    class ViewMatrix {$/;"	c	namespace:dengMath
ViewMatrix	src/deng/deng_math.cpp	/^    ViewMatrix::ViewMatrix() {$/;"	f	class:dengMath::ViewMatrix
VulkanDescriptorInfo	headers/deng/renderer.h	/^    struct VulkanDescriptorInfo {$/;"	s	namespace:deng
VulkanDeviceInfo	headers/deng/rend_helpers.h	/^    struct VulkanDeviceInfo {$/;"	s	namespace:deng
VulkanInstanceInfo	headers/deng/renderer.h	/^    struct VulkanInstanceInfo {$/;"	s	namespace:deng
VulkanResourceInfo	headers/deng/renderer.h	/^    struct VulkanResourceInfo {$/;"	s	namespace:deng
VulkanSwapChainInfo	headers/deng/renderer.h	/^    struct VulkanSwapChainInfo {$/;"	s	namespace:deng
WARNME	headers/deng/err_def.h	/^    #define WARNME(/;"	d
WIN32_WINDOW	headers/deng/deng_surface_window.h	/^#define WIN32_WINDOW /;"	d
WINDOWS_H	headers/deng/window.h	/^#define WINDOWS_H$/;"	d
WINDOW_BORDER_HEAVY	headers/dengui/dengui_window.h	/^        WINDOW_BORDER_HEAVY     = 7    $/;"	e	enum:dengui::WindowBorder
WINDOW_BORDER_LIGHT	headers/dengui/dengui_window.h	/^        WINDOW_BORDER_LIGHT     = 2,$/;"	e	enum:dengui::WindowBorder
WINDOW_BORDER_MEDIUM	headers/dengui/dengui_window.h	/^        WINDOW_BORDER_MEDIUM    = 4,$/;"	e	enum:dengui::WindowBorder
WINDOW_BORDER_NONE	headers/dengui/dengui_window.h	/^        WINDOW_BORDER_NONE      = 0,$/;"	e	enum:dengui::WindowBorder
WINDOW_TYPE_FLOATING	headers/dengui/dengui_window.h	/^        WINDOW_TYPE_FLOATING        = 0,$/;"	e	enum:dengui::WindowType
WINDOW_TYPE_STATIC_BOTTOM	headers/dengui/dengui_window.h	/^        WINDOW_TYPE_STATIC_BOTTOM   = 4$/;"	e	enum:dengui::WindowType
WINDOW_TYPE_STATIC_LEFT	headers/dengui/dengui_window.h	/^        WINDOW_TYPE_STATIC_LEFT     = 2,$/;"	e	enum:dengui::WindowType
WINDOW_TYPE_STATIC_RIGHT	headers/dengui/dengui_window.h	/^        WINDOW_TYPE_STATIC_RIGHT    = 1,$/;"	e	enum:dengui::WindowType
WINDOW_TYPE_STATIC_TOP	headers/dengui/dengui_window.h	/^        WINDOW_TYPE_STATIC_TOP      = 3,$/;"	e	enum:dengui::WindowType
Window	headers/dengui/dengui_window.h	/^    class Window : private BaseWindowShapes{$/;"	c	namespace:dengui
Window	src/dengui/dengui_window.cpp	/^    Window::Window ($/;"	f	class:dengui::Window
WindowBorder	headers/dengui/dengui_window.h	/^    enum WindowBorder {$/;"	g	namespace:dengui
WindowElement	headers/dengui/dengui_window.h	/^    struct WindowElement {$/;"	s	namespace:dengui
WindowID	headers/dengui/dengui_window.h	/^typedef deng_ui32_t WindowID;$/;"	t	typeref:typename:deng_ui32_t
WindowInfo	headers/dengui/dengui_window.h	/^    struct WindowInfo {$/;"	s	namespace:dengui
WindowInfo	src/dengui/dengui_window.cpp	/^    WindowInfo::WindowInfo() {$/;"	f	class:dengui::WindowInfo
WindowShapeInfo	headers/dengui/dengui_window.h	/^    struct WindowShapeInfo {$/;"	s	namespace:dengui
WindowType	headers/dengui/dengui_window.h	/^    enum WindowType {$/;"	g	namespace:dengui
WindowUpdateInfo	headers/dengui/dengui_window.h	/^    struct WindowUpdateInfo {$/;"	s	namespace:dengui
WindowWrap	headers/deng/window.h	/^    class WindowWrap$/;"	c	namespace:deng
WindowWrap	src/deng/window.cpp	/^    WindowWrap::WindowWrap ($/;"	f	class:deng::WindowWrap
Windows dependencies	BUILD.md	/^## Windows dependencies$/;"	s
X11_WINDOW	headers/deng/deng_surface_window.h	/^#define X11_WINDOW /;"	d
_BSD_SOURCE	headers/deng/deng_surface_core.h	/^    #define _BSD_SOURCE$/;"	d
__CAMERA_LOCATION_DEBUG	headers/deng/api_core.h	/^#define __CAMERA_LOCATION_DEBUG /;"	d
__CAMERA_MOUSE_DEBUG	headers/deng/api_core.h	/^#define __CAMERA_MOUSE_DEBUG /;"	d
__DENGUI_USAGE	src/dengui/dengui_window.cpp	/^#define __DENGUI_USAGE /;"	d	file:
__DENG_API_CORE	headers/deng/api_core.h	/^#define __DENG_API_CORE$/;"	d
__DENG_API_CORE	src/deng/renderer.cpp	/^#define __DENG_API_CORE$/;"	d	file:
__DENG_USE_GUI	src/dengui/map_editor_ui.cpp	/^#define __DENG_USE_GUI$/;"	d	file:
__ErrorHandler	src/deng/x11_surface.c	/^int __ErrorHandler ($/;"	f	typeref:typename:int
__GENERIC_DEBUG	headers/deng/api_core.h	/^#define __GENERIC_DEBUG /;"	d
__HASHMAP_USE	src/common/hashmap.c	/^#define __HASHMAP_USE$/;"	d	file:
__HandleKeyEvents	src/deng/x11_surface.c	/^static void __HandleKeyEvents(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void	file:
__HandleMouseEvents	src/deng/x11_surface.c	/^static void __HandleMouseEvents(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void	file:
__SetCursor	src/deng/x11_surface.c	/^static void __SetCursor ($/;"	f	typeref:typename:void	file:
active_btn	headers/dengui/dengui_events.h	/^        deng_MouseButton *active_btn;$/;"	m	struct:dengui::MouseInputInfo	typeref:typename:deng_MouseButton *
active_btn_c	headers/dengui/dengui_events.h	/^        deng_i32_t active_btn_c;$/;"	m	struct:dengui::MouseInputInfo	typeref:typename:deng_i32_t
active_keys	headers/deng/deng_surface_window.h	/^    deng_ActiveKeys active_keys;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:deng_ActiveKeys
add	headers/deng/deng_math.h	/^        void add(const T &element, const size_t &index) {$/;"	f	struct:dengMath::vec2	typeref:typename:void
add	headers/deng/deng_math.h	/^        void add(const T &element, const size_t &index) {$/;"	f	struct:dengMath::vec3	typeref:typename:void
add	headers/deng/deng_math.h	/^        void add(const T &element, const size_t &index) {$/;"	f	struct:dengMath::vec4	typeref:typename:void
addRelText	src/dengui/dengui_window.cpp	/^    void BaseWindowShapes::addRelText ($/;"	f	class:dengui::BaseWindowShapes	typeref:typename:void
addToPosition	src/deng/deng_math.cpp	/^    void ViewMatrix::addToPosition(const vec4<float> &movement_speed, const deng_CoordinateAxisT/;"	f	class:dengMath::ViewMatrix	typeref:typename:void
advance	headers/utils/font.h	/^        dengMath::vec2<deng_i32_t> advance;$/;"	m	struct:dengUtils::BitmapGlyphData	typeref:typename:dengMath::vec2<deng_i32_t>
all	Makefile	/^all: .cpy $(SANDBOXAPP_TARGET) $(DAM_TARGET) $(LIBDENG_TARGET)$/;"	t
allocateMemory	src/deng/rend_helpers.cpp	/^    void BufferCreator::allocateMemory ($/;"	f	class:deng::BufferCreator	typeref:typename:void
allocateNewResources	src/dengui/dengui_events.cpp	/^    void Events::allocateNewResources() {$/;"	f	class:dengui::Events	typeref:typename:void
alpha_mask	headers/das/hdr_data.h	/^    deng_ui32_t alpha_mask;$/;"	m	struct:BMPColorHeader	typeref:typename:deng_ui32_t
applyModelMatrix	src/deng/deng_math.cpp	/^    void applyModelMatrix(deng_Asset &asset, mat4<deng_vec_t> matrix) {$/;"	f	namespace:dengMath	typeref:typename:void
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:0
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:1
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:10
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:11
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:12
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:13
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:14
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:15
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:16
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:17
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:18
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:19
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:2
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:20
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:21
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:22
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:23
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:3
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:4
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:5
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:6
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:7
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:8
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:9
ascii_ch	headers/utils/font.h	/^        char ascii_ch;$/;"	m	struct:dengUtils::BitmapChar	typeref:typename:char
asset_c	src/deng/renderer.cpp	/^    static deng_ui16_t asset_c = 0; $/;"	v	namespace:deng	typeref:typename:deng_ui16_t	file:
asset_id	headers/dengui/dengui_window.h	/^        char *asset_id;$/;"	m	struct:dengui::WindowElement	typeref:typename:char *
asset_mode	headers/das/assets.h	/^    deng_AssetMode asset_mode;$/;"	m	struct:deng_Asset	typeref:typename:deng_AssetMode
asset_name	headers/das/hdr_data.h	/^    char *asset_name;$/;"	m	struct:INFO_HDR	typeref:typename:char *
assets	src/main/sandbox_shape.cpp	/^std::vector<deng_Asset> assets(3);$/;"	v	typeref:typename:std::vector<deng_Asset>
atom_kill	src/deng/x11_surface.c	/^static Atom atom_kill;$/;"	v	typeref:typename:Atom	file:
background	headers/dengui/dengui_events.h	/^        dengMath::vec4<float> background;$/;"	m	struct:dengui::EventInfo	typeref:typename:dengMath::vec4<float>
base_indices_size	headers/dengui/dengui_window.h	/^        deng_i32_t base_indices_size;$/;"	m	struct:dengui::WindowElement	typeref:typename:deng_i32_t
base_vert_size	headers/dengui/dengui_window.h	/^        deng_i32_t base_vert_size;$/;"	m	struct:dengui::WindowElement	typeref:typename:deng_i32_t
bearings	headers/utils/font.h	/^        dengMath::vec2<deng_i32_t> bearings;$/;"	m	struct:dengUtils::BitmapGlyphData	typeref:typename:dengMath::vec2<deng_i32_t>
beginCommandBufferSingleCommand	src/deng/rend_helpers.cpp	/^    void CommandBufferRecorder::beginCommandBufferSingleCommand ($/;"	f	class:deng::CommandBufferRecorder	typeref:typename:void
beginEventHandler	src/dengui/dengui_window.cpp	/^    void beginEventHandler ($/;"	f	namespace:dengui	typeref:typename:void
beginWindow	src/dengui/dengui_window.cpp	/^    void beginWindow ($/;"	f	namespace:dengui	typeref:typename:void
bit_count	headers/das/hdr_data.h	/^    deng_ui16_t bit_count;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_ui16_t
bit_count	headers/das/hdr_data.h	/^    deng_ui8_t bit_count;$/;"	m	struct:TGAInfoHeader	typeref:typename:deng_ui8_t
bitmap	headers/utils/font.h	/^        FT_Bitmap bitmap;$/;"	m	struct:dengUtils::BitmapGlyphData	typeref:typename:FT_Bitmap
blue_mask	headers/das/hdr_data.h	/^    deng_ui32_t blue_mask;$/;"	m	struct:BMPColorHeader	typeref:typename:deng_ui32_t
bool_t	headers/deng/deng_surface_window.h	/^#define bool_t /;"	d
border	headers/dengui/dengui_window.h	/^        WindowBorder border;$/;"	m	struct:dengui::WindowInfo	typeref:typename:WindowBorder
box_size	headers/utils/font.h	/^        dengMath::vec2<deng_i32_t> box_size;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:dengMath::vec2<deng_i32_t>
btn_count	headers/deng/deng_surface_window.h	/^    size_t btn_count;$/;"	m	struct:deng_ActiveKeys	typeref:typename:size_t
btn_count	headers/deng/deng_surface_window.h	/^    size_t btn_count;$/;"	m	struct:deng_ReleasedKeys	typeref:typename:size_t
cam_flag_bits	headers/deng/deng_math.h	/^        deng_CameraUniformFlagBits cam_flag_bits;$/;"	m	struct:dengMath::UniformData	typeref:typename:deng_CameraUniformFlagBits
checkForInputModeChange	src/deng/events.cpp	/^    void Events::checkForInputModeChange() {$/;"	f	class:dengMath::Events	typeref:typename:void
checkValidationLayerSupport	src/deng/renderer.cpp	/^    bool InstanceCreator::checkValidationLayerSupport() {$/;"	f	class:deng::InstanceCreator	typeref:typename:bool
child_id	headers/dengui/dengui_window.h	/^        std::string child_id;$/;"	m	struct:dengui::WindowElement	typeref:typename:std::string
clean	Makefile	/^clean:$/;"	t
clean	src/das/Makefile	/^clean:$/;"	t
cleanup	src/deng/renderer.cpp	/^    void Renderer::cleanup() {$/;"	f	class:deng::Renderer	typeref:typename:void
closeBtnCallback	src/dengui/dengui_events.cpp	/^    void closeBtnCallback ($/;"	f	namespace:dengui	typeref:typename:void
cm_CheckMemoryAlloc	src/common/common.c	/^void cm_CheckMemoryAlloc(void *ptr) {$/;"	f	typeref:typename:void
cm_ClearBuffer	src/common/common.c	/^void cm_ClearBuffer(char *str, deng_i32_t len) {$/;"	f	typeref:typename:void
cm_GetFileExtName	src/common/common.c	/^char *cm_GetFileExtName(const char *file_name) {$/;"	f	typeref:typename:char *
cm_LogWrite	src/common/common.c	/^void cm_LogWrite(const char *file_name, const char *content, int rewrite) {$/;"	f	typeref:typename:void
cm_MakeUpperCase	src/common/common.c	/^char *cm_MakeUpperCase(const char *str) {$/;"	f	typeref:typename:char *
cm_SortAlphabetically	src/common/common.c	/^void cm_SortAlphabetically(char **buffer, size_t buffer_count) {$/;"	f	typeref:typename:void
cm_TrimString	src/common/common.c	/^char *cm_TrimString(const char *str, size_t beg_index, size_t end_pos) {$/;"	f	typeref:typename:char *
col_a	headers/das/assets.h	/^    deng_vec_t col_a;$/;"	m	struct:deng_ObjColorData	typeref:typename:deng_vec_t
col_b	headers/das/assets.h	/^    deng_vec_t col_b;$/;"	m	struct:deng_ObjColorData	typeref:typename:deng_vec_t
col_g	headers/das/assets.h	/^    deng_vec_t col_g;$/;"	m	struct:deng_ObjColorData	typeref:typename:deng_vec_t
col_r	headers/das/assets.h	/^    deng_vec_t col_r;$/;"	m	struct:deng_ObjColorData	typeref:typename:deng_vec_t
color_data	headers/das/assets.h	/^    deng_ObjColorData color_data;$/;"	m	struct:VERT_UNMAPPED_2D	typeref:typename:deng_ObjColorData
color_data	headers/das/assets.h	/^    deng_ObjColorData color_data;$/;"	m	struct:VERT_UNMAPPED_NOR	typeref:typename:deng_ObjColorData
color_data	headers/das/assets.h	/^    deng_ObjColorData color_data;$/;"	m	struct:VERT_UNMAPPED_UNOR	typeref:typename:deng_ObjColorData
color_mode	headers/dengui/dengui_window.h	/^        ElementColorMode color_mode;$/;"	m	struct:dengui::WindowElement	typeref:typename:ElementColorMode
color_space_type	headers/das/hdr_data.h	/^    deng_ui32_t color_space_type;$/;"	m	struct:BMPColorHeader	typeref:typename:deng_ui32_t
colormap_length	headers/das/hdr_data.h	/^    deng_ui16_t colormap_length;$/;"	m	struct:TGAColorMapHeader	typeref:typename:deng_ui16_t
colormap_type	headers/das/hdr_data.h	/^    deng_ui8_t colormap_type;$/;"	m	struct:TGATypeHeader	typeref:typename:deng_ui8_t
colors	headers/deng/rend_helpers.h	/^        std::vector<deng_ObjColorData> colors;$/;"	m	struct:deng::BufferData	typeref:typename:std::vector<deng_ObjColorData>
colors_important	headers/das/hdr_data.h	/^    deng_ui32_t colors_important;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_ui32_t
colors_used	headers/das/hdr_data.h	/^    deng_ui32_t colors_used;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_ui32_t
commandpool	headers/dengui/dengui_events.h	/^        VkCommandPool commandpool;$/;"	m	struct:dengui::EventInfo	typeref:typename:VkCommandPool
common.c.o	src/das/Makefile	/^common.c.o: ..\/common\/common.c$/;"	t
compression	headers/das/hdr_data.h	/^    deng_ui32_t compression;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_ui32_t
copyBufferToBuffer	src/deng/rend_helpers.cpp	/^    void BufferCreator::copyBufferToBuffer ($/;"	f	class:deng::BufferCreator	typeref:typename:void
copyBufferToImage	src/deng/rend_helpers.cpp	/^    void BufferCreator::copyBufferToImage ($/;"	f	class:deng::BufferCreator	typeref:typename:void
crc32_table	src/common/hashmap.c	/^static unsigned long crc32_table[] = {$/;"	v	typeref:typename:unsigned long[]	file:
current_frame	headers/deng/renderer.h	/^        size_t current_frame = 0;$/;"	m	class:deng::DrawCaller	typeref:typename:size_t
dam.c.o	src/das/Makefile	/^dam.c.o: dam.c$/;"	t
damAddRepo	src/das/dam.c	/^int damAddRepo ($/;"	f	typeref:typename:int
damAssetAssemblyCaller	src/das/dam.c	/^void damAssetAssemblyCaller ($/;"	f	typeref:typename:void
damCountMonths	src/das/dam.c	/^deng_ui16_t damCountMonths ($/;"	f	typeref:typename:deng_ui16_t
damCountYears	src/das/dam.c	/^deng_ui16_t damCountYears ($/;"	f	typeref:typename:deng_ui16_t
damFormatDate	src/das/dam.c	/^void damFormatDate(char *date, char *time, deng_i64_t time_from_epoch) {$/;"	f	typeref:typename:void
damListAsset	src/das/dam.c	/^void damListAsset (char *asset_file) {$/;"	f	typeref:typename:void
damListLocalRepos	src/das/dam.c	/^void damListLocalRepos ($/;"	f	typeref:typename:void
damSetDefaultRepo	src/das/dam.c	/^void damSetDefaultRepo ($/;"	f	typeref:typename:void
dasAssemble	src/das/das_handler.c	/^void dasAssemble ($/;"	f	typeref:typename:void
dasAssembleINDXHDR	src/das/das_handler.c	/^void dasAssembleINDXHDR ($/;"	f	typeref:typename:void
dasAssembleINFOHDR	src/das/das_handler.c	/^void dasAssembleINFOHDR ($/;"	f	typeref:typename:void
dasAssembleVERTHDR	src/das/das_handler.c	/^void dasAssembleVERTHDR ($/;"	f	typeref:typename:void
dasCleanCharBuffer	src/das/data_loader.c	/^void dasCleanCharBuffer(char *buffer, size_t size) {$/;"	f	typeref:typename:void
dasDestroyAssets	src/das/das_handler.c	/^void dasDestroyAssets ($/;"	f	typeref:typename:void
dasDestroyTextures	src/das/das_handler.c	/^void dasDestroyTextures ($/;"	f	typeref:typename:void
dasDetectImageFormat	src/das/data_loader.c	/^ ImageFormat dasDetectImageFormat(const char *file_name) {$/;"	f	typeref:typename:ImageFormat
dasGetDASFileName	src/das/das_handler.c	/^char *dasGetDASFileName(char *file_name) {$/;"	f	typeref:typename:char *
dasInitBMPimageHeaders	src/das/data_loader.c	/^void dasInitBMPimageHeaders ($/;"	f	typeref:typename:void
dasInitTGAimageHeaders	src/das/data_loader.c	/^void dasInitTGAimageHeaders ($/;"	f	typeref:typename:void
dasLoadBMPimage	src/das/data_loader.c	/^ void dasLoadBMPimage(deng_Texture *p_texture, const char *file_name) {$/;"	f	typeref:typename:void
dasLoadModel	src/das/data_loader.c	/^void dasLoadModel ($/;"	f	typeref:typename:void
dasLoadOBJindices	src/das/data_loader.c	/^void dasLoadOBJindices ($/;"	f	typeref:typename:void
dasLoadOBJmodelVertices	src/das/data_loader.c	/^ void dasLoadOBJmodelVertices ($/;"	f	typeref:typename:void
dasLoadTGAimage	src/das/data_loader.c	/^ void dasLoadTGAimage(deng_Texture *p_asset, const char *file_name) {$/;"	f	typeref:typename:void
dasLoadTexture	src/das/data_loader.c	/^void dasLoadTexture(deng_Texture *p_texture, const char *file_name) {$/;"	f	typeref:typename:void
dasMakeIndexedVertices	src/das/data_loader.c	/^void dasMakeIndexedVertices ($/;"	f	typeref:typename:void
dasReadAsset	src/das/das_handler.c	/^void dasReadAsset ($/;"	f	typeref:typename:void
dasReadINDXHDR	src/das/das_handler.c	/^void dasReadINDXHDR ($/;"	f	typeref:typename:void
dasReadINFOHDR	src/das/das_handler.c	/^void dasReadINFOHDR ($/;"	f	typeref:typename:void
dasReadVERTHDR	src/das/das_handler.c	/^void dasReadVERTHDR ($/;"	f	typeref:typename:void
das_handler.c.o	src/das/Makefile	/^das_handler.c.o: das_handler.c$/;"	t
data	headers/common/hashmap.h	/^    void *data;$/;"	m	struct:ChainData	typeref:typename:void *
data	headers/common/hashmap.h	/^    void *data;$/;"	m	struct:HashData	typeref:typename:void *
data	headers/deng/deng_math.h	/^        T *data() { return &this->first; }$/;"	f	struct:dengMath::vec2	typeref:typename:T *
data	headers/deng/deng_math.h	/^        T *data() { return &this->first; }$/;"	f	struct:dengMath::vec3	typeref:typename:T *
data	headers/deng/deng_math.h	/^        T *data() { return &this->first; }$/;"	f	struct:dengMath::vec4	typeref:typename:T *
data	headers/deng/deng_math.h	/^        T *data() { return &this->row1.first; }$/;"	f	struct:dengMath::mat2	typeref:typename:T *
data	headers/deng/deng_math.h	/^        T *data() { return &this->row1.first; }$/;"	f	struct:dengMath::mat3	typeref:typename:T *
data	headers/deng/deng_math.h	/^        T *data() { return &this->row1.first; }$/;"	f	struct:dengMath::mat3x2	typeref:typename:T *
data	headers/deng/deng_math.h	/^        T *data() { return &this->row1.first; }$/;"	f	struct:dengMath::mat4	typeref:typename:T *
data_loader.c.o	src/das/Makefile	/^data_loader.c.o: data_loader.c$/;"	t
debugCallback	src/deng/renderer.cpp	/^    VKAPI_ATTR VkBool32 VKAPI_CALL InstanceCreator::debugCallback ($/;"	f	class:deng::InstanceCreator	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL
default_cursor	headers/deng/deng_surface_window.h	/^        Cursor default_cursor;$/;"	m	struct:deng_SurfaceX11	typeref:typename:Cursor
degToRad	src/deng/deng_math.cpp	/^    float Conversion::degToRad(const float &deg) {$/;"	f	class:dengMath::Conversion	typeref:typename:float
deng	headers/deng/camera.h	/^namespace deng {$/;"	n
deng	headers/deng/forward_dec.h	/^namespace deng {$/;"	n
deng	headers/deng/rend_helpers.h	/^namespace deng {$/;"	n
deng	headers/deng/renderer.h	/^namespace deng {$/;"	n
deng	headers/deng/window.h	/^namespace deng {   $/;"	n
deng	headers/dengui/dengui.h	/^namespace deng {$/;"	n
deng	src/deng/camera.cpp	/^namespace deng {$/;"	n	file:
deng	src/deng/rend_helpers.cpp	/^namespace deng {$/;"	n	file:
deng	src/deng/renderer.cpp	/^namespace deng {$/;"	n	file:
deng	src/deng/window.cpp	/^namespace deng {$/;"	n	file:
dengMath	headers/deng/deng_math.h	/^namespace dengMath {$/;"	n
dengMath	headers/deng/events.h	/^namespace dengMath {$/;"	n
dengMath	src/deng/deng_math.cpp	/^namespace dengMath {$/;"	n	file:
dengMath	src/deng/events.cpp	/^namespace dengMath {$/;"	n	file:
dengUtils	headers/utils/font.h	/^namespace dengUtils {$/;"	n
dengUtils	headers/utils/grid_generator.h	/^namespace dengUtils {$/;"	n
dengUtils	headers/utils/shapes.h	/^namespace dengUtils {$/;"	n
dengUtils	headers/utils/timer.h	/^namespace dengUtils {$/;"	n
dengUtils	src/utils/font.cpp	/^namespace dengUtils {$/;"	n	file:
dengUtils	src/utils/grid_generator.cpp	/^namespace dengUtils {$/;"	n	file:
dengUtils	src/utils/shapes.cpp	/^namespace dengUtils {$/;"	n	file:
dengUtils	src/utils/timer.cpp	/^namespace dengUtils {$/;"	n	file:
deng_ActiveKeys	headers/deng/deng_surface_window.h	/^typedef struct deng_ActiveKeys {$/;"	s
deng_ActiveKeys	headers/deng/deng_surface_window.h	/^} deng_ActiveKeys;$/;"	t	typeref:struct:deng_ActiveKeys
deng_Asset	headers/das/assets.h	/^typedef struct deng_Asset {$/;"	s
deng_Asset	headers/das/assets.h	/^} deng_Asset;$/;"	t	typeref:struct:deng_Asset
deng_AssetMode	headers/das/assets.h	/^typedef enum deng_AssetMode {$/;"	g
deng_AssetMode	headers/das/assets.h	/^} deng_AssetMode;$/;"	t	typeref:enum:deng_AssetMode
deng_CameraUniformFlagBits	headers/deng/api_core.h	/^typedef deng_ui32_t deng_CameraUniformFlagBits;$/;"	t	typeref:typename:deng_ui32_t
deng_CleanKeyEvents	src/deng/key_vector.c	/^void deng_CleanKeyEvents ($/;"	f	typeref:typename:void
deng_ClearKeyEvent	src/deng/key_vector.c	/^void deng_ClearKeyEvent ( $/;"	f	typeref:typename:void
deng_CoordinateAxisType	headers/deng/api_core.h	/^enum deng_CoordinateAxisType {$/;"	g
deng_DestroyWindow	src/deng/win32_surface.c	/^void deng_DestroyWindow(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void
deng_DestroyWindow	src/deng/x11_surface.c	/^void deng_DestroyWindow(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void
deng_FindKeyIndex	src/deng/key_vector.c	/^size_t deng_FindKeyIndex ($/;"	f	typeref:typename:size_t
deng_FreeKeyData	src/deng/key_vector.c	/^void deng_FreeKeyData(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void
deng_GetMousePos	src/deng/win32_surface.c	/^void deng_GetMousePos ($/;"	f	typeref:typename:void
deng_GetMousePos	src/deng/x11_surface.c	/^void deng_GetMousePos ($/;"	f	typeref:typename:void
deng_GetRequiredVKSurfaceExt	src/deng/vulkan_handler.c	/^const char **deng_GetRequiredVKSurfaceExt(deng_SurfaceWindow *p_window, deng_ui32_t *p_count, bo/;"	f	typeref:typename:const char **
deng_IndicesDynamic	headers/das/assets.h	/^typedef struct deng_IndicesDynamic {$/;"	s
deng_IndicesDynamic	headers/das/assets.h	/^} deng_IndicesDynamic;$/;"	t	typeref:struct:deng_IndicesDynamic
deng_InitKeyData	src/deng/key_vector.c	/^void deng_InitKeyData(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void
deng_InitVKSurface	src/deng/vulkan_handler.c	/^VkResult deng_InitVKSurface(deng_SurfaceWindow *p_window, VkInstance *p_instance, VkSurfaceKHR */;"	f	typeref:typename:VkResult
deng_InitVKSurfaceWindow	src/deng/win32_surface.c	/^deng_SurfaceWindow *deng_InitVKSurfaceWindow ($/;"	f	typeref:typename:deng_SurfaceWindow *
deng_InitVKSurfaceWindow	src/deng/x11_surface.c	/^deng_SurfaceWindow *deng_InitVKSurfaceWindow ($/;"	f	typeref:typename:deng_SurfaceWindow *
deng_InputMode	headers/deng/api_core.h	/^enum deng_InputMode {$/;"	g
deng_IsKeyActive	src/deng/key_vector.c	/^int deng_IsKeyActive ($/;"	f	typeref:typename:int
deng_IsKeyReleased	src/deng/key_vector.c	/^int deng_IsKeyReleased ($/;"	f	typeref:typename:int
deng_IsMouseBtnActive	src/deng/key_vector.c	/^int deng_IsMouseBtnActive ($/;"	f	typeref:typename:int
deng_IsMouseBtnReleased	src/deng/key_vector.c	/^int deng_IsMouseBtnReleased ($/;"	f	typeref:typename:int
deng_IsRunning	src/deng/win32_surface.c	/^bool_t deng_IsRunning(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:bool_t
deng_IsRunning	src/deng/x11_surface.c	/^bool_t deng_IsRunning(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:bool_t
deng_IsRunningVar	src/deng/x11_surface.c	/^volatile sig_atomic_t deng_IsRunningVar;$/;"	v	typeref:typename:volatile sig_atomic_t
deng_Key	headers/deng/deng_key_definitions.h	/^typedef enum deng_Key {$/;"	g
deng_Key	headers/deng/deng_key_definitions.h	/^} deng_Key;$/;"	t	typeref:enum:deng_Key
deng_MouseButton	headers/deng/deng_key_definitions.h	/^typedef enum deng_MouseButton {$/;"	g
deng_MouseButton	headers/deng/deng_key_definitions.h	/^} deng_MouseButton;$/;"	t	typeref:enum:deng_MouseButton
deng_MouseMode	headers/deng/deng_key_definitions.h	/^typedef enum deng_MouseMode {$/;"	g
deng_MouseMode	headers/deng/deng_key_definitions.h	/^} deng_MouseMode;$/;"	t	typeref:enum:deng_MouseMode
deng_MovementEvent	headers/deng/api_core.h	/^enum deng_MovementEvent {$/;"	g
deng_ObjColorData	headers/das/assets.h	/^typedef struct deng_ObjColorData {$/;"	s
deng_ObjColorData	headers/das/assets.h	/^} deng_ObjColorData;$/;"	t	typeref:struct:deng_ObjColorData
deng_ObjNormalData	headers/das/assets.h	/^typedef struct deng_ObjNormalData {$/;"	s
deng_ObjNormalData	headers/das/assets.h	/^} deng_ObjNormalData;$/;"	t	typeref:struct:deng_ObjNormalData
deng_ObjTextureData	headers/das/assets.h	/^typedef struct deng_ObjTextureData {$/;"	s
deng_ObjTextureData	headers/das/assets.h	/^} deng_ObjTextureData;$/;"	t	typeref:struct:deng_ObjTextureData
deng_ObjVertData	headers/das/assets.h	/^typedef struct deng_ObjVertData {$/;"	s
deng_ObjVertData	headers/das/assets.h	/^} deng_ObjVertData;$/;"	t	typeref:struct:deng_ObjVertData
deng_ObjVertData2D	headers/das/assets.h	/^typedef struct deng_ObjVertData2D {$/;"	s
deng_ObjVertData2D	headers/das/assets.h	/^} deng_ObjVertData2D;$/;"	t	typeref:struct:deng_ObjVertData2D
deng_PipelineType	headers/deng/api_core.h	/^enum deng_PipelineType {$/;"	g
deng_PixelDataDynamic	headers/das/assets.h	/^typedef struct deng_PixelDataDynamic {$/;"	s
deng_PixelDataDynamic	headers/das/assets.h	/^} deng_PixelDataDynamic;$/;"	t	typeref:struct:deng_PixelDataDynamic
deng_RegisterKeyEvent	src/deng/key_vector.c	/^void deng_RegisterKeyEvent ($/;"	f	typeref:typename:void
deng_ReleasedKeys	headers/deng/deng_surface_window.h	/^typedef struct deng_ReleasedKeys {$/;"	s
deng_ReleasedKeys	headers/deng/deng_surface_window.h	/^} deng_ReleasedKeys;$/;"	t	typeref:struct:deng_ReleasedKeys
deng_RendererHintBits	headers/deng/api_core.h	/^typedef deng_ui16_t deng_RendererHintBits;$/;"	t	typeref:typename:deng_ui16_t
deng_RendererUsageMode	headers/deng/api_core.h	/^enum deng_RendererUsageMode {$/;"	g
deng_SetMouseCoords	src/deng/win32_surface.c	/^void deng_SetMouseCoords ($/;"	f	typeref:typename:void
deng_SetMouseCoords	src/deng/x11_surface.c	/^void deng_SetMouseCoords ($/;"	f	typeref:typename:void
deng_SetMouseCursorMode	src/deng/win32_surface.c	/^void deng_SetMouseCursorMode ($/;"	f	typeref:typename:void
deng_SetMouseCursorMode	src/deng/x11_surface.c	/^void deng_SetMouseCursorMode ($/;"	f	typeref:typename:void
deng_SurfaceWIN32	headers/deng/deng_surface_window.h	/^    typedef struct deng_SurfaceWIN32 {$/;"	s
deng_SurfaceWIN32	headers/deng/deng_surface_window.h	/^    } deng_SurfaceWIN32;$/;"	t	typeref:struct:deng_SurfaceWIN32
deng_SurfaceWindow	headers/deng/deng_surface_window.h	/^typedef struct deng_SurfaceWindow {$/;"	s
deng_SurfaceWindow	headers/deng/deng_surface_window.h	/^} deng_SurfaceWindow;$/;"	t	typeref:struct:deng_SurfaceWindow
deng_SurfaceWindowMode	headers/deng/deng_surface_window.h	/^typedef enum deng_SurfaceWindowMode {$/;"	g
deng_SurfaceWindowMode	headers/deng/deng_surface_window.h	/^} deng_SurfaceWindowMode;$/;"	t	typeref:enum:deng_SurfaceWindowMode
deng_SurfaceX11	headers/deng/deng_surface_window.h	/^    typedef struct deng_SurfaceX11 {$/;"	s
deng_SurfaceX11	headers/deng/deng_surface_window.h	/^    } deng_SurfaceX11;$/;"	t	typeref:struct:deng_SurfaceX11
deng_Texture	headers/das/assets.h	/^typedef struct deng_Texture {$/;"	s
deng_Texture	headers/das/assets.h	/^} deng_Texture;$/;"	t	typeref:struct:deng_Texture
deng_TriangleAngleType	headers/deng/api_core.h	/^enum deng_TriangleAngleType {$/;"	g
deng_UpdateWindow	src/deng/win32_surface.c	/^void deng_UpdateWindow(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void
deng_UpdateWindow	src/deng/x11_surface.c	/^void deng_UpdateWindow(deng_SurfaceWindow *p_window) {$/;"	f	typeref:typename:void
deng_VertDynamic	headers/das/assets.h	/^typedef struct deng_VertDynamic {$/;"	s
deng_VertDynamic	headers/das/assets.h	/^} deng_VertDynamic;$/;"	t	typeref:struct:deng_VertDynamic
deng_VirtualMousePosition	headers/deng/deng_surface_window.h	/^typedef struct deng_VirtualMousePosition {$/;"	s
deng_VirtualMousePosition	headers/deng/deng_surface_window.h	/^} deng_VirtualMousePosition;$/;"	t	typeref:struct:deng_VirtualMousePosition
deng_WindowHintBits	headers/deng/api_core.h	/^typedef deng_ui32_t deng_WindowHintBits;$/;"	t	typeref:typename:deng_ui32_t
deng_bool_t	headers/common/base_types.h	/^typedef uint8_t deng_bool_t;$/;"	t	typeref:typename:uint8_t
deng_f32_t	headers/common/base_types.h	/^typedef float deng_f32_t;$/;"	t	typeref:typename:float
deng_f64_t	headers/common/base_types.h	/^typedef double deng_f64_t;$/;"	t	typeref:typename:double
deng_i16_t	headers/common/base_types.h	/^typedef int16_t deng_i16_t;$/;"	t	typeref:typename:int16_t
deng_i32_t	headers/common/base_types.h	/^typedef int32_t deng_i32_t;$/;"	t	typeref:typename:int32_t
deng_i64_t	headers/common/base_types.h	/^typedef int64_t deng_i64_t;$/;"	t	typeref:typename:int64_t
deng_i8_t	headers/common/base_types.h	/^typedef int8_t deng_i8_t;$/;"	t	typeref:typename:int8_t
deng_px_t	headers/common/base_types.h	/^typedef double deng_px_t;$/;"	t	typeref:typename:double
deng_ui16_t	headers/common/base_types.h	/^typedef uint16_t deng_ui16_t;$/;"	t	typeref:typename:uint16_t
deng_ui32_t	headers/common/base_types.h	/^typedef uint32_t deng_ui32_t;$/;"	t	typeref:typename:uint32_t
deng_ui64_t	headers/common/base_types.h	/^typedef uint64_t deng_ui64_t;$/;"	t	typeref:typename:uint64_t
deng_ui8_t	headers/common/base_types.h	/^typedef uint8_t deng_ui8_t;$/;"	t	typeref:typename:uint8_t
deng_vec_t	headers/common/base_types.h	/^typedef float deng_vec_t;$/;"	t	typeref:typename:float
deng_window_area	headers/dengui/dengui_events.h	/^        dengMath::vec2<deng_ui32_t> deng_window_area;$/;"	m	struct:dengui::EventInfo	typeref:typename:dengMath::vec2<deng_ui32_t>
dengui	headers/dengui/dengui.h	/^namespace dengui {$/;"	n
dengui	headers/dengui/dengui_child.h	/^namespace dengui {$/;"	n
dengui	headers/dengui/dengui_events.h	/^namespace dengui {$/;"	n
dengui	headers/dengui/dengui_window.h	/^namespace dengui {$/;"	n
dengui	headers/dengui/map_editor_ui.h	/^namespace dengui {$/;"	n
dengui	src/dengui/dengui_events.cpp	/^namespace dengui {$/;"	n	file:
dengui	src/dengui/dengui_window.cpp	/^namespace dengui {$/;"	n	file:
dengui	src/dengui/map_editor_ui.cpp	/^namespace dengui {$/;"	n	file:
denguiWindowFlagBits	headers/dengui/dengui.h	/^typedef unsigned char denguiWindowFlagBits; $/;"	t	typeref:typename:unsigned char
description	headers/das/assets.h	/^    char *description;$/;"	m	struct:deng_Asset	typeref:typename:char *
description	headers/das/assets.h	/^    char *description;$/;"	m	struct:deng_Texture	typeref:typename:char *
descriptor_sets	headers/deng/rend_helpers.h	/^        std::vector<VkDescriptorSet> descriptor_sets;$/;"	m	struct:deng::TextureImageData	typeref:typename:std::vector<VkDescriptorSet>
destroyDebugUtils	src/deng/renderer.cpp	/^    void InstanceCreator::destroyDebugUtils ($/;"	f	class:deng::InstanceCreator	typeref:typename:void
device	headers/dengui/dengui_events.h	/^        VkDevice device;$/;"	m	struct:dengui::EventInfo	typeref:typename:VkDevice
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:0
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:1
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:10
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:11
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:12
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:13
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:14
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:15
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:16
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:17
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:18
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:19
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:2
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:20
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:21
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:22
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:23
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:3
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:4
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:5
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:6
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:7
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:8
directory	compile_commands.json	/^    "directory": "\/home\/karl\/GIT\/deng",$/;"	s	object:9
endCommandBufferSingleCommand	src/deng/rend_helpers.cpp	/^    void CommandBufferRecorder::endCommandBufferSingleCommand ($/;"	f	class:deng::CommandBufferRecorder	typeref:typename:void
entity_size	headers/das/hdr_data.h	/^    deng_ui8_t entity_size;$/;"	m	struct:TGAColorMapHeader	typeref:typename:deng_ui8_t
event	headers/deng/deng_surface_window.h	/^        XEvent event;$/;"	m	struct:deng_SurfaceX11	typeref:typename:XEvent
exp	src/deng/deng_math.cpp	/^    double exp(double base, int exp) {$/;"	f	namespace:dengMath	typeref:typename:double
exp	src/deng/deng_math.cpp	/^    float exp(float base, int exp) {$/;"	f	namespace:dengMath	typeref:typename:float
ext_mii	src/deng/renderer.cpp	/^dengui::MouseInputInfo ext_mii;$/;"	v	typeref:typename:dengui::MouseInputInfo
extent	headers/dengui/dengui_events.h	/^        VkExtent2D extent;$/;"	m	struct:dengui::EventInfo	typeref:typename:VkExtent2D
false	headers/common/base_types.h	/^#define false /;"	d
false	headers/das/das_core.h	/^#define false /;"	d
false	headers/deng/deng_surface_window.h	/^#define false /;"	d
false	src/common/common.c	/^#define false /;"	d	file:
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/common\/common.c",$/;"	s	object:13
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/common\/common.c",$/;"	s	object:23
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/das\/dam.c",$/;"	s	object:20
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/das\/das_handler.c",$/;"	s	object:14
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/das\/das_handler.c",$/;"	s	object:21
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/das\/data_loader.c",$/;"	s	object:15
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/das\/data_loader.c",$/;"	s	object:22
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/camera.cpp",$/;"	s	object:1
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/deng_math.cpp",$/;"	s	object:5
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/events.cpp",$/;"	s	object:6
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/key_translation.c",$/;"	s	object:16
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/key_vector.c",$/;"	s	object:17
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/rend_helpers.cpp",$/;"	s	object:4
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/renderer.cpp",$/;"	s	object:2
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/vulkan_handler.c",$/;"	s	object:18
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/window.cpp",$/;"	s	object:3
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/deng\/x11_surface.c",$/;"	s	object:19
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/dengui\/dengui_events.cpp",$/;"	s	object:10
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/dengui\/dengui_window.cpp",$/;"	s	object:11
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/dengui\/map_editor_ui.cpp",$/;"	s	object:12
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/main\/sandbox.cpp",$/;"	s	object:0
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/utils\/font.cpp",$/;"	s	object:7
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/utils\/shapes.cpp",$/;"	s	object:9
file	compile_commands.json	/^    "file": "\/home\/karl\/GIT\/deng\/src\/utils\/timer.cpp",$/;"	s	object:8
file	src/das/data_loader.c	/^static FILE *file;$/;"	v	typeref:typename:FILE *	file:
file_size	headers/das/hdr_data.h	/^    deng_ui32_t file_size;$/;"	m	struct:BMPFileHeader	typeref:typename:deng_ui32_t
file_type	headers/das/hdr_data.h	/^    deng_ui16_t file_type;$/;"	m	struct:BMPFileHeader	typeref:typename:deng_ui16_t
findCollision	src/dengui/dengui_events.cpp	/^    deng_bool_t Events::findCollision ($/;"	f	class:dengui::Events	typeref:typename:deng_bool_t
findElementByDescription	src/deng/deng_math.cpp	/^    T *findElementByDescription(std::vector<T> *p_elements, const char *description) {$/;"	f	namespace:dengMath	typeref:typename:T *
findFontFiles	src/utils/font.cpp	/^    void StringRasterizer::findFontFiles(std::string path) {$/;"	f	class:dengUtils::StringRasterizer	typeref:typename:void
findGraphicsFamily	src/deng/rend_helpers.cpp	/^    bool QueueFamilyFinder::findGraphicsFamily(VkPhysicalDevice gpu) {$/;"	f	class:deng::QueueFamilyFinder	typeref:typename:bool
findPresentSupportFamily	src/deng/rend_helpers.cpp	/^    bool QueueFamilyFinder::findPresentSupportFamily ($/;"	f	class:deng::QueueFamilyFinder	typeref:typename:bool
findSupportedProperties	src/deng/renderer.cpp	/^    void InstanceCreator::findSupportedProperties() {$/;"	f	class:deng::InstanceCreator	typeref:typename:void
findTextSizePx	src/utils/font.cpp	/^    deng_px_t StringRasterizer::findTextSizePx(BitmapStr &str) {$/;"	f	class:dengUtils::StringRasterizer	typeref:typename:deng_px_t
findTextSizeVec	src/utils/font.cpp	/^    deng_vec_t StringRasterizer::findTextSizeVec(BitmapStr &str) {$/;"	f	class:dengUtils::StringRasterizer	typeref:typename:deng_vec_t
findTextureImageDataByID	src/deng/renderer.cpp	/^    TextureImageData DrawCaller::findTextureImageDataByID(char *id) {$/;"	f	class:deng::DrawCaller	typeref:typename:TextureImageData
findValue	src/common/hashmap.c	/^void *findValue ($/;"	f	typeref:typename:void *
first	headers/deng/deng_math.h	/^        T first, second, third, fourth;$/;"	m	struct:dengMath::vec4	typeref:typename:T
first	headers/deng/deng_math.h	/^        T first, second, third;$/;"	m	struct:dengMath::vec3	typeref:typename:T
first	headers/deng/deng_math.h	/^        T first, second;$/;"	m	struct:dengMath::vec2	typeref:typename:T
first_colormap_index	headers/das/hdr_data.h	/^    deng_ui16_t first_colormap_index;$/;"	m	struct:TGAColorMapHeader	typeref:typename:deng_ui16_t
fl_b	headers/dengui/dengui_window.h	/^        denguiWindowFlagBits fl_b;$/;"	m	struct:dengui::WindowInfo	typeref:typename:denguiWindowFlagBits
flight_fences	headers/deng/renderer.h	/^        std::vector<VkFence> flight_fences;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<VkFence>
font_face	headers/utils/font.h	/^        FT_Face font_face;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:FT_Face
font_file	headers/utils/font.h	/^        const char *font_file;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:const char *
fourth	headers/deng/deng_math.h	/^        T first, second, third, fourth;$/;"	m	struct:dengMath::vec4	typeref:typename:T
g_queue	headers/dengui/dengui_events.h	/^        VkQueue g_queue;$/;"	m	struct:dengui::EventInfo	typeref:typename:VkQueue
gc	headers/deng/deng_surface_window.h	/^        GC gc;$/;"	m	struct:deng_SurfaceX11	typeref:typename:GC
generateAbsCircle	src/utils/shapes.cpp	/^    void CircleGenerator::generateAbsCircle ($/;"	f	class:dengUtils::CircleGenerator	typeref:typename:void
generateAbsTriangle	src/utils/shapes.cpp	/^    void TriangleGenerator::generateAbsTriangle ($/;"	f	class:dengUtils::TriangleGenerator	typeref:typename:void
generateAxisLineVertices	src/utils/grid_generator.cpp	/^    void GridManager::generateAxisLineVertices(dengMath::vec2<deng_i32_t> &min_vertices, dengMat/;"	f	class:dengUtils::GridManager	typeref:typename:void
generateBorders	src/utils/shapes.cpp	/^    void BorderGenerator::generateBorders ($/;"	f	class:dengUtils::BorderGenerator	typeref:typename:void
generateMappedAbsRec	src/utils/shapes.cpp	/^    void RectangleGenerator::generateMappedAbsRec ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:void
generateMappedRelRec	src/utils/shapes.cpp	/^    void RectangleGenerator::generateMappedRelRec ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:void
generateRelCircle	src/utils/shapes.cpp	/^    void CircleGenerator::generateRelCircle ($/;"	f	class:dengUtils::CircleGenerator	typeref:typename:void
generateRelTriangle	src/utils/shapes.cpp	/^    void TriangleGenerator::generateRelTriangle ($/;"	f	class:dengUtils::TriangleGenerator	typeref:typename:void
generateUnmappedAbsRec	src/utils/shapes.cpp	/^    void RectangleGenerator::generateUnmappedAbsRec ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:void
generateUnmappedRelRec	src/utils/shapes.cpp	/^    void RectangleGenerator::generateUnmappedRelRec ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:void
generateVertices	src/utils/grid_generator.cpp	/^    void GridManager::generateVertices(dengMath::vec4<float> camera_position) {$/;"	f	class:dengUtils::GridManager	typeref:typename:void
getAttributeDescs	src/deng/rend_helpers.cpp	/^    std::vector<VkVertexInputAttributeDescription> PipelineCreator::getAttributeDescs() {$/;"	f	class:deng::PipelineCreator	typeref:typename:std::vector<VkVertexInputAttributeDescription>
getBD	src/deng/renderer.cpp	/^    BufferData ResourceAllocator::getBD() { return m_buffer_data; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:BufferData
getBindingDesc	src/deng/rend_helpers.cpp	/^    VkVertexInputBindingDescription PipelineCreator::getBindingDesc() {$/;"	f	class:deng::PipelineCreator	typeref:typename:VkVertexInputBindingDescription
getCapabilities	src/deng/rend_helpers.cpp	/^    VkSurfaceCapabilitiesKHR SwapChainDetails::getCapabilities() { return m_capabilities; }$/;"	f	class:deng::SwapChainDetails	typeref:typename:VkSurfaceCapabilitiesKHR
getCartesianCoordsPoint	src/deng/deng_math.cpp	/^    vec2<float> getCartesianCoordsPoint(const vec2<float> &centre_position, const deng_i16_t &an/;"	f	namespace:dengMath	typeref:typename:vec2<float>
getCmdBuffers	src/dengui/dengui_events.cpp	/^    std::vector<VkCommandBuffer> *Events::getCmdBuffers() { return m_info.p_dc->getComBufs(); }$/;"	f	class:dengui::Events	typeref:typename:std::vector<VkCommandBuffer> *
getCmdPool	src/dengui/dengui_events.cpp	/^    VkCommandPool *Events::getCmdPool() { return m_info.p_dc->getComPool(); }$/;"	f	class:dengui::Events	typeref:typename:VkCommandPool *
getColorImg	src/deng/renderer.cpp	/^    VkImage ResourceAllocator::getColorImg() { return m_color_image; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:VkImage
getColorImgMem	src/deng/renderer.cpp	/^    VkDeviceMemory ResourceAllocator::getColorImgMem() { return m_color_image_mem; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:VkDeviceMemory
getColorImgView	src/deng/renderer.cpp	/^    VkImageView ResourceAllocator::getColorImgView() { return m_color_image_view; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:VkImageView
getComBufs	src/deng/renderer.cpp	/^    std::vector<VkCommandBuffer> *DrawCaller::getComBufs() { return m_p_commandbuffers; }$/;"	f	class:deng::DrawCaller	typeref:typename:std::vector<VkCommandBuffer> *
getComPool	src/deng/renderer.cpp	/^    VkCommandPool *DrawCaller::getComPool() { return m_p_commandpool; }$/;"	f	class:deng::DrawCaller	typeref:typename:VkCommandPool *
getDMEXT	src/deng/renderer.cpp	/^    VkDebugUtilsMessengerEXT InstanceCreator::getDMEXT() { return m_debug_mes; }$/;"	f	class:deng::InstanceCreator	typeref:typename:VkDebugUtilsMessengerEXT
getDepImg	src/deng/renderer.cpp	/^    VkImage ResourceAllocator::getDepImg() { return m_depth_image; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:VkImage
getDepImgMem	src/deng/renderer.cpp	/^    VkDeviceMemory ResourceAllocator::getDepImgMem() { return m_depth_image_mem; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:VkDeviceMemory
getDepImgView	src/deng/renderer.cpp	/^    VkImageView ResourceAllocator::getDepImgView() { return m_depth_image_view; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:VkImageView
getDev	src/deng/renderer.cpp	/^    VkDevice InstanceCreator::getDev() { return m_device; }$/;"	f	class:deng::InstanceCreator	typeref:typename:VkDevice
getDeviceScore	src/deng/rend_helpers.cpp	/^    deng_ui32_t HardwareSpecs::getDeviceScore ($/;"	f	class:deng::HardwareSpecs	typeref:typename:deng_ui32_t
getElems	src/dengui/dengui_events.cpp	/^    std::vector<WindowElement> *Events::getElems() { return &m_elem_infos; }$/;"	f	class:dengui::Events	typeref:typename:std::vector<WindowElement> *
getEv	src/dengui/map_editor_ui.cpp	/^    Events *MapEditor::getEv() { return m_p_ev; }$/;"	f	class:dengui::MapEditor	typeref:typename:Events *
getExt	src/deng/renderer.cpp	/^    VkExtent2D SwapChainCreator::getExt() { return m_extent; }$/;"	f	class:deng::SwapChainCreator	typeref:typename:VkExtent2D
getExtensionSupport	src/deng/rend_helpers.cpp	/^    bool HardwareSpecs::getExtensionSupport ($/;"	f	class:deng::HardwareSpecs	typeref:typename:bool
getFB	src/deng/renderer.cpp	/^    std::vector<VkFramebuffer> ResourceAllocator::getFB() { return m_framebuffers; }$/;"	f	class:deng::ResourceAllocator	typeref:typename:std::vector<VkFramebuffer>
getFormats	src/deng/rend_helpers.cpp	/^    std::vector<VkSurfaceFormatKHR> SwapChainDetails::getFormats() { return m_formats; }$/;"	f	class:deng::SwapChainDetails	typeref:typename:std::vector<VkSurfaceFormatKHR>
getFractionNumerator	src/deng/deng_math.cpp	/^    float getFractionNumerator(const float &value_numerator, const float &value_denominator, con/;"	f	namespace:dengMath	typeref:typename:float
getGpu	src/deng/renderer.cpp	/^    VkPhysicalDevice InstanceCreator::getGpu() { return m_gpu; }$/;"	f	class:deng::InstanceCreator	typeref:typename:VkPhysicalDevice
getGraphicsPipelineInfo	src/deng/rend_helpers.cpp	/^    VkGraphicsPipelineCreateInfo PipelineCreator::getGraphicsPipelineInfo ($/;"	f	class:deng::PipelineCreator	typeref:typename:VkGraphicsPipelineCreateInfo
getGraphicsQFIndex	src/deng/rend_helpers.cpp	/^    deng_ui32_t QueueFamilyFinder::getGraphicsQFIndex() { return m_graphics_family_index; }$/;"	f	class:deng::QueueFamilyFinder	typeref:typename:deng_ui32_t
getId	src/dengui/dengui_window.cpp	/^    std::string Window::getId() { return m_id; }$/;"	f	class:dengui::Window	typeref:typename:std::string
getImageViewInfo	src/deng/rend_helpers.cpp	/^    VkImageViewCreateInfo BufferCreator::getImageViewInfo ($/;"	f	class:deng::BufferCreator	typeref:typename:VkImageViewCreateInfo
getInputMode	src/deng/window.cpp	/^    deng_InputMode WindowWrap::getInputMode() {$/;"	f	class:deng::WindowWrap	typeref:typename:deng_InputMode
getIns	src/deng/renderer.cpp	/^    VkInstance InstanceCreator::getIns() { return m_instance; }$/;"	f	class:deng::InstanceCreator	typeref:typename:VkInstance
getLFSupport	src/deng/renderer.cpp	/^    bool InstanceCreator::getLFSupport() { return m_tex_linear_filtering_support; }$/;"	f	class:deng::InstanceCreator	typeref:typename:bool
getLargestElement	src/deng/deng_math.cpp	/^    T getLargestElement(std::vector<T> *p_elements_vector) {$/;"	f	namespace:dengMath	typeref:typename:T
getMainBufMem	src/dengui/dengui_events.cpp	/^    VkDeviceMemory *Events::getMainBufMem() { return m_info.p_ra->getBD().p_main_buffer_memory; /;"	f	class:dengui::Events	typeref:typename:VkDeviceMemory *
getMainBuffer	src/dengui/dengui_events.cpp	/^    VkBuffer *Events::getMainBuffer() { return m_info.p_ra->getBD().p_main_buffer; }$/;"	f	class:dengui::Events	typeref:typename:VkBuffer *
getMaxSampleCount	src/deng/renderer.cpp	/^    VkSampleCountFlagBits InstanceCreator::getMaxSampleCount() { return m_max_sample_count; }$/;"	f	class:deng::InstanceCreator	typeref:typename:VkSampleCountFlagBits
getMemoryType	src/deng/rend_helpers.cpp	/^    deng_ui32_t HardwareSpecs::getMemoryType ($/;"	f	class:deng::HardwareSpecs	typeref:typename:deng_ui32_t
getModelMatrix	headers/deng/deng_math.h	/^        mat4<deng_vec_t> getModelMatrix() { $/;"	f	class:dengMath::ModelMatrix	typeref:typename:mat4<deng_vec_t>
getMousePosition	src/deng/camera.cpp	/^    void Camera::getMousePosition(dengMath::vec2<float> *mouse_position) {$/;"	f	class:deng::Camera	typeref:typename:void
getMovementType	src/deng/events.cpp	/^    void Events::getMovementType() {$/;"	f	class:dengMath::Events	typeref:typename:void
getOrdereredVertexDataElements	src/utils/grid_generator.cpp	/^    dengMath::vec2<float*> GridManager::getOrdereredVertexDataElements(const deng_ui32_t index, /;"	f	class:dengUtils::GridManager	typeref:typename:dengMath::vec2<float * >
getPC	src/dengui/dengui_window.cpp	/^    dengMath::vec4<float> Window::getPC() { return m_primary_color; }$/;"	f	class:dengui::Window	typeref:typename:dengMath::vec4<float>
getPipelines	src/deng/renderer.cpp	/^    std::array<PipelineData, DENG_PIPELINE_COUNT> DescriptorCreator::getPipelines() { return m_p/;"	f	class:deng::DescriptorCreator	typeref:typename:std::array<PipelineData,DENG_PIPELINE_COUNT>
getPixelSize	src/deng/window.cpp	/^    dengMath::vec2<double> WindowWrap::getPixelSize() {$/;"	f	class:deng::WindowWrap	typeref:typename:dengMath::vec2<double>
getPosition	src/deng/deng_math.cpp	/^    vec4<float> ViewMatrix::getPosition() {$/;"	f	class:dengMath::ViewMatrix	typeref:typename:vec4<float>
getPresentModes	src/deng/rend_helpers.cpp	/^    std::vector<VkPresentModeKHR> SwapChainDetails::getPresentModes() { return m_present_modes; /;"	f	class:deng::SwapChainDetails	typeref:typename:std::vector<VkPresentModeKHR>
getPresentQFIndex	src/deng/rend_helpers.cpp	/^    deng_ui32_t QueueFamilyFinder::getPresentQFIndex() { return m_present_family_index; }$/;"	f	class:deng::QueueFamilyFinder	typeref:typename:deng_ui32_t
getProjectionMatrix	src/deng/deng_math.cpp	/^    void ProjectionMatrix::getProjectionMatrix(mat4<deng_vec_t> *matrix) {$/;"	f	class:dengMath::ProjectionMatrix	typeref:typename:void
getQFF	src/deng/renderer.cpp	/^    QueueFamilyFinder InstanceCreator::getQFF() { return m_qff; } $/;"	f	class:deng::InstanceCreator	typeref:typename:QueueFamilyFinder
getRp	src/deng/renderer.cpp	/^    VkRenderPass SwapChainCreator::getRp() { return m_renderpass; }$/;"	f	class:deng::SwapChainCreator	typeref:typename:VkRenderPass
getSC	src/deng/renderer.cpp	/^    VkSwapchainKHR SwapChainCreator::getSC() { return m_swapchain; }$/;"	f	class:deng::SwapChainCreator	typeref:typename:VkSwapchainKHR
getSC	src/dengui/dengui_window.cpp	/^    dengMath::vec4<float> Window::getSC() { return m_secondary_color; }$/;"	f	class:dengui::Window	typeref:typename:dengMath::vec4<float>
getSCImg	src/deng/renderer.cpp	/^    std::vector<VkImage> SwapChainCreator::getSCImg() { return m_swapchain_images; }$/;"	f	class:deng::SwapChainCreator	typeref:typename:std::vector<VkImage>
getSCImgViews	src/deng/renderer.cpp	/^    std::vector<VkImageView> SwapChainCreator::getSCImgViews() { return m_swapchain_image_views;/;"	f	class:deng::SwapChainCreator	typeref:typename:std::vector<VkImageView>
getSF	src/deng/renderer.cpp	/^    VkFormat SwapChainCreator::getSF() { return m_surface_format.format; }$/;"	f	class:deng::SwapChainCreator	typeref:typename:VkFormat
getShaderModule	src/deng/rend_helpers.cpp	/^    VkShaderModule PipelineCreator::getShaderModule(std::vector<char> &shader_bins) {$/;"	f	class:deng::PipelineCreator	typeref:typename:VkShaderModule
getSize	src/deng/window.cpp	/^    dengMath::vec2<deng_ui32_t> WindowWrap::getSize() {$/;"	f	class:deng::WindowWrap	typeref:typename:dengMath::vec2<deng_ui32_t>
getSmallestElement	src/deng/deng_math.cpp	/^    T getSmallestElement(std::vector<T> *p_elements_vector) {$/;"	f	namespace:dengMath	typeref:typename:T
getSu	src/deng/renderer.cpp	/^    VkSurfaceKHR InstanceCreator::getSu() { return m_surface; }$/;"	f	class:deng::InstanceCreator	typeref:typename:VkSurfaceKHR
getTC	src/dengui/dengui_window.cpp	/^    dengMath::vec4<float> Window::getTC() { return m_tertiary_color; }$/;"	f	class:dengui::Window	typeref:typename:dengMath::vec4<float>
getTexMappedDP	src/deng/renderer.cpp	/^    VkDescriptorPool DescriptorCreator::getTexMappedDP() { return m_texture_mapped_desc_pool; }$/;"	f	class:deng::DescriptorCreator	typeref:typename:VkDescriptorPool
getTexMappedDSL	src/deng/renderer.cpp	/^    VkDescriptorSetLayout DescriptorCreator::getTexMappedDSL() { return m_texture_mapped_desc_se/;"	f	class:deng::DescriptorCreator	typeref:typename:VkDescriptorSetLayout
getTexMappedPL	src/deng/renderer.cpp	/^    VkPipelineLayout DescriptorCreator::getTexMappedPL() { return m_texture_mapped_pl; }$/;"	f	class:deng::DescriptorCreator	typeref:typename:VkPipelineLayout
getTime	src/utils/timer.cpp	/^    long Timer::getTime() {$/;"	f	class:dengUtils::Timer	typeref:typename:long
getTitle	src/deng/window.cpp	/^    const char *WindowWrap::getTitle() {$/;"	f	class:deng::WindowWrap	typeref:typename:const char *
getTriangleAnglesFromEdges	src/deng/deng_math.cpp	/^    float getTriangleAnglesFromEdges(const vec3<float> &triangle_edges, const deng_TriangleAngle/;"	f	namespace:dengMath	typeref:typename:float
getUnmappedDP	src/deng/renderer.cpp	/^    VkDescriptorPool DescriptorCreator::getUnmappedDP() { return m_unmapped_desc_pool; }$/;"	f	class:deng::DescriptorCreator	typeref:typename:VkDescriptorPool
getUnmappedDS	src/deng/renderer.cpp	/^    std::vector<VkDescriptorSet> *DescriptorCreator::getUnmappedDS() { return &m_unmapped_descri/;"	f	class:deng::DescriptorCreator	typeref:typename:std::vector<VkDescriptorSet> *
getUnmappedDSL	src/deng/renderer.cpp	/^    VkDescriptorSetLayout DescriptorCreator::getUnmappedDSL() { return m_unmapped_desc_set_layou/;"	f	class:deng::DescriptorCreator	typeref:typename:VkDescriptorSetLayout
getUnmappedPL	src/deng/renderer.cpp	/^    VkPipelineLayout DescriptorCreator::getUnmappedPL() { return m_unmapped_pl; }$/;"	f	class:deng::DescriptorCreator	typeref:typename:VkPipelineLayout
getVector2DRotation	src/deng/deng_math.cpp	/^    float getVector2DRotation(vec2<vec2<float>> vector_bounds) {$/;"	f	namespace:dengMath	typeref:typename:float
getVectorElement	headers/deng/deng_math.h	/^        T *getVectorElement(const size_t &i) {$/;"	f	struct:dengMath::vec2	typeref:typename:T *
getVectorElement	headers/deng/deng_math.h	/^        T *getVectorElement(const size_t &i) {$/;"	f	struct:dengMath::vec3	typeref:typename:T *
getVectorElement	headers/deng/deng_math.h	/^        T *getVectorElement(const size_t &i) {$/;"	f	struct:dengMath::vec4	typeref:typename:T *
getVectorLengthFromBounds	src/deng/deng_math.cpp	/^    float getVectorLengthFromBounds(vec2<vec2<float>> vector_bounds) {$/;"	f	namespace:dengMath	typeref:typename:float
getViewMatrix	src/deng/deng_math.cpp	/^    void ViewMatrix::getViewMatrix(mat4<deng_vec_t> *view) {$/;"	f	class:dengMath::ViewMatrix	typeref:typename:void
getWindow	src/deng/window.cpp	/^    deng_SurfaceWindow *WindowWrap::getWindow() {$/;"	f	class:deng::WindowWrap	typeref:typename:deng_SurfaceWindow *
getWindowElements	src/dengui/dengui_window.cpp	/^    std::vector<WindowElement> Window::getWindowElements() { return m_win_elems; }$/;"	f	class:dengui::Window	typeref:typename:std::vector<WindowElement>
glyph_id	headers/utils/font.h	/^        deng_ui16_t glyph_id; \/\/ ID of glyph texture$/;"	m	struct:dengUtils::BitmapChar	typeref:typename:deng_ui16_t
gpu	headers/dengui/dengui_events.h	/^        VkPhysicalDevice gpu;$/;"	m	struct:dengui::EventInfo	typeref:typename:VkPhysicalDevice
graphics_queue	headers/deng/rend_helpers.h	/^        VkQueue graphics_queue;$/;"	m	class:deng::QueueFamilyFinder	typeref:typename:VkQueue
green_mask	headers/das/hdr_data.h	/^    deng_ui32_t green_mask;$/;"	m	struct:BMPColorHeader	typeref:typename:deng_ui32_t
hashfunc	src/common/hashmap.c	/^size_t hashfunc ($/;"	f	typeref:typename:size_t
hdr_name	headers/das/hdr_data.h	/^    char *hdr_name;$/;"	m	struct:INDX_HDR	typeref:typename:char *
hdr_name	headers/das/hdr_data.h	/^    char *hdr_name;$/;"	m	struct:INFO_HDR	typeref:typename:char *
hdr_name	headers/das/hdr_data.h	/^    char *hdr_name;$/;"	m	struct:VERT_HDR	typeref:typename:char *
hdr_size	headers/das/hdr_data.h	/^    deng_ui32_t hdr_size;$/;"	m	struct:INDX_HDR	typeref:typename:deng_ui32_t
hdr_size	headers/das/hdr_data.h	/^    deng_ui32_t hdr_size;$/;"	m	struct:INFO_HDR	typeref:typename:deng_ui32_t
hdr_size	headers/das/hdr_data.h	/^    deng_ui32_t hdr_size;$/;"	m	struct:VERT_HDR	typeref:typename:deng_ui32_t
height	headers/das/assets.h	/^    deng_ui16_t height;$/;"	m	struct:deng_PixelDataDynamic	typeref:typename:deng_ui16_t
height	headers/das/hdr_data.h	/^    deng_i32_t height;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_i32_t
height	headers/das/hdr_data.h	/^    deng_ui16_t height;$/;"	m	struct:TGAInfoHeader	typeref:typename:deng_ui16_t
height	headers/deng/deng_surface_window.h	/^    int height;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:int
help_text	headers/das/dam.h	/^char *help_text = $/;"	v	typeref:typename:char *
hexToDec	src/deng/deng_math.cpp	/^    deng_ui32_t Conversion::hexToDec(const std::string &hex_value) {$/;"	f	class:dengMath::Conversion	typeref:typename:deng_ui32_t
hex_definitions	headers/deng/deng_math.h	/^        std::unordered_map<char, int> hex_definitions;$/;"	m	struct:dengMath::Conversion	typeref:typename:std::unordered_map<char,int>
id	headers/das/assets.h	/^    char *id;$/;"	m	struct:deng_Asset	typeref:typename:char *
id	headers/das/assets.h	/^    char *id;$/;"	m	struct:deng_Texture	typeref:typename:char *
id	headers/dengui/dengui_child.h	/^        std::string id;$/;"	m	struct:dengui::ChildInfo	typeref:typename:std::string
id	headers/dengui/dengui_window.h	/^        std::string id;$/;"	m	struct:dengui::WindowInfo	typeref:typename:std::string
id_lenght	headers/das/hdr_data.h	/^    deng_ui8_t id_lenght;$/;"	m	struct:TGATypeHeader	typeref:typename:deng_ui8_t
image	headers/deng/rend_helpers.h	/^        VkImage image;$/;"	m	struct:deng::TextureImageData	typeref:typename:VkImage
image_available_semaphore_set	headers/deng/renderer.h	/^        std::vector<VkSemaphore> image_available_semaphore_set;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<VkSemaphore>
image_descriptor	headers/das/hdr_data.h	/^    deng_ui8_t image_descriptor;$/;"	m	struct:TGAInfoHeader	typeref:typename:deng_ui8_t
image_mem	headers/deng/rend_helpers.h	/^        VkDeviceMemory image_mem;$/;"	m	struct:deng::TextureImageData	typeref:typename:VkDeviceMemory
image_type	headers/das/hdr_data.h	/^    deng_ui8_t image_type;$/;"	m	struct:TGATypeHeader	typeref:typename:deng_ui8_t
image_view	headers/deng/rend_helpers.h	/^        VkImageView image_view;$/;"	m	struct:deng::TextureImageData	typeref:typename:VkImageView
ind_offset	headers/das/assets.h	/^    deng_ui64_t ind_offset;$/;"	m	struct:UNI_OFFSET	typeref:typename:deng_ui64_t
indexGlyphs	src/utils/font.cpp	/^    std::vector<char> StringRasterizer::indexGlyphs(BitmapStr &str) {$/;"	f	class:dengUtils::StringRasterizer	typeref:typename:std::vector<char>
indices	headers/das/assets.h	/^    deng_IndicesDynamic indices;$/;"	m	struct:deng_Asset	typeref:typename:deng_IndicesDynamic
indices	headers/dengui/dengui_window.h	/^        std::vector<deng_ui32_t> indices; $/;"	m	struct:dengui::WindowUpdateInfo	typeref:typename:std::vector<deng_ui32_t>
indices	headers/dengui/dengui_window.h	/^        std::vector<deng_ui32_t> indices;$/;"	m	struct:dengui::WindowElement	typeref:typename:std::vector<deng_ui32_t>
indices_count	headers/das/hdr_data.h	/^    deng_ui32_t indices_count;$/;"	m	struct:INDX_HDR	typeref:typename:deng_ui32_t
indices_data	headers/das/hdr_data.h	/^    deng_IndicesDynamic indices_data;$/;"	m	struct:INDX_HDR	typeref:typename:deng_IndicesDynamic
initRenderer	src/deng/renderer.cpp	/^    void Renderer::initRenderer ($/;"	f	class:deng::Renderer	typeref:typename:void
inputPoll	src/dengui/dengui_events.cpp	/^    void Events::inputPoll() {$/;"	f	class:dengui::Events	typeref:typename:void
isTimePassed	src/utils/timer.cpp	/^    bool Timer::isTimePassed(const int &ms) {$/;"	f	class:dengUtils::Timer	typeref:typename:bool
is_enabled	headers/deng/deng_surface_window.h	/^    bool_t is_enabled;$/;"	m	struct:deng_VirtualMousePosition	typeref:typename:bool_t
is_exit	src/deng/win32_surface.c	/^static bool_t is_exit = false;$/;"	v	typeref:typename:bool_t	file:
is_interactive	headers/dengui/dengui_window.h	/^        bool is_interactive;$/;"	m	struct:dengui::WindowElement	typeref:typename:bool
is_shown	headers/das/assets.h	/^    deng_ui8_t is_shown;$/;"	m	struct:deng_Asset	typeref:typename:deng_ui8_t
is_visible	headers/dengui/dengui_window.h	/^        bool is_visible;$/;"	m	struct:dengui::WindowElement	typeref:typename:bool
is_window_deleted	src/deng/win32_surface.c	/^static bool_t is_window_deleted = false;$/;"	v	typeref:typename:bool_t	file:
key	headers/common/hashmap.h	/^    void *key;$/;"	m	struct:ChainData	typeref:typename:void *
key	headers/common/hashmap.h	/^    void *key;$/;"	m	struct:HashData	typeref:typename:void *
key_count	headers/deng/deng_surface_window.h	/^    size_t key_count;$/;"	m	struct:deng_ActiveKeys	typeref:typename:size_t
key_count	headers/deng/deng_surface_window.h	/^    size_t key_count;$/;"	m	struct:deng_ReleasedKeys	typeref:typename:size_t
key_index	src/deng/win32_surface.c	/^static size_t key_index;$/;"	v	typeref:typename:size_t	file:
key_len	headers/common/hashmap.h	/^    size_t key_len;$/;"	m	struct:ChainData	typeref:typename:size_t
key_len	headers/common/hashmap.h	/^    size_t key_len;$/;"	m	struct:HashData	typeref:typename:size_t
label	headers/dengui/dengui_child.h	/^        char *label;$/;"	m	struct:dengui::PushButtonInfo	typeref:typename:char *
m_FOV	headers/deng/camera.h	/^        float m_FOV; \/\/ in degrees$/;"	m	class:deng::Camera	typeref:typename:float
m_FOV	headers/deng/deng_math.h	/^        float m_FOV;$/;"	m	class:dengMath::ProjectionMatrix	typeref:typename:float
m_aspect_ratio	headers/deng/deng_math.h	/^        float m_aspect_ratio;$/;"	m	class:dengMath::ProjectionMatrix	typeref:typename:float
m_asset_mut	headers/deng/renderer.h	/^        std::mutex m_asset_mut;        $/;"	m	class:deng::Renderer	typeref:typename:std::mutex
m_assets	headers/deng/renderer.h	/^        std::vector<deng_Asset> m_assets;$/;"	m	class:deng::Renderer	typeref:typename:std::vector<deng_Asset>
m_assets_windows	headers/dengui/map_editor_ui.h	/^        std::vector<Window*> m_assets_windows;$/;"	m	class:dengui::MapEditor	typeref:typename:std::vector<Window * >
m_buffer_data	headers/deng/renderer.h	/^        BufferData m_buffer_data;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:BufferData
m_camera_max_centre_point_coord	headers/deng/camera.h	/^        dengMath::vec2<float> m_camera_max_centre_point_coord;$/;"	m	class:deng::Camera	typeref:typename:dengMath::vec2<float>
m_camera_max_left_corner_coord	headers/deng/camera.h	/^        dengMath::vec2<float> m_camera_max_left_corner_coord;$/;"	m	class:deng::Camera	typeref:typename:dengMath::vec2<float>
m_camera_max_right_corner_coord	headers/deng/camera.h	/^        dengMath::vec2<float> m_camera_max_right_corner_coord;$/;"	m	class:deng::Camera	typeref:typename:dengMath::vec2<float>
m_camera_position	headers/deng/deng_math.h	/^        vec4<float> m_camera_position;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:vec4<float>
m_capabilities	headers/deng/rend_helpers.h	/^        VkSurfaceCapabilitiesKHR m_capabilities;$/;"	m	class:deng::SwapChainDetails	typeref:typename:VkSurfaceCapabilitiesKHR
m_clear_color	headers/deng/renderer.h	/^        dengMath::vec3<float> m_clear_color;$/;"	m	class:deng::Renderer	typeref:typename:dengMath::vec3<float>
m_click_elem_name	headers/dengui/dengui_events.h	/^        std::string m_click_elem_name;$/;"	m	class:dengui::Events	typeref:typename:std::string
m_cmd_update	headers/deng/renderer.h	/^        bool m_cmd_update = false;$/;"	m	class:deng::Renderer	typeref:typename:bool
m_color_image	headers/deng/renderer.h	/^        VkImage m_color_image;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:VkImage
m_color_image_mem	headers/deng/renderer.h	/^        VkDeviceMemory m_color_image_mem;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:VkDeviceMemory
m_color_image_view	headers/deng/renderer.h	/^        VkImageView m_color_image_view;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:VkImageView
m_colorblend_attachment	headers/deng/rend_helpers.h	/^        VkPipelineColorBlendAttachmentState m_colorblend_attachment{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineColorBlendAttachmentState
m_colorblend_state_createinfo	headers/deng/rend_helpers.h	/^        VkPipelineColorBlendStateCreateInfo m_colorblend_state_createinfo{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineColorBlendStateCreateInfo
m_count_fps	headers/deng/renderer.h	/^        bool m_count_fps;$/;"	m	class:deng::Renderer	typeref:typename:bool
m_cur_pos	headers/dengui/dengui_events.h	/^        dengMath::vec2<float> m_cur_pos;$/;"	m	class:dengui::Events	typeref:typename:dengMath::vec2<float>
m_current_rotation_from_X_axis	headers/deng/camera.h	/^        float m_current_rotation_from_X_axis;$/;"	m	class:deng::Camera	typeref:typename:float
m_debug_mes	headers/deng/renderer.h	/^        VkDebugUtilsMessengerEXT m_debug_mes;$/;"	m	struct:deng::VulkanInstanceInfo	typeref:typename:VkDebugUtilsMessengerEXT
m_depth_image	headers/deng/renderer.h	/^        VkImage m_depth_image;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:VkImage
m_depth_image_mem	headers/deng/renderer.h	/^        VkDeviceMemory m_depth_image_mem;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:VkDeviceMemory
m_depth_image_view	headers/deng/renderer.h	/^        VkImageView m_depth_image_view;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:VkImageView
m_depth_stencil	headers/deng/rend_helpers.h	/^        VkPipelineDepthStencilStateCreateInfo m_depth_stencil{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineDepthStencilStateCreateInfo
m_device	headers/deng/rend_helpers.h	/^        VkDevice m_device;$/;"	m	struct:deng::VulkanDeviceInfo	typeref:typename:VkDevice
m_draw_bounds	headers/utils/shapes.h	/^        dengMath::vec2<deng_ui32_t> m_draw_bounds;$/;"	m	class:dengUtils::CircleGenerator	typeref:typename:dengMath::vec2<deng_ui32_t>
m_draw_bounds	headers/utils/shapes.h	/^        dengMath::vec2<deng_ui32_t> m_draw_bounds;$/;"	m	class:dengUtils::RectangleGenerator	typeref:typename:dengMath::vec2<deng_ui32_t>
m_draw_bounds	headers/utils/shapes.h	/^        dengMath::vec2<deng_ui32_t> m_draw_bounds;$/;"	m	class:dengUtils::TriangleGenerator	typeref:typename:dengMath::vec2<deng_ui32_t>
m_draw_distance	headers/deng/camera.h	/^        float m_draw_distance; \/\/ distance$/;"	m	class:deng::Camera	typeref:typename:float
m_elem_infos	headers/dengui/dengui_events.h	/^        std::vector<WindowElement> m_elem_infos;$/;"	m	class:dengui::Events	typeref:typename:std::vector<WindowElement>
m_elem_mut	headers/dengui/dengui_events.h	/^        std::mutex m_elem_mut;$/;"	m	class:dengui::Events	typeref:typename:std::mutex
m_elem_names	headers/dengui/dengui_window.h	/^        std::vector<std::string> m_elem_names;$/;"	m	class:dengui::DropDownMenu	typeref:typename:std::vector<std::string>
m_enable_validation_layers	headers/deng/renderer.h	/^        bool m_enable_validation_layers;$/;"	m	class:deng::Renderer	typeref:typename:bool
m_enable_vsync	headers/deng/renderer.h	/^        bool m_enable_vsync;$/;"	m	class:deng::Renderer	typeref:typename:bool
m_extent	headers/deng/rend_helpers.h	/^        VkExtent2D m_extent;$/;"	m	class:deng::PipelineCreator	typeref:typename:VkExtent2D
m_extent	headers/deng/renderer.h	/^        VkExtent2D m_extent;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:VkExtent2D
m_far	headers/deng/deng_math.h	/^        float m_far;$/;"	m	class:dengMath::ProjectionMatrix	typeref:typename:float
m_far_plane	headers/deng/renderer.h	/^        const float m_far_plane = DENG_DEFAULT_FAR_PLANE;$/;"	m	class:deng::Renderer	typeref:typename:const float
m_fonts	headers/utils/font.h	/^        std::vector<std::string> m_fonts;$/;"	m	class:dengUtils::StringRasterizer	typeref:typename:std::vector<std::string>
m_format	headers/deng/renderer.h	/^        VkFormat m_format;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:VkFormat
m_formats	headers/deng/rend_helpers.h	/^        std::vector<VkSurfaceFormatKHR> m_formats;$/;"	m	class:deng::SwapChainDetails	typeref:typename:std::vector<VkSurfaceFormatKHR>
m_forward_side	headers/deng/deng_math.h	/^        vec4<float> m_forward_side;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:vec4<float>
m_frame_mut	headers/deng/renderer.h	/^        std::mutex m_frame_mut;$/;"	m	class:deng::Renderer	typeref:typename:std::mutex
m_framebuffers	headers/deng/renderer.h	/^        std::vector<VkFramebuffer> m_framebuffers;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<VkFramebuffer>
m_framebuffers	headers/deng/renderer.h	/^        std::vector<VkFramebuffer> m_framebuffers;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:std::vector<VkFramebuffer>
m_frozen_mouse_position	headers/deng/events.h	/^        vec2<float> m_frozen_mouse_position;$/;"	m	class:dengMath::Events	typeref:typename:vec2<float>
m_gpu	headers/deng/rend_helpers.h	/^        VkPhysicalDevice m_gpu;$/;"	m	struct:deng::VulkanDeviceInfo	typeref:typename:VkPhysicalDevice
m_graphics_family_index	headers/deng/rend_helpers.h	/^        deng_ui32_t m_graphics_family_index;$/;"	m	class:deng::QueueFamilyFinder	typeref:typename:deng_ui32_t
m_grid	headers/utils/grid_generator.h	/^        SpecifiedObject *m_grid;$/;"	m	class:dengUtils::GridManager	typeref:typename:SpecifiedObject *
m_id	headers/dengui/dengui_window.h	/^        std::string m_id;$/;"	m	class:dengui::Window	typeref:typename:std::string
m_info	headers/dengui/dengui_child.h	/^        ChildInfo m_info;$/;"	m	class:dengui::ChildWindow	typeref:typename:ChildInfo
m_info	headers/dengui/dengui_events.h	/^        EventInfo m_info;$/;"	m	class:dengui::Events	typeref:typename:EventInfo
m_input_asm_createinfo	headers/deng/rend_helpers.h	/^        VkPipelineInputAssemblyStateCreateInfo m_input_asm_createinfo{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineInputAssemblyStateCreateInfo
m_input_attr_descs	headers/deng/rend_helpers.h	/^        std::vector<VkVertexInputAttributeDescription> m_input_attr_descs{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:std::vector<VkVertexInputAttributeDescription>
m_input_binding_desc	headers/deng/rend_helpers.h	/^        VkVertexInputBindingDescription m_input_binding_desc{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkVertexInputBindingDescription
m_input_mode	headers/deng/window.h	/^        deng_InputMode m_input_mode;$/;"	m	class:deng::WindowWrap	typeref:typename:deng_InputMode
m_input_mode_change_timer	headers/deng/events.h	/^        dengUtils::Timer m_input_mode_change_timer;$/;"	m	class:dengMath::Events	typeref:typename:dengUtils::Timer
m_instance	headers/deng/renderer.h	/^        VkInstance m_instance;$/;"	m	struct:deng::VulkanInstanceInfo	typeref:typename:VkInstance
m_is_color_spec	headers/dengui/dengui_window.h	/^        bool m_is_color_spec;$/;"	m	class:dengui::Window	typeref:typename:bool
m_is_init	headers/deng/camera.h	/^        bool m_is_init;$/;"	m	class:deng::Camera	typeref:typename:bool
m_is_key_registered	headers/deng/events.h	/^        std::pair<bool, deng_Key> m_is_key_registered;$/;"	m	class:dengMath::Events	typeref:typename:std::pair<bool,deng_Key>
m_library_instance	headers/utils/font.h	/^        FT_Library m_library_instance;$/;"	m	class:dengUtils::StringRasterizer	typeref:typename:FT_Library
m_max_sample_count	headers/deng/renderer.h	/^        VkSampleCountFlagBits m_max_sample_count;$/;"	m	class:deng::InstanceCreator	typeref:typename:VkSampleCountFlagBits
m_max_vertex_buffer_distance	headers/utils/grid_generator.h	/^        float m_max_vertex_buffer_distance;$/;"	m	class:dengUtils::GridManager	typeref:typename:float
m_max_vertices	headers/utils/grid_generator.h	/^        dengMath::vec2<deng_i32_t> m_max_vertices;$/;"	m	class:dengUtils::GridManager	typeref:typename:dengMath::vec2<deng_i32_t>
m_min_vertices	headers/utils/grid_generator.h	/^        dengMath::vec2<deng_i32_t> m_min_vertices;$/;"	m	class:dengUtils::GridManager	typeref:typename:dengMath::vec2<deng_i32_t>
m_mouse_pos	headers/deng/camera.h	/^        dengMath::vec2<float> m_mouse_pos; $/;"	m	class:deng::Camera	typeref:typename:dengMath::vec2<float>
m_mouse_sens	headers/deng/camera.h	/^        dengMath::vec2<float> m_mouse_sens;$/;"	m	class:deng::Camera	typeref:typename:dengMath::vec2<float>
m_movement_speed	headers/deng/camera.h	/^        dengMath::vec4<float> m_movement_speed;$/;"	m	class:deng::Camera	typeref:typename:dengMath::vec4<float>
m_movement_timer	headers/deng/events.h	/^        dengUtils::Timer m_movement_timer;$/;"	m	class:dengMath::Events	typeref:typename:dengUtils::Timer
m_movements	headers/deng/events.h	/^        vec3<deng_MovementEvent> m_movements;$/;"	m	class:dengMath::Events	typeref:typename:vec3<deng_MovementEvent>
m_msaa_sample_c	headers/deng/renderer.h	/^        VkSampleCountFlagBits m_msaa_sample_c;$/;"	m	class:deng::SwapChainCreator	typeref:typename:VkSampleCountFlagBits
m_msaa_sample_count	headers/deng/renderer.h	/^        VkSampleCountFlagBits m_msaa_sample_count = VK_SAMPLE_COUNT_1_BIT;$/;"	m	class:deng::Renderer	typeref:typename:VkSampleCountFlagBits
m_multisample_createinfo	headers/deng/rend_helpers.h	/^        VkPipelineMultisampleStateCreateInfo m_multisample_createinfo{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineMultisampleStateCreateInfo
m_near	headers/deng/deng_math.h	/^        float m_near;$/;"	m	class:dengMath::ProjectionMatrix	typeref:typename:float
m_near_plane	headers/deng/renderer.h	/^        const float m_near_plane = DENG_DEFAULT_NEAR_PLANE;$/;"	m	class:deng::Renderer	typeref:typename:const float
m_p_assets	headers/deng/renderer.h	/^        std::vector<deng_Asset> *m_p_assets = NULL;$/;"	m	class:deng::DescriptorCreator	typeref:typename:std::vector<deng_Asset> *
m_p_assets	headers/deng/renderer.h	/^        std::vector<deng_Asset> *m_p_assets = NULL;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<deng_Asset> *
m_p_assets	headers/deng/renderer.h	/^        std::vector<deng_Asset> *m_p_assets;$/;"	m	class:deng::ResourceAllocator	typeref:typename:std::vector<deng_Asset> *
m_p_camera	headers/deng/events.h	/^        deng::Camera *m_p_camera;$/;"	m	class:dengMath::Events	typeref:typename:deng::Camera *
m_p_camera	headers/deng/renderer.h	/^        Camera *m_p_camera;$/;"	m	class:deng::Renderer	typeref:typename:Camera *
m_p_commandbuffers	headers/deng/renderer.h	/^        std::vector<VkCommandBuffer> *m_p_commandbuffers = NULL;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<VkCommandBuffer> *
m_p_commandpool	headers/deng/renderer.h	/^        VkCommandPool *m_p_commandpool = NULL;$/;"	m	class:deng::DrawCaller	typeref:typename:VkCommandPool *
m_p_dc	headers/deng/renderer.h	/^        DrawCaller *m_p_dc = NULL;$/;"	m	class:deng::Renderer	typeref:typename:DrawCaller *
m_p_desc_c	headers/deng/renderer.h	/^        DescriptorCreator *m_p_desc_c;$/;"	m	class:deng::Renderer	typeref:typename:DescriptorCreator *
m_p_ev	headers/deng/renderer.h	/^        dengMath::Events *m_p_ev;$/;"	m	class:deng::Renderer	typeref:typename:dengMath::Events *
m_p_ev	headers/dengui/map_editor_ui.h	/^        Events *m_p_ev;$/;"	m	class:dengui::MapEditor	typeref:typename:Events *
m_p_game_window	headers/deng/window.h	/^        deng_SurfaceWindow *m_p_game_window;$/;"	m	class:deng::WindowWrap	typeref:typename:deng_SurfaceWindow *
m_p_grid_color_b	headers/utils/grid_generator.h	/^        float *m_p_grid_color_b;$/;"	m	class:dengUtils::GridManager	typeref:typename:float *
m_p_grid_color_g	headers/utils/grid_generator.h	/^        float *m_p_grid_color_g;$/;"	m	class:dengUtils::GridManager	typeref:typename:float *
m_p_grid_color_r	headers/utils/grid_generator.h	/^        float *m_p_grid_color_r;$/;"	m	class:dengUtils::GridManager	typeref:typename:float *
m_p_grid_lenght	headers/utils/grid_generator.h	/^        float *m_p_grid_lenght;$/;"	m	class:dengUtils::GridManager	typeref:typename:float *
m_p_grid_width	headers/utils/grid_generator.h	/^        float *m_p_grid_width;$/;"	m	class:dengUtils::GridManager	typeref:typename:float *
m_p_ic	headers/deng/renderer.h	/^        InstanceCreator *m_p_ic = NULL;$/;"	m	class:deng::Renderer	typeref:typename:InstanceCreator *
m_p_main_win	headers/dengui/map_editor_ui.h	/^        Window *m_p_main_win;$/;"	m	class:dengui::MapEditor	typeref:typename:Window *
m_p_map_editor	headers/deng/renderer.h	/^        dengui::MapEditor *m_p_map_editor;$/;"	m	class:deng::Renderer	typeref:typename:dengui::MapEditor *
m_p_pipeline_data	headers/deng/rend_helpers.h	/^        PipelineData *m_p_pipeline_data;$/;"	m	class:deng::PipelineCreator	typeref:typename:PipelineData *
m_p_ra	headers/deng/renderer.h	/^        ResourceAllocator *m_p_ra = NULL;$/;"	m	class:deng::Renderer	typeref:typename:ResourceAllocator *
m_p_sc_details	headers/deng/renderer.h	/^        SwapChainDetails *m_p_sc_details;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:SwapChainDetails *
m_p_scc	headers/deng/renderer.h	/^        SwapChainCreator *m_p_scc = NULL;$/;"	m	class:deng::Renderer	typeref:typename:SwapChainCreator *
m_p_sr	headers/deng/renderer.h	/^        dengUtils::StringRasterizer *m_p_sr = NULL;$/;"	m	class:deng::Renderer	typeref:typename:dengUtils::StringRasterizer *
m_p_sr	headers/dengui/dengui_window.h	/^        dengUtils::StringRasterizer *m_p_sr;$/;"	m	class:dengui::BaseWindowShapes	typeref:typename:dengUtils::StringRasterizer *
m_p_sr	headers/dengui/dengui_window.h	/^        dengUtils::StringRasterizer *m_p_sr;$/;"	m	class:dengui::Window	typeref:typename:dengUtils::StringRasterizer *
m_p_textures	headers/deng/renderer.h	/^        std::vector<TextureImageData> *m_p_textures = NULL;$/;"	m	class:deng::DescriptorCreator	typeref:typename:std::vector<TextureImageData> *
m_p_textures	headers/deng/renderer.h	/^        std::vector<TextureImageData> *m_p_textures = NULL;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<TextureImageData> *
m_p_textures	headers/deng/renderer.h	/^        std::vector<TextureImageData> *m_p_textures;$/;"	m	class:deng::ResourceAllocator	typeref:typename:std::vector<TextureImageData> *
m_p_unmapped_ds	headers/deng/renderer.h	/^        std::vector<VkDescriptorSet> *m_p_unmapped_ds = NULL;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<VkDescriptorSet> *
m_p_validation_layer	headers/deng/renderer.h	/^        const char *m_p_validation_layer = "VK_LAYER_KHRONOS_validation";$/;"	m	class:deng::InstanceCreator	typeref:typename:const char *
m_p_win	headers/deng/rend_helpers.h	/^        WindowWrap *m_p_win;$/;"	m	struct:deng::VulkanDeviceInfo	typeref:typename:WindowWrap *
m_p_win	headers/dengui/dengui_events.h	/^        deng_SurfaceWindow *m_p_win;$/;"	m	class:dengui::Events	typeref:typename:deng_SurfaceWindow *
m_p_win	headers/utils/font.h	/^        deng::WindowWrap *m_p_win;$/;"	m	class:dengUtils::StringRasterizer	typeref:typename:deng::WindowWrap *
m_p_window_wrap	headers/deng/camera.h	/^        WindowWrap *m_p_window_wrap;$/;"	m	class:deng::Camera	typeref:typename:WindowWrap *
m_p_window_wrap	headers/deng/events.h	/^        deng::WindowWrap *m_p_window_wrap;$/;"	m	class:dengMath::Events	typeref:typename:deng::WindowWrap *
m_p_ww	headers/deng/renderer.h	/^        WindowWrap *m_p_ww = NULL;$/;"	m	class:deng::Renderer	typeref:typename:WindowWrap *
m_parent_ids	headers/dengui/dengui_window.h	/^        std::vector<WindowID> m_parent_ids;$/;"	m	class:dengui::DropDownMenu	typeref:typename:std::vector<WindowID>
m_pipelines	headers/deng/renderer.h	/^        std::array<PipelineData, DENG_PIPELINE_COUNT> m_pipelines;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:std::array<PipelineData,DENG_PIPELINE_COUNT>
m_pixel_size	headers/deng/window.h	/^        dengMath::vec2<double> m_pixel_size;$/;"	m	class:deng::WindowWrap	typeref:typename:dengMath::vec2<double>
m_pl_data	headers/deng/renderer.h	/^        std::array<PipelineData, DENG_PIPELINE_COUNT> m_pl_data;$/;"	m	class:deng::DrawCaller	typeref:typename:std::array<PipelineData,DENG_PIPELINE_COUNT>
m_pos	headers/dengui/dengui_window.h	/^        dengMath::vec2<float> m_pos;$/;"	m	class:dengui::Window	typeref:typename:dengMath::vec2<float>
m_present_family_index	headers/deng/rend_helpers.h	/^        deng_ui32_t m_present_family_index;$/;"	m	class:deng::QueueFamilyFinder	typeref:typename:deng_ui32_t
m_present_mode	headers/deng/renderer.h	/^        VkPresentModeKHR m_present_mode;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:VkPresentModeKHR
m_present_modes	headers/deng/rend_helpers.h	/^        std::vector<VkPresentModeKHR> m_present_modes;$/;"	m	class:deng::SwapChainDetails	typeref:typename:std::vector<VkPresentModeKHR>
m_prev_active_c	headers/deng/camera.h	/^        deng_i32_t m_prev_active_c;$/;"	m	class:deng::Camera	typeref:typename:deng_i32_t
m_primary_color	headers/dengui/dengui_window.h	/^        dengMath::vec4<deng_vec_t> m_primary_color;$/;"	m	class:dengui::Window	typeref:typename:dengMath::vec4<deng_vec_t>
m_qff	headers/deng/renderer.h	/^        QueueFamilyFinder m_qff;$/;"	m	class:deng::DrawCaller	typeref:typename:QueueFamilyFinder
m_qff	headers/deng/renderer.h	/^        QueueFamilyFinder m_qff;$/;"	m	class:deng::SwapChainCreator	typeref:typename:QueueFamilyFinder
m_qff	headers/deng/renderer.h	/^        QueueFamilyFinder m_qff;$/;"	m	struct:deng::VulkanInstanceInfo	typeref:typename:QueueFamilyFinder
m_rasterization_createinfo	headers/deng/rend_helpers.h	/^        VkPipelineRasterizationStateCreateInfo m_rasterization_createinfo{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineRasterizationStateCreateInfo
m_renderpass	headers/deng/rend_helpers.h	/^        VkRenderPass m_renderpass;$/;"	m	class:deng::PipelineCreator	typeref:typename:VkRenderPass
m_renderpass	headers/deng/renderer.h	/^        VkRenderPass m_renderpass;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:VkRenderPass
m_required_extension_names	headers/deng/renderer.h	/^        std::vector<const char*> m_required_extension_names;$/;"	m	class:deng::InstanceCreator	typeref:typename:std::vector<const char * >
m_right_side	headers/deng/deng_math.h	/^        vec4<float> m_right_side;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:vec4<float>
m_rot_x_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_rot_x_mat;$/;"	m	class:dengMath::ModelMatrix	typeref:typename:mat4<deng_vec_t>
m_rot_x_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_rot_x_mat;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:mat4<deng_vec_t>
m_rot_y_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_rot_y_mat;$/;"	m	class:dengMath::ModelMatrix	typeref:typename:mat4<deng_vec_t>
m_rot_y_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_rot_y_mat;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:mat4<deng_vec_t>
m_rot_z_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_rot_z_mat;$/;"	m	class:dengMath::ModelMatrix	typeref:typename:mat4<deng_vec_t>
m_rot_z_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_rot_z_mat;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:mat4<deng_vec_t>
m_sample_count	headers/deng/renderer.h	/^        VkSampleCountFlagBits m_sample_count;$/;"	m	struct:deng::VulkanResourceInfo	typeref:typename:VkSampleCountFlagBits
m_scale_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_scale_mat;$/;"	m	class:dengMath::ModelMatrix	typeref:typename:mat4<deng_vec_t>
m_scissor	headers/deng/rend_helpers.h	/^        VkRect2D m_scissor{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkRect2D
m_secondary_color	headers/dengui/dengui_window.h	/^        dengMath::vec4<deng_vec_t> m_secondary_color;$/;"	m	class:dengui::Window	typeref:typename:dengMath::vec4<deng_vec_t>
m_shader_modules	headers/deng/rend_helpers.h	/^        std::array<VkShaderModule, 2> m_shader_modules{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:std::array<VkShaderModule,2>
m_shader_stage_createinfos	headers/deng/rend_helpers.h	/^        std::array<VkPipelineShaderStageCreateInfo, 2> m_shader_stage_createinfos{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:std::array<VkPipelineShaderStageCreateInfo,2>
m_size	headers/deng/window.h	/^        dengMath::vec2<deng_ui32_t> m_size;$/;"	m	class:deng::WindowWrap	typeref:typename:dengMath::vec2<deng_ui32_t>
m_size	headers/dengui/dengui_window.h	/^        dengMath::vec2<float> m_size;$/;"	m	class:dengui::Window	typeref:typename:dengMath::vec2<float>
m_surface	headers/deng/renderer.h	/^        VkSurfaceKHR m_surface;$/;"	m	struct:deng::VulkanInstanceInfo	typeref:typename:VkSurfaceKHR
m_surface_format	headers/deng/renderer.h	/^        VkSurfaceFormatKHR m_surface_format;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:VkSurfaceFormatKHR
m_swapchain	headers/deng/renderer.h	/^        VkSwapchainKHR m_swapchain;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:VkSwapchainKHR
m_swapchain_image_views	headers/deng/renderer.h	/^        std::vector<VkImageView> m_swapchain_image_views;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:std::vector<VkImageView>
m_swapchain_images	headers/deng/renderer.h	/^        std::vector<VkImage> m_swapchain_images;$/;"	m	struct:deng::VulkanSwapChainInfo	typeref:typename:std::vector<VkImage>
m_tertiary_color	headers/dengui/dengui_window.h	/^        dengMath::vec4<deng_vec_t> m_tertiary_color;$/;"	m	class:dengui::Window	typeref:typename:dengMath::vec4<deng_vec_t>
m_tex_linear_filtering_support	headers/deng/renderer.h	/^        bool m_tex_linear_filtering_support;$/;"	m	class:deng::InstanceCreator	typeref:typename:bool
m_texture_descriptor_size	headers/deng/renderer.h	/^        deng_ui32_t m_texture_descriptor_size;$/;"	m	class:deng::DescriptorCreator	typeref:typename:deng_ui32_t
m_texture_mapped_desc_pool	headers/deng/renderer.h	/^        VkDescriptorPool m_texture_mapped_desc_pool;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:VkDescriptorPool
m_texture_mapped_desc_set_layout	headers/deng/renderer.h	/^        VkDescriptorSetLayout m_texture_mapped_desc_set_layout;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:VkDescriptorSetLayout
m_texture_mapped_pl	headers/deng/renderer.h	/^        VkPipelineLayout m_texture_mapped_pl;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:VkPipelineLayout
m_texture_windows	headers/dengui/map_editor_ui.h	/^        std::vector<Window*> m_texture_windows;$/;"	m	class:dengui::MapEditor	typeref:typename:std::vector<Window * >
m_textures	headers/deng/renderer.h	/^        std::vector<TextureImageData> m_textures;$/;"	m	class:deng::Renderer	typeref:typename:std::vector<TextureImageData>
m_timer	headers/deng/renderer.h	/^        dengUtils::Timer m_timer;$/;"	m	class:deng::Renderer	typeref:typename:dengUtils::Timer
m_title	headers/deng/window.h	/^        char *m_title;$/;"	m	class:deng::WindowWrap	typeref:typename:char *
m_transformation_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_transformation_mat;$/;"	m	class:dengMath::ModelMatrix	typeref:typename:mat4<deng_vec_t>
m_transformation_mat	headers/deng/deng_math.h	/^        mat4<deng_vec_t> m_transformation_mat;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:mat4<deng_vec_t>
m_unmapped_desc_pool	headers/deng/renderer.h	/^        VkDescriptorPool m_unmapped_desc_pool;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:VkDescriptorPool
m_unmapped_desc_set_layout	headers/deng/renderer.h	/^        VkDescriptorSetLayout m_unmapped_desc_set_layout;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:VkDescriptorSetLayout
m_unmapped_descriptor_sets	headers/deng/renderer.h	/^        std::vector<VkDescriptorSet> m_unmapped_descriptor_sets;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:std::vector<VkDescriptorSet>
m_unmapped_pl	headers/deng/renderer.h	/^        VkPipelineLayout m_unmapped_pl;$/;"	m	struct:deng::VulkanDescriptorInfo	typeref:typename:VkPipelineLayout
m_up_side	headers/deng/deng_math.h	/^        vec4<float> m_up_side;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:vec4<float>
m_update_mut	headers/deng/renderer.h	/^        std::mutex m_update_mut;$/;"	m	class:deng::Renderer	typeref:typename:std::mutex
m_usage_mode	headers/deng/renderer.h	/^        deng_RendererUsageMode m_usage_mode;$/;"	m	class:deng::Renderer	typeref:typename:deng_RendererUsageMode
m_vert_input_create_info	headers/deng/rend_helpers.h	/^        VkPipelineVertexInputStateCreateInfo m_vert_input_create_info{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineVertexInputStateCreateInfo
m_viewport	headers/deng/rend_helpers.h	/^        VkViewport m_viewport{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkViewport
m_viewport_state_createinfo	headers/deng/rend_helpers.h	/^        VkPipelineViewportStateCreateInfo m_viewport_state_createinfo{};$/;"	m	struct:deng::PipelineCreateinfoSpecifiers	typeref:typename:VkPipelineViewportStateCreateInfo
m_win_elems	headers/dengui/dengui_window.h	/^        std::vector<WindowElement> m_win_elems;$/;"	m	class:dengui::Window	typeref:typename:std::vector<WindowElement>
m_window_bounds	headers/dengui/dengui_window.h	/^        dengMath::vec2<deng_ui32_t> m_window_bounds;$/;"	m	class:dengui::BaseWindowShapes	typeref:typename:dengMath::vec2<deng_ui32_t>
m_window_names	headers/dengui/dengui_events.h	/^        std::vector<std::string> m_window_names; $/;"	m	class:dengui::Events	typeref:typename:std::vector<std::string>
m_wt	headers/dengui/dengui_window.h	/^        WindowType m_wt;$/;"	m	class:dengui::Window	typeref:typename:WindowType
m_zero_camera_rotation_mouse_pos	headers/deng/camera.h	/^        dengMath::vec2<float> m_zero_camera_rotation_mouse_pos;$/;"	m	class:deng::Camera	typeref:typename:dengMath::vec2<float>
main	src/common/test.c	/^int main() {$/;"	f	typeref:typename:int
main	src/das/dam.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	src/deng/surface_test.c	/^int main() {$/;"	f	typeref:typename:int
main	src/main/feature_testing/binary_search_test/binary_search_test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/feature_testing/css_engine_test/css_titlebar_data_test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/feature_testing/fm_test/fm_css_property_test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/feature_testing/fm_test/fm_folder_contents_test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/feature_testing/math_test/math_conversion_test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/feature_testing/typename_finder_test/typename_finder_test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/feature_testing/ui_testing/font_test.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/sandbox_3d.cpp	/^int main() {$/;"	f	typeref:typename:int
main	src/main/sandbox_shape.cpp	/^int main() {$/;"	f	typeref:typename:int
makeAbsCircleAsset	src/utils/shapes.cpp	/^    deng_Asset CircleGenerator::makeAbsCircleAsset ($/;"	f	class:dengUtils::CircleGenerator	typeref:typename:deng_Asset
makeAbsTriangleAsset	src/utils/shapes.cpp	/^    deng_Asset TriangleGenerator::makeAbsTriangleAsset ($/;"	f	class:dengUtils::TriangleGenerator	typeref:typename:deng_Asset
makeBuffer	src/deng/rend_helpers.cpp	/^    VkMemoryRequirements BufferCreator::makeBuffer ($/;"	f	class:deng::BufferCreator	typeref:typename:VkMemoryRequirements
makeFrame	src/deng/renderer.cpp	/^    void Renderer::makeFrame() {$/;"	f	class:deng::Renderer	typeref:typename:void
makeImage	src/deng/rend_helpers.cpp	/^    VkMemoryRequirements BufferCreator::makeImage ($/;"	f	class:deng::BufferCreator	typeref:typename:VkMemoryRequirements
makeMappedAbsRecAsset	src/utils/shapes.cpp	/^    deng_Asset RectangleGenerator::makeMappedAbsRecAsset ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:deng_Asset
makeMappedRelRecAsset	src/utils/shapes.cpp	/^    deng_Asset RectangleGenerator::makeMappedRelRecAsset ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:deng_Asset
makeRelCircleAsset	src/utils/shapes.cpp	/^    deng_Asset CircleGenerator::makeRelCircleAsset ($/;"	f	class:dengUtils::CircleGenerator	typeref:typename:deng_Asset
makeRelTriangleAsset	src/utils/shapes.cpp	/^    deng_Asset TriangleGenerator::makeRelTriangleAsset ($/;"	f	class:dengUtils::TriangleGenerator	typeref:typename:deng_Asset
makeTexMappedAsset	src/utils/shapes.cpp	/^    deng_Asset AssetMaker2D::makeTexMappedAsset ($/;"	f	class:dengUtils::AssetMaker2D	typeref:typename:deng_Asset
makeUnmappedAbsRecAsset	src/utils/shapes.cpp	/^    deng_Asset RectangleGenerator::makeUnmappedAbsRecAsset ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:deng_Asset
makeUnmappedAsset	src/utils/shapes.cpp	/^    deng_Asset AssetMaker2D::makeUnmappedAsset ($/;"	f	class:dengUtils::AssetMaker2D	typeref:typename:deng_Asset
makeUnmappedRelRecAsset	src/utils/shapes.cpp	/^    deng_Asset RectangleGenerator::makeUnmappedRelRecAsset ($/;"	f	class:dengUtils::RectangleGenerator	typeref:typename:deng_Asset
makeWindow	src/dengui/dengui_window.cpp	/^    void Window::makeWindow ($/;"	f	class:dengui::Window	typeref:typename:void
map_data	headers/common/hashmap.h	/^    HashData *map_data;$/;"	m	struct:Hashmap	typeref:typename:HashData *
map_size	headers/common/hashmap.h	/^    size_t map_size;$/;"	m	struct:Hashmap	typeref:typename:size_t
mapped_vert	headers/dengui/dengui_window.h	/^        std::vector<VERT_MAPPED_2D> mapped_vert;$/;"	m	struct:dengui::WindowElement	typeref:typename:std::vector<VERT_MAPPED_2D>
mapped_vert	headers/dengui/dengui_window.h	/^        std::vector<VERT_MAPPED_2D> mapped_vert;$/;"	m	struct:dengui::WindowUpdateInfo	typeref:typename:std::vector<VERT_MAPPED_2D>
mat2	headers/deng/deng_math.h	/^    struct mat2 {$/;"	s	namespace:dengMath
mat3	headers/deng/deng_math.h	/^    struct mat3 {$/;"	s	namespace:dengMath
mat3x2	headers/deng/deng_math.h	/^    struct mat3x2 {$/;"	s	namespace:dengMath
mat4	headers/deng/deng_math.h	/^    struct mat4 {$/;"	s	namespace:dengMath
mat_uniform_buffer_mem	headers/deng/rend_helpers.h	/^        std::vector<VkDeviceMemory> mat_uniform_buffer_mem;$/;"	m	struct:deng::BufferData	typeref:typename:std::vector<VkDeviceMemory>
mat_uniform_buffers	headers/deng/rend_helpers.h	/^        std::vector<VkBuffer> mat_uniform_buffers;$/;"	m	struct:deng::BufferData	typeref:typename:std::vector<VkBuffer>
maxTriangleCallback	src/dengui/dengui_events.cpp	/^    void maxTriangleCallback ($/;"	f	namespace:dengui	typeref:typename:void
memory_offset	headers/das/assets.h	/^    deng_ui64_t memory_offset;$/;"	m	struct:deng_IndicesDynamic	typeref:typename:deng_ui64_t
memory_offset	headers/das/assets.h	/^    deng_ui64_t memory_offset;$/;"	m	struct:deng_PixelDataDynamic	typeref:typename:deng_ui64_t
memory_offset	headers/das/assets.h	/^    deng_ui64_t memory_offset;$/;"	m	struct:deng_VertDynamic	typeref:typename:deng_ui64_t
minTriangleCallback	src/dengui/dengui_events.cpp	/^    void minTriangleCallback ($/;"	f	namespace:dengui	typeref:typename:void
mkBuffers	src/deng/renderer.cpp	/^    void ResourceAllocator::mkBuffers ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkClose	src/dengui/dengui_window.cpp	/^    void Window::mkClose ($/;"	f	class:dengui::Window	typeref:typename:void
mkColorResources	src/deng/renderer.cpp	/^    void ResourceAllocator::mkColorResources ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkCommandPool	src/deng/renderer.cpp	/^    void DrawCaller::mkCommandPool(VkDevice device) {$/;"	f	class:deng::DrawCaller	typeref:typename:void
mkDebugMessenger	src/deng/renderer.cpp	/^    void InstanceCreator::mkDebugMessenger() {$/;"	f	class:deng::InstanceCreator	typeref:typename:void
mkDepthResources	src/deng/renderer.cpp	/^    void ResourceAllocator::mkDepthResources ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkDescriptorPools	src/deng/renderer.cpp	/^    void DescriptorCreator::mkDescriptorPools ($/;"	f	class:deng::DescriptorCreator	typeref:typename:void
mkDescriptorSetLayouts	src/deng/renderer.cpp	/^    void DescriptorCreator::mkDescriptorSetLayouts(VkDevice &device) {$/;"	f	class:deng::DescriptorCreator	typeref:typename:void
mkForm	src/dengui/dengui_window.cpp	/^    void Window::mkForm(WindowInfo *p_wi) {$/;"	f	class:dengui::Window	typeref:typename:void
mkFrameBuffers	src/deng/renderer.cpp	/^    void ResourceAllocator::mkFrameBuffers ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkGlyphs	src/utils/font.cpp	/^    void StringRasterizer::mkGlyphs ($/;"	f	class:dengUtils::StringRasterizer	typeref:typename:void
mkGraphicsPipelines	src/deng/renderer.cpp	/^    void DescriptorCreator::mkGraphicsPipelines ($/;"	f	class:deng::DescriptorCreator	typeref:typename:void
mkInstance	src/deng/renderer.cpp	/^    void InstanceCreator::mkInstance(bool &enable_validation_layers) {$/;"	f	class:deng::InstanceCreator	typeref:typename:void
mkLogicalDevice	src/deng/renderer.cpp	/^    void InstanceCreator::mkLogicalDevice(bool &enable_validation_layers) {$/;"	f	class:deng::InstanceCreator	typeref:typename:void
mkMaximiseTriangle	src/dengui/dengui_window.cpp	/^    void Window::mkMaximiseTriangle ($/;"	f	class:dengui::Window	typeref:typename:void
mkMinimiseTriangle	src/dengui/dengui_window.cpp	/^    void Window::mkMinimiseTriangle ($/;"	f	class:dengui::Window	typeref:typename:void
mkMipMaps	src/deng/renderer.cpp	/^    void ResourceAllocator::mkMipMaps ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkPipelineLayouts	src/deng/renderer.cpp	/^    void DescriptorCreator::mkPipelineLayouts(VkDevice &device) {$/;"	f	class:deng::DescriptorCreator	typeref:typename:void
mkRenderPass	src/deng/renderer.cpp	/^    void SwapChainCreator::mkRenderPass() {$/;"	f	class:deng::SwapChainCreator	typeref:typename:void
mkSCImageViews	src/deng/renderer.cpp	/^    void SwapChainCreator::mkSCImageViews() {$/;"	f	class:deng::SwapChainCreator	typeref:typename:void
mkSwapChain	src/deng/renderer.cpp	/^    void SwapChainCreator::mkSwapChain ($/;"	f	class:deng::SwapChainCreator	typeref:typename:void
mkSwapChainSettings	src/deng/renderer.cpp	/^    void SwapChainCreator::mkSwapChainSettings() {$/;"	f	class:deng::SwapChainCreator	typeref:typename:void
mkSynchronisation	src/deng/renderer.cpp	/^    void DrawCaller::mkSynchronisation(VkDevice &device) {$/;"	f	class:deng::DrawCaller	typeref:typename:void
mkTexMappedDS	src/deng/renderer.cpp	/^    void DescriptorCreator::mkTexMappedDS ($/;"	f	class:deng::DescriptorCreator	typeref:typename:void
mkTextbox	src/utils/font.cpp	/^    void StringRasterizer::mkTextbox ($/;"	f	class:dengUtils::StringRasterizer	typeref:typename:void
mkTextureImages	src/deng/renderer.cpp	/^    void ResourceAllocator::mkTextureImages ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkTextureSampler	src/deng/renderer.cpp	/^    void ResourceAllocator::mkTextureSampler ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkTitle	src/dengui/dengui_window.cpp	/^    void Window::mkTitle ($/;"	f	class:dengui::Window	typeref:typename:void
mkTitlebar	src/dengui/dengui_window.cpp	/^    void Window::mkTitlebar ($/;"	f	class:dengui::Window	typeref:typename:void
mkUniformBuffers	src/deng/renderer.cpp	/^    void ResourceAllocator::mkUniformBuffers ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
mkUnmappedDS	src/deng/renderer.cpp	/^    void DescriptorCreator::mkUnmappedDS ($/;"	f	class:deng::DescriptorCreator	typeref:typename:void
mkWindowSurface	src/deng/renderer.cpp	/^    void InstanceCreator::mkWindowSurface() {$/;"	f	class:deng::InstanceCreator	typeref:typename:void
mode	headers/deng/deng_surface_window.h	/^    int mode;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:int
mouse_coords	headers/dengui/dengui_events.h	/^        dengMath::vec2<float> mouse_coords;$/;"	m	struct:dengui::MouseInputInfo	typeref:typename:dengMath::vec2<float>
mouse_input	headers/dengui/dengui_events.h	/^        deng_InputMode mouse_input;$/;"	m	struct:dengui::MouseInputInfo	typeref:typename:deng_InputMode
mouse_x_pos	headers/deng/deng_surface_window.h	/^        LONG mouse_x_pos;$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:LONG
mouse_y_pos	headers/deng/deng_surface_window.h	/^        LONG mouse_y_pos;$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:LONG
moveB	src/deng/camera.cpp	/^    void Camera::moveB() {$/;"	f	class:deng::Camera	typeref:typename:void
moveDown	src/deng/camera.cpp	/^    void Camera::moveDown() {$/;"	f	class:deng::Camera	typeref:typename:void
moveF	src/deng/camera.cpp	/^    void Camera::moveF() {$/;"	f	class:deng::Camera	typeref:typename:void
moveL	src/deng/camera.cpp	/^    void Camera::moveL() {$/;"	f	class:deng::Camera	typeref:typename:void
moveR	src/deng/camera.cpp	/^    void Camera::moveR() {$/;"	f	class:deng::Camera	typeref:typename:void
moveUp	src/deng/camera.cpp	/^    void Camera::moveUp(){$/;"	f	class:deng::Camera	typeref:typename:void
movement_x	headers/deng/deng_surface_window.h	/^    float movement_x;$/;"	m	struct:deng_VirtualMousePosition	typeref:typename:float
movement_y	headers/deng/deng_surface_window.h	/^    float movement_y;$/;"	m	struct:deng_VirtualMousePosition	typeref:typename:float
mut	headers/dengui/dengui_events.h	/^        std::mutex mut;$/;"	m	struct:dengui::MouseInputInfo	typeref:typename:std::mutex
mut	headers/dengui/dengui_window.h	/^        std::mutex mut;$/;"	m	struct:dengui::SharedWindowUpdateInfos	typeref:typename:std::mutex
name_size	headers/das/hdr_data.h	/^    deng_ui8_t name_size;$/;"	m	struct:INFO_HDR	typeref:typename:deng_ui8_t
newHashmap	src/common/hashmap.c	/^void newHashmap ($/;"	f	typeref:typename:void
newPxStr	src/utils/font.cpp	/^    void StringRasterizer::newPxStr ($/;"	f	class:dengUtils::StringRasterizer	typeref:typename:void
newVecStr	src/utils/font.cpp	/^    void StringRasterizer::newVecStr ($/;"	f	class:dengUtils::StringRasterizer	typeref:typename:void
nor_x	headers/das/assets.h	/^    deng_vec_t nor_x;$/;"	m	struct:deng_ObjNormalData	typeref:typename:deng_vec_t
nor_y	headers/das/assets.h	/^    deng_vec_t nor_y;$/;"	m	struct:deng_ObjNormalData	typeref:typename:deng_vec_t
nor_z	headers/das/assets.h	/^    deng_vec_t nor_z;$/;"	m	struct:deng_ObjNormalData	typeref:typename:deng_vec_t
norm	headers/das/data_loader.h	/^        deng_ui32_t norm;$/;"	m	struct:IndexSet	typeref:typename:deng_ui32_t
norm_data	headers/das/assets.h	/^    deng_ObjNormalData norm_data;$/;"	m	struct:VERT_MAPPED_NOR	typeref:typename:deng_ObjNormalData
norm_data	headers/das/assets.h	/^    deng_ObjNormalData norm_data;$/;"	m	struct:VERT_UNMAPPED_NOR	typeref:typename:deng_ObjNormalData
offset_data	headers/das/hdr_data.h	/^    deng_ui32_t offset_data;$/;"	m	struct:BMPFileHeader	typeref:typename:deng_ui32_t
onClick	headers/dengui/dengui_child.h	/^        void (*onClick)(WindowElement*, Events*);$/;"	m	struct:dengui::PushButtonInfo	typeref:typename:void (*)(WindowElement *,Events *)
onLMBClickFunc	headers/dengui/dengui_window.h	/^        void (*onLMBClickFunc)(WindowElement*, Events*);$/;"	m	struct:dengui::WindowElement	typeref:typename:void (*)(WindowElement *,Events *)
onMMBClickFunc	headers/dengui/dengui_window.h	/^        void (*onMMBClickFunc)(WindowElement*, Events*);$/;"	m	struct:dengui::WindowElement	typeref:typename:void (*)(WindowElement *,Events *)
onRMBClickFunc	headers/dengui/dengui_window.h	/^        void (*onRMBClickFunc)(WindowElement*, Events*);$/;"	m	struct:dengui::WindowElement	typeref:typename:void (*)(WindowElement *,Events *)
onScrDownFunc	headers/dengui/dengui_window.h	/^        void (*onScrDownFunc)(WindowElement*, Events*);$/;"	m	struct:dengui::WindowElement	typeref:typename:void (*)(WindowElement *,Events *)
onScrUpFunc	headers/dengui/dengui_window.h	/^        void (*onScrUpFunc)(WindowElement*, Events*);$/;"	m	struct:dengui::WindowElement	typeref:typename:void (*)(WindowElement *,Events *)
operator *	headers/deng/deng_math.h	/^        mat3<T> operator*(const mat3<T> &matrix) {$/;"	f	struct:dengMath::mat3	typeref:typename:mat3<T>
operator *	headers/deng/deng_math.h	/^        mat4<T> operator*(const mat4<T> &matrix) {$/;"	f	struct:dengMath::mat4	typeref:typename:mat4<T>
operator *	headers/deng/deng_math.h	/^        vec4<T> operator*(const vec3<T> vector) {$/;"	f	struct:dengMath::mat4	typeref:typename:vec4<T>
operator +	headers/deng/deng_math.h	/^        vec2<T> operator+(const vec2<T> &vector) {$/;"	f	struct:dengMath::vec2	typeref:typename:vec2<T>
operator +	headers/deng/deng_math.h	/^        vec3<T> operator+(const vec3<T> &vector) {$/;"	f	struct:dengMath::vec3	typeref:typename:vec3<T>
operator +	headers/deng/deng_math.h	/^        vec4<T> operator+(const vec4<T> &vector) {$/;"	f	struct:dengMath::vec4	typeref:typename:vec4<T>
operator -	headers/deng/deng_math.h	/^        vec2<T> operator-(vec2<T> vector) {$/;"	f	struct:dengMath::vec2	typeref:typename:vec2<T>
operator -	headers/deng/deng_math.h	/^        vec3<T> operator-(const vec3<T> &vector) {$/;"	f	struct:dengMath::vec3	typeref:typename:vec3<T>
operator -	headers/deng/deng_math.h	/^        vec4<T> operator-(const vec4<T> &vector) {$/;"	f	struct:dengMath::vec4	typeref:typename:vec4<T>
operator <	headers/deng/deng_math.h	/^        bool operator<(vec2<T> vector) { return first < vector.first && second < vector.second; /;"	f	struct:dengMath::vec2	typeref:typename:bool
operator <	headers/deng/deng_math.h	/^        bool operator<(vec3<T> vector) { return first < vector.first && second < vector.second &/;"	f	struct:dengMath::vec3	typeref:typename:bool
operator <	headers/deng/deng_math.h	/^        bool operator<(vec4<T> vector) { return this->first < vector.first && this->second < vec/;"	f	struct:dengMath::vec4	typeref:typename:bool
operator =	headers/utils/font.h	/^        void operator=(const char* input) { text = input; }$/;"	f	struct:dengUtils::BitmapStr	typeref:typename:void
operator ==	headers/deng/deng_math.h	/^        bool operator==(vec2<T> vector) { return this->first == vector.first && this->second == /;"	f	struct:dengMath::vec2	typeref:typename:bool
operator ==	headers/deng/deng_math.h	/^        bool operator==(vec3<T> vector) { return this->first == vector.first && this->second == /;"	f	struct:dengMath::vec3	typeref:typename:bool
operator ==	headers/deng/deng_math.h	/^        bool operator==(vec4<T> vector) { return this->first == vector.first && this->second == /;"	f	struct:dengMath::vec4	typeref:typename:bool
operator >	headers/deng/deng_math.h	/^        bool operator>(vec2<T> vector) { return first > vector.first && second > vector.second; /;"	f	struct:dengMath::vec2	typeref:typename:bool
operator >	headers/deng/deng_math.h	/^        bool operator>(vec3<T> vector) { return first > vector.first && second > vector.second &/;"	f	struct:dengMath::vec3	typeref:typename:bool
operator >	headers/deng/deng_math.h	/^        bool operator>(vec4<T> vector) { return this->first > vector.first && this->second > vec/;"	f	struct:dengMath::vec4	typeref:typename:bool
operator >>	headers/deng/deng_math.h	/^        vec3<T> operator>>(vec3<T> vector) {$/;"	f	struct:dengMath::vec2	typeref:typename:vec3<T>
operator >>	headers/deng/deng_math.h	/^        vec4<T> operator>>(vec4<T> vector) {$/;"	f	struct:dengMath::vec2	typeref:typename:vec4<T>
operator >>	headers/deng/deng_math.h	/^        vec4<T> operator>>(vec4<T> vector) {$/;"	f	struct:dengMath::vec3	typeref:typename:vec4<T>
orig_x	headers/deng/deng_surface_window.h	/^    float orig_x;$/;"	m	struct:deng_VirtualMousePosition	typeref:typename:float
orig_y	headers/deng/deng_surface_window.h	/^    float orig_y;$/;"	m	struct:deng_VirtualMousePosition	typeref:typename:float
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/dam\/common.c.o"$/;"	s	object:23
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/dam\/dam.c.o"$/;"	s	object:20
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/dam\/das_handler.c.o"$/;"	s	object:21
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/dam\/data_loader.c.o"$/;"	s	object:22
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/camera.cpp.o"$/;"	s	object:1
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/common.c.o"$/;"	s	object:13
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/das_handler.c.o"$/;"	s	object:14
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/data_loader.c.o"$/;"	s	object:15
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/deng_math.cpp.o"$/;"	s	object:5
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/dengui_events.cpp.o"$/;"	s	object:10
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/dengui_window.cpp.o"$/;"	s	object:11
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/events.cpp.o"$/;"	s	object:6
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/font.cpp.o"$/;"	s	object:7
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/key_translation.c.o"$/;"	s	object:16
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/key_vector.c.o"$/;"	s	object:17
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/map_editor_ui.cpp.o"$/;"	s	object:12
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/rend_helpers.cpp.o"$/;"	s	object:4
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/renderer.cpp.o"$/;"	s	object:2
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/shapes.cpp.o"$/;"	s	object:9
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/timer.cpp.o"$/;"	s	object:8
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/vulkan_handler.c.o"$/;"	s	object:18
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/window.cpp.o"$/;"	s	object:3
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/libdeng\/x11_surface.c.o"$/;"	s	object:19
output	compile_commands.json	/^    "output": "\/home\/karl\/GIT\/deng\/build\/obj\/sandboxapp\/sandbox.cpp.o"$/;"	s	object:0
overlap	headers/dengui/dengui_child.h	/^        ChildOverlapMode overlap;  $/;"	m	struct:dengui::ChildInfo	typeref:typename:ChildOverlapMode
p_assets	headers/dengui/dengui_events.h	/^        std::vector<deng_Asset> *p_assets;$/;"	m	struct:dengui::EventInfo	typeref:typename:std::vector<deng_Asset> *
p_btn	headers/deng/deng_surface_window.h	/^    deng_MouseButton *p_btn;$/;"	m	struct:deng_ActiveKeys	typeref:typename:deng_MouseButton *
p_btn	headers/deng/deng_surface_window.h	/^    deng_MouseButton *p_btn;$/;"	m	struct:deng_ReleasedKeys	typeref:typename:deng_MouseButton *
p_dc	headers/dengui/dengui_events.h	/^        deng::DrawCaller *p_dc;$/;"	m	struct:dengui::EventInfo	typeref:typename:deng::DrawCaller *
p_display	headers/deng/deng_surface_window.h	/^        Display *p_display;$/;"	m	struct:deng_SurfaceX11	typeref:typename:Display *
p_frame_mut	headers/dengui/dengui_events.h	/^        std::mutex *p_frame_mut;$/;"	m	struct:dengui::EventInfo	typeref:typename:std::mutex *
p_hwnd	headers/deng/deng_surface_window.h	/^        HWND *p_hwnd;$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:HWND *
p_indices	headers/das/assets.h	/^    deng_ui32_t *p_indices;$/;"	m	struct:deng_IndicesDynamic	typeref:typename:deng_ui32_t *
p_indices	headers/dengui/dengui_window.h	/^        std::vector<deng_ui32_t> *p_indices;$/;"	m	struct:dengui::WindowShapeInfo	typeref:typename:std::vector<deng_ui32_t> *
p_keys	headers/deng/deng_surface_window.h	/^    deng_Key *p_keys;$/;"	m	struct:deng_ActiveKeys	typeref:typename:deng_Key *
p_keys	headers/deng/deng_surface_window.h	/^    deng_Key *p_keys;$/;"	m	struct:deng_ReleasedKeys	typeref:typename:deng_Key *
p_main_buffer	headers/deng/rend_helpers.h	/^        VkBuffer *p_main_buffer                 = NULL;$/;"	m	struct:deng::BufferData	typeref:typename:VkBuffer *
p_main_buffer_memory	headers/deng/rend_helpers.h	/^        VkDeviceMemory *p_main_buffer_memory    = NULL;$/;"	m	struct:deng::BufferData	typeref:typename:VkDeviceMemory *
p_message	headers/deng/deng_surface_window.h	/^        MSG *p_message;$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:MSG *
p_pipeline_layout	headers/deng/rend_helpers.h	/^        VkPipelineLayout *p_pipeline_layout;$/;"	m	struct:deng::PipelineData	typeref:typename:VkPipelineLayout *
p_pixel_data	headers/das/assets.h	/^    deng_ui8_t *p_pixel_data;$/;"	m	struct:deng_PixelDataDynamic	typeref:typename:deng_ui8_t *
p_projection_matrix	headers/deng/camera.h	/^        dengMath::ProjectionMatrix *p_projection_matrix;$/;"	m	class:deng::Camera	typeref:typename:dengMath::ProjectionMatrix *
p_ra	headers/dengui/dengui_events.h	/^        deng::ResourceAllocator *p_ra;$/;"	m	struct:dengui::EventInfo	typeref:typename:deng::ResourceAllocator *
p_raw_input	headers/deng/deng_surface_window.h	/^        RAWINPUT *p_raw_input;$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:RAWINPUT *
p_recent_window	src/deng/win32_surface.c	/^static deng_SurfaceWindow *p_recent_window;$/;"	v	typeref:typename:deng_SurfaceWindow *	file:
p_res_mut	headers/dengui/dengui_events.h	/^        std::mutex *p_res_mut;$/;"	m	struct:dengui::EventInfo	typeref:typename:std::mutex *
p_tex_mapped_normalized_vert	headers/das/assets.h	/^    VERT_MAPPED_NOR *p_tex_mapped_normalized_vert;$/;"	m	struct:deng_VertDynamic	typeref:typename:VERT_MAPPED_NOR *
p_tex_mapped_unnormalized_vert	headers/das/assets.h	/^    VERT_MAPPED_UNOR *p_tex_mapped_unnormalized_vert;$/;"	m	struct:deng_VertDynamic	typeref:typename:VERT_MAPPED_UNOR *
p_tex_mapped_vert_data_2d	headers/das/assets.h	/^    VERT_MAPPED_2D *p_tex_mapped_vert_data_2d;$/;"	m	struct:deng_VertDynamic	typeref:typename:VERT_MAPPED_2D *
p_textures	headers/dengui/dengui_events.h	/^        std::vector<deng::TextureImageData> *p_textures;$/;"	m	struct:dengui::EventInfo	typeref:typename:std::vector<deng::TextureImageData> *
p_unmapped_normalized_vert	headers/das/assets.h	/^    VERT_UNMAPPED_NOR *p_unmapped_normalized_vert;$/;"	m	struct:deng_VertDynamic	typeref:typename:VERT_UNMAPPED_NOR *
p_unmapped_unnormalized_vert	headers/das/assets.h	/^    VERT_UNMAPPED_UNOR *p_unmapped_unnormalized_vert;$/;"	m	struct:deng_VertDynamic	typeref:typename:VERT_UNMAPPED_UNOR *
p_unmapped_vert_data_2d	headers/das/assets.h	/^    VERT_UNMAPPED_2D *p_unmapped_vert_data_2d;$/;"	m	struct:deng_VertDynamic	typeref:typename:VERT_UNMAPPED_2D *
p_update_flag	headers/dengui/dengui_events.h	/^        bool *p_update_flag;$/;"	m	struct:dengui::EventInfo	typeref:typename:bool *
p_update_mut	headers/dengui/dengui_events.h	/^        std::mutex *p_update_mut;$/;"	m	struct:dengui::EventInfo	typeref:typename:std::mutex *
p_vert	headers/dengui/dengui_window.h	/^        std::vector<VERT_UNMAPPED_2D> *p_vert;$/;"	m	struct:dengui::WindowShapeInfo	typeref:typename:std::vector<VERT_UNMAPPED_2D> *
p_window	headers/deng/deng_surface_window.h	/^        WNDCLASS *p_window;$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:WNDCLASS *
parent_id	headers/dengui/dengui_window.h	/^        std::string parent_id;$/;"	m	struct:dengui::WindowElement	typeref:typename:std::string
pc	headers/dengui/dengui_window.h	/^        dengMath::vec4<float> pc;$/;"	m	struct:dengui::WindowInfo	typeref:typename:dengMath::vec4<float>
pi	src/common/test.c	/^static unsigned int pi[32] = {$/;"	v	typeref:typename:unsigned int[32]	file:
pipeline	headers/deng/rend_helpers.h	/^        VkPipeline pipeline;$/;"	m	struct:deng::PipelineData	typeref:typename:VkPipeline
pipeline_type	headers/deng/rend_helpers.h	/^        deng_PipelineType pipeline_type;$/;"	m	struct:deng::PipelineData	typeref:typename:deng_PipelineType
pixelSizeToVector2DSize	src/deng/deng_math.cpp	/^    deng_vec_t Conversion::pixelSizeToVector2DSize ($/;"	f	class:dengMath::Conversion	typeref:typename:deng_vec_t
pixel_data	headers/das/assets.h	/^    deng_PixelDataDynamic pixel_data;$/;"	m	struct:deng_Texture	typeref:typename:deng_PixelDataDynamic
planes	headers/das/hdr_data.h	/^    deng_ui16_t planes;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_ui16_t
populateBufferMem	src/deng/rend_helpers.cpp	/^    void BufferCreator::populateBufferMem ($/;"	f	class:deng::BufferCreator	typeref:typename:void
pos	headers/dengui/dengui_window.h	/^        dengMath::vec2<deng_vec_t> pos;$/;"	m	struct:dengui::WindowShapeInfo	typeref:typename:dengMath::vec2<deng_vec_t>
pos	headers/dengui/dengui_window.h	/^        dengMath::vec2<float> pos;$/;"	m	struct:dengui::WindowInfo	typeref:typename:dengMath::vec2<float>
position	headers/dengui/dengui_child.h	/^        dengMath::vec2<deng_vec_t> position;$/;"	m	struct:dengui::ChildInfo	typeref:typename:dengMath::vec2<deng_vec_t>
position	headers/dengui/dengui_child.h	/^        dengMath::vec2<deng_vec_t> position;$/;"	m	struct:dengui::PushButtonInfo	typeref:typename:dengMath::vec2<deng_vec_t>
present_queue	headers/deng/rend_helpers.h	/^        VkQueue present_queue;$/;"	m	class:deng::QueueFamilyFinder	typeref:typename:VkQueue
projection	headers/deng/deng_math.h	/^        mat4<deng_vec_t> projection;$/;"	m	struct:dengMath::UniformData	typeref:typename:mat4<deng_vec_t>
pushToHashmap	src/common/hashmap.c	/^void pushToHashmap ($/;"	f	typeref:typename:void
pushWindowElements	src/dengui/dengui_events.cpp	/^    void Events::pushWindowElements ($/;"	f	class:dengui::Events	typeref:typename:void
radToDeg	src/deng/deng_math.cpp	/^    float Conversion::radToDeg(const float &rad) {$/;"	f	class:dengMath::Conversion	typeref:typename:float
raw_input_size	headers/deng/deng_surface_window.h	/^        UINT raw_input_size;$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:UINT
reMkBuffers	src/deng/renderer.cpp	/^    void ResourceAllocator::reMkBuffers ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
reallocateHashmap	src/common/hashmap.c	/^void reallocateHashmap(Hashmap *p_hm) {$/;"	f	typeref:typename:void
rec_origin	headers/dengui/dengui_window.h	/^        RectangleOrigin rec_origin;$/;"	m	struct:dengui::WindowShapeInfo	typeref:typename:RectangleOrigin
recent_press_btn	src/deng/win32_surface.c	/^static deng_MouseButton recent_press_btn;$/;"	v	typeref:typename:deng_MouseButton	file:
recent_press_btn	src/deng/x11_surface.c	/^static deng_MouseButton recent_press_btn;$/;"	v	typeref:typename:deng_MouseButton	file:
recent_press_key	src/deng/win32_surface.c	/^static deng_Key recent_press_key;$/;"	v	typeref:typename:deng_Key	file:
recent_press_key	src/deng/x11_surface.c	/^static deng_Key recent_press_key;$/;"	v	typeref:typename:deng_Key	file:
recent_release_btn	src/deng/win32_surface.c	/^static deng_MouseButton recent_release_btn;$/;"	v	typeref:typename:deng_MouseButton	file:
recent_release_btn	src/deng/x11_surface.c	/^static deng_MouseButton recent_release_btn;$/;"	v	typeref:typename:deng_MouseButton	file:
recent_release_key	src/deng/win32_surface.c	/^static deng_Key recent_release_key;$/;"	v	typeref:typename:deng_Key	file:
recent_release_key	src/deng/x11_surface.c	/^static deng_Key recent_release_key;$/;"	v	typeref:typename:deng_Key	file:
recordDrawCommands	src/deng/renderer.cpp	/^    void DrawCaller::recordDrawCommands ($/;"	f	class:deng::DrawCaller	typeref:typename:void
red_mask	headers/das/hdr_data.h	/^    deng_ui32_t red_mask;$/;"	m	struct:BMPColorHeader	typeref:typename:deng_ui32_t
released_keys	headers/deng/deng_surface_window.h	/^    deng_ReleasedKeys released_keys;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:deng_ReleasedKeys
remkSwapChain	src/deng/renderer.cpp	/^    void SwapChainCreator::remkSwapChain ($/;"	f	class:deng::SwapChainCreator	typeref:typename:void
rend_text	headers/utils/font.h	/^        BitmapChar *rend_text;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:BitmapChar *
render_finished_semaphore_set	headers/deng/renderer.h	/^        std::vector<VkSemaphore> render_finished_semaphore_set;$/;"	m	class:deng::DrawCaller	typeref:typename:std::vector<VkSemaphore>
renderpass	headers/dengui/dengui_events.h	/^        VkRenderPass renderpass;$/;"	m	struct:dengui::EventInfo	typeref:typename:VkRenderPass
repo_conf_path	headers/das/dam.h	/^char *repo_conf_path = "repos.conf";$/;"	v	typeref:typename:char *
reserved1	headers/das/hdr_data.h	/^    deng_ui16_t reserved1;$/;"	m	struct:BMPFileHeader	typeref:typename:deng_ui16_t
reserved2	headers/das/hdr_data.h	/^    deng_ui16_t reserved2;$/;"	m	struct:BMPFileHeader	typeref:typename:deng_ui16_t
rids	headers/deng/deng_surface_window.h	/^        RAWINPUTDEVICE rids[2];$/;"	m	struct:deng_SurfaceWIN32	typeref:typename:RAWINPUTDEVICE[2]
row1	headers/deng/deng_math.h	/^        vec2<T> row1;$/;"	m	struct:dengMath::mat2	typeref:typename:vec2<T>
row1	headers/deng/deng_math.h	/^        vec2<T> row1;$/;"	m	struct:dengMath::mat3x2	typeref:typename:vec2<T>
row1	headers/deng/deng_math.h	/^        vec3<T> row1;$/;"	m	struct:dengMath::mat3	typeref:typename:vec3<T>
row1	headers/deng/deng_math.h	/^        vec4<T> row1;$/;"	m	struct:dengMath::mat4	typeref:typename:vec4<T>
row2	headers/deng/deng_math.h	/^        vec2<T> row2;$/;"	m	struct:dengMath::mat2	typeref:typename:vec2<T>
row2	headers/deng/deng_math.h	/^        vec2<T> row2;$/;"	m	struct:dengMath::mat3x2	typeref:typename:vec2<T>
row2	headers/deng/deng_math.h	/^        vec3<T> row2;$/;"	m	struct:dengMath::mat3	typeref:typename:vec3<T>
row2	headers/deng/deng_math.h	/^        vec4<T> row2;$/;"	m	struct:dengMath::mat4	typeref:typename:vec4<T>
row3	headers/deng/deng_math.h	/^        vec2<T> row3;$/;"	m	struct:dengMath::mat3x2	typeref:typename:vec2<T>
row3	headers/deng/deng_math.h	/^        vec3<T> row3;$/;"	m	struct:dengMath::mat3	typeref:typename:vec3<T>
row3	headers/deng/deng_math.h	/^        vec4<T> row3;$/;"	m	struct:dengMath::mat4	typeref:typename:vec4<T>
row4	headers/deng/deng_math.h	/^        vec4<T> row4; $/;"	m	struct:dengMath::mat4	typeref:typename:vec4<T>
run	src/deng/renderer.cpp	/^    void Renderer::run() {$/;"	f	class:deng::Renderer	typeref:typename:void
sampler	headers/deng/rend_helpers.h	/^        VkSampler sampler;$/;"	m	struct:deng::TextureImageData	typeref:typename:VkSampler
sc	headers/dengui/dengui_window.h	/^        dengMath::vec4<float> sc;$/;"	m	struct:dengui::WindowInfo	typeref:typename:dengMath::vec4<float>
screen	headers/deng/deng_surface_window.h	/^        int screen;$/;"	m	struct:deng_SurfaceX11	typeref:typename:int
second	headers/deng/deng_math.h	/^        T first, second, third, fourth;$/;"	m	struct:dengMath::vec4	typeref:typename:T
second	headers/deng/deng_math.h	/^        T first, second, third;$/;"	m	struct:dengMath::vec3	typeref:typename:T
second	headers/deng/deng_math.h	/^        T first, second;$/;"	m	struct:dengMath::vec2	typeref:typename:T
selectPhysicalDevice	src/deng/renderer.cpp	/^    void InstanceCreator::selectPhysicalDevice() {$/;"	f	class:deng::InstanceCreator	typeref:typename:void
setAssetsData	src/deng/renderer.cpp	/^    void DrawCaller::setAssetsData ($/;"	f	class:deng::DrawCaller	typeref:typename:void
setAssetsData	src/deng/renderer.cpp	/^    void ResourceAllocator::setAssetsData ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
setCameraPosition	src/deng/deng_math.cpp	/^    void ViewMatrix::setCameraPosition(const vec4<float> &new_position) {$/;"	f	class:dengMath::ViewMatrix	typeref:typename:void
setCameraViewRotation	src/deng/camera.cpp	/^    void Camera::setCameraViewRotation() {$/;"	f	class:deng::Camera	typeref:typename:void
setHints	src/deng/renderer.cpp	/^    void Renderer::setHints (deng_RendererHintBits hints) {$/;"	f	class:deng::Renderer	typeref:typename:void
setInputMode	src/deng/window.cpp	/^    void WindowWrap::setInputMode(const deng_InputMode &new_input_mode) {    $/;"	f	class:deng::WindowWrap	typeref:typename:void
setMiscData	src/deng/renderer.cpp	/^    void DrawCaller::setMiscData ($/;"	f	class:deng::DrawCaller	typeref:typename:void
setMousePosition	src/deng/camera.cpp	/^    void Camera::setMousePosition(dengMath::vec2<float> &mouse_position) {$/;"	f	class:deng::Camera	typeref:typename:void
setNewTimePoint	src/utils/timer.cpp	/^    void Timer::setNewTimePoint() {$/;"	f	class:dengUtils::Timer	typeref:typename:void
setPC	src/dengui/dengui_window.cpp	/^    void Window::setPC(dengMath::vec4<float> *p_pc) { m_primary_color = *p_pc; }$/;"	f	class:dengui::Window	typeref:typename:void
setPos	src/dengui/dengui_window.cpp	/^    void Window::setPos(dengMath::vec2<float> &pos) { m_pos = pos; }$/;"	f	class:dengui::Window	typeref:typename:void
setRotation	src/deng/deng_math.cpp	/^    void ModelMatrix::setRotation(const float &x_rot, const float &y_rot, const float &z_rot) {$/;"	f	class:dengMath::ModelMatrix	typeref:typename:void
setRotation	src/deng/deng_math.cpp	/^    void ViewMatrix::setRotation(const float &x_rot, const float &y_rot) {$/;"	f	class:dengMath::ViewMatrix	typeref:typename:void
setSC	src/dengui/dengui_window.cpp	/^    void Window::setSC(dengMath::vec4<float> *p_sc) { m_secondary_color = *p_sc; }$/;"	f	class:dengui::Window	typeref:typename:void
setScale	src/deng/deng_math.cpp	/^    void ModelMatrix::setScale(const float &scale_x, const float &scale_y, const float &scale_z)/;"	f	class:dengMath::ModelMatrix	typeref:typename:void
setSize	src/dengui/dengui_window.cpp	/^    void Window::setSize(dengMath::vec2<float> &size) { m_size = size; }$/;"	f	class:dengui::Window	typeref:typename:void
setTC	src/dengui/dengui_window.cpp	/^    void Window::setTC(dengMath::vec4<float> *p_tc) { m_tertiary_color = *p_tc; }$/;"	f	class:dengui::Window	typeref:typename:void
setTransformation	src/deng/deng_math.cpp	/^    void ModelMatrix::setTransformation(const float &transform_x, const float &transform_y, cons/;"	f	class:dengMath::ModelMatrix	typeref:typename:void
setTransformationMatrix	src/deng/deng_math.cpp	/^    void ViewMatrix::setTransformationMatrix() {$/;"	f	class:dengMath::ViewMatrix	typeref:typename:void
setUpdateFlag	src/dengui/dengui_events.cpp	/^    void Events::setUpdateFlag() { *m_info.p_update_flag = true; }$/;"	f	class:dengui::Events	typeref:typename:void
size	headers/das/assets.h	/^    size_t size;$/;"	m	struct:deng_IndicesDynamic	typeref:typename:size_t
size	headers/das/assets.h	/^    size_t size;$/;"	m	struct:deng_PixelDataDynamic	typeref:typename:size_t
size	headers/das/assets.h	/^    size_t size;$/;"	m	struct:deng_VertDynamic	typeref:typename:size_t
size	headers/das/hdr_data.h	/^    deng_ui32_t size;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_ui32_t
size	headers/deng/deng_math.h	/^        size_t size() {$/;"	f	struct:dengMath::vec2	typeref:typename:size_t
size	headers/deng/deng_math.h	/^        size_t size() {$/;"	f	struct:dengMath::vec3	typeref:typename:size_t
size	headers/deng/deng_math.h	/^        size_t size() {$/;"	f	struct:dengMath::vec4	typeref:typename:size_t
size	headers/dengui/dengui_child.h	/^        dengMath::vec2<deng_vec_t> size;$/;"	m	struct:dengui::ChildInfo	typeref:typename:dengMath::vec2<deng_vec_t>
size	headers/dengui/dengui_child.h	/^        dengMath::vec2<deng_vec_t> size;$/;"	m	struct:dengui::PushButtonInfo	typeref:typename:dengMath::vec2<deng_vec_t>
size	headers/dengui/dengui_window.h	/^        dengMath::vec2<deng_vec_t> size;$/;"	m	struct:dengui::WindowShapeInfo	typeref:typename:dengMath::vec2<deng_vec_t>
size	headers/dengui/dengui_window.h	/^        dengMath::vec2<float> size;$/;"	m	struct:dengui::WindowInfo	typeref:typename:dengMath::vec2<float>
size_image	headers/das/hdr_data.h	/^    deng_ui32_t size_image;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_ui32_t
sortInDecliningOrder	src/deng/deng_math.cpp	/^    void sortInDecliningOrder(std::vector<T> *p_elements_vector) {$/;"	f	namespace:dengMath	typeref:typename:void
sortInGrowingOrder	src/deng/deng_math.cpp	/^    void sortInGrowingOrder(std::vector<T> *p_elements_vector) {$/;"	f	namespace:dengMath	typeref:typename:void
sortVectorInDecliningOrder	src/deng/deng_math.cpp	/^    void sortVectorInDecliningOrder(std::vector<T> *p_elements_vector, deng_CoordinateAxisType c/;"	f	namespace:dengMath	typeref:typename:void
sortVectorInGrowingOrder	src/deng/deng_math.cpp	/^    void sortVectorInGrowingOrder(std::vector<T> *p_elements_vector, deng_CoordinateAxisType coo/;"	f	namespace:dengMath	typeref:typename:void
staging_buffer	headers/deng/rend_helpers.h	/^        VkBuffer staging_buffer;$/;"	m	struct:deng::BufferData	typeref:typename:VkBuffer
staging_buffer_memory	headers/deng/rend_helpers.h	/^        VkDeviceMemory staging_buffer_memory;$/;"	m	struct:deng::BufferData	typeref:typename:VkDeviceMemory
strRasterWidthTrim	src/utils/font.cpp	/^    char *StringRasterizer::strRasterWidthTrim ($/;"	f	class:dengUtils::StringRasterizer	typeref:typename:char *
submitAssets	src/deng/renderer.cpp	/^    void Renderer::submitAssets ($/;"	f	class:deng::Renderer	typeref:typename:void
submitRendStr	src/deng/renderer.cpp	/^    void Renderer::submitRendStr ($/;"	f	class:deng::Renderer	typeref:typename:void
submitTextureFile	src/deng/renderer.cpp	/^    void Renderer::submitTextureFile ($/;"	f	class:deng::Renderer	typeref:typename:void
submitTextures	src/deng/renderer.cpp	/^    void Renderer::submitTextures ($/;"	f	class:deng::Renderer	typeref:typename:void
tc	headers/dengui/dengui_window.h	/^        dengMath::vec4<float> tc;$/;"	m	struct:dengui::WindowInfo	typeref:typename:dengMath::vec4<float>
tex	headers/das/data_loader.h	/^        deng_ui32_t tex;$/;"	m	struct:IndexSet	typeref:typename:deng_ui32_t
tex_box	headers/dengui/dengui_window.h	/^        dengMath::vec2<deng_i32_t> tex_box;$/;"	m	struct:dengui::WindowElement	typeref:typename:dengMath::vec2<deng_i32_t>
tex_data	headers/das/assets.h	/^    deng_ObjTextureData tex_data;$/;"	m	struct:VERT_MAPPED_2D	typeref:typename:deng_ObjTextureData
tex_data	headers/das/assets.h	/^    deng_ObjTextureData tex_data;$/;"	m	struct:VERT_MAPPED_NOR	typeref:typename:deng_ObjTextureData
tex_data	headers/das/assets.h	/^    deng_ObjTextureData tex_data;$/;"	m	struct:VERT_MAPPED_UNOR	typeref:typename:deng_ObjTextureData
tex_data	headers/utils/font.h	/^        std::vector<deng_ui8_t> tex_data;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:std::vector<deng_ui8_t>
tex_id	headers/das/assets.h	/^    char *tex_id;$/;"	m	struct:deng_Asset	typeref:typename:char *
tex_x	headers/das/assets.h	/^    deng_vec_t tex_x;$/;"	m	struct:deng_ObjTextureData	typeref:typename:deng_vec_t
tex_y	headers/das/assets.h	/^    deng_vec_t tex_y;$/;"	m	struct:deng_ObjTextureData	typeref:typename:deng_vec_t
text	headers/utils/font.h	/^        const char *text;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:const char *
text_box_c	src/deng/renderer.cpp	/^    static deng_ui16_t text_box_c = 0;$/;"	v	namespace:deng	typeref:typename:deng_ui16_t	file:
texture	headers/deng/rend_helpers.h	/^        deng_Texture texture;$/;"	m	struct:deng::TextureImageData	typeref:typename:deng_Texture
texture	headers/dengui/dengui_window.h	/^        std::vector<deng_ui8_t> texture;$/;"	m	struct:dengui::WindowElement	typeref:typename:std::vector<deng_ui8_t>
texture_c	src/deng/renderer.cpp	/^    static deng_ui16_t texture_c = 0;$/;"	v	namespace:deng	typeref:typename:deng_ui16_t	file:
third	headers/deng/deng_math.h	/^        T first, second, third, fourth;$/;"	m	struct:dengMath::vec4	typeref:typename:T
third	headers/deng/deng_math.h	/^        T first, second, third;$/;"	m	struct:dengMath::vec3	typeref:typename:T
time_point	headers/das/assets.h	/^    deng_ui64_t time_point; $/;"	m	struct:deng_Asset	typeref:typename:deng_ui64_t
time_point	headers/utils/timer.h	/^        long time_point;$/;"	m	class:dengUtils::Timer	typeref:typename:long
timestamp	headers/das/hdr_data.h	/^    deng_ui64_t timestamp;$/;"	m	struct:INFO_HDR	typeref:typename:deng_ui64_t
trSurface2D	src/deng/deng_math.cpp	/^    float trSurface2D(std::array<vec2<float>, 3> tr_verts) {$/;"	f	namespace:dengMath	typeref:typename:float
transitionImageLayout	src/deng/rend_helpers.cpp	/^    void BufferCreator::transitionImageLayout ($/;"	f	class:deng::BufferCreator	typeref:typename:void
translateWIN32Btn	src/deng/key_translation.c	/^deng_MouseButton translateWIN32Btn(UINT msg) {$/;"	f	typeref:typename:deng_MouseButton
translateWIN32Key	src/deng/key_translation.c	/^deng_Key translateWIN32Key(deng_ui16_t key_code) {$/;"	f	typeref:typename:deng_Key
translateX11Btn	src/deng/key_translation.c	/^deng_MouseButton translateX11Btn(unsigned int button) {$/;"	f	typeref:typename:deng_MouseButton
translateX11Key	src/deng/key_translation.c	/^deng_Key translateX11Key(KeySym keysym) {$/;"	f	typeref:typename:deng_Key
true	headers/common/base_types.h	/^#define true /;"	d
true	headers/das/das_core.h	/^#define true /;"	d
true	headers/deng/deng_surface_window.h	/^#define true /;"	d
true	src/common/common.c	/^#define true /;"	d	file:
unique_glyphs	headers/utils/font.h	/^        std::vector<BitmapGlyphData> unique_glyphs;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:std::vector<BitmapGlyphData>
unmapped_vert	headers/dengui/dengui_window.h	/^        std::vector<VERT_UNMAPPED_2D> unmapped_vert;$/;"	m	struct:dengui::WindowElement	typeref:typename:std::vector<VERT_UNMAPPED_2D>
unmapped_vert	headers/dengui/dengui_window.h	/^        std::vector<VERT_UNMAPPED_2D> unmapped_vert;$/;"	m	struct:dengui::WindowUpdateInfo	typeref:typename:std::vector<VERT_UNMAPPED_2D>
unused	headers/das/hdr_data.h	/^    deng_ui32_t unused[16];$/;"	m	struct:BMPColorHeader	typeref:typename:deng_ui32_t[16]
update	headers/dengui/dengui_window.h	/^        bool update;$/;"	m	struct:dengui::WindowUpdateInfo	typeref:typename:bool
update	src/deng/events.cpp	/^    void Events::update() {$/;"	f	class:dengMath::Events	typeref:typename:void
updateAssetsVisibility	src/dengui/dengui_events.cpp	/^    void Events::updateAssetsVisibility(std::string parent_id) {$/;"	f	class:dengui::Events	typeref:typename:void
updateCommandBuffers	src/deng/renderer.cpp	/^    void DrawCaller::updateCommandBuffers ($/;"	f	class:deng::DrawCaller	typeref:typename:void
updateCursorPos	src/deng/camera.cpp	/^    void Camera::updateCursorPos() {$/;"	f	class:deng::Camera	typeref:typename:void
updateDescriptorPools	src/deng/renderer.cpp	/^    void DescriptorCreator::updateDescriptorPools ($/;"	f	class:deng::DescriptorCreator	typeref:typename:void
updateMainBuffer	src/deng/renderer.cpp	/^    void ResourceAllocator::updateMainBuffer ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
updateUniformBufferData	src/deng/renderer.cpp	/^    void ResourceAllocator::updateUniformBufferData ($/;"	f	class:deng::ResourceAllocator	typeref:typename:void
update_infos	headers/dengui/dengui_window.h	/^        std::vector<WindowUpdateInfo> update_infos;$/;"	m	struct:dengui::SharedWindowUpdateInfos	typeref:typename:std::vector<WindowUpdateInfo>
used_size	headers/common/hashmap.h	/^    size_t used_size;$/;"	m	struct:Hashmap	typeref:typename:size_t
vec2	headers/deng/deng_math.h	/^    struct vec2 {$/;"	s	namespace:dengMath
vec3	headers/deng/deng_math.h	/^    struct vec3 {$/;"	s	namespace:dengMath
vec4	headers/deng/deng_math.h	/^    struct vec4 {$/;"	s	namespace:dengMath
vecCast	headers/deng/deng_math.h	/^        vec2<EndCast> vecCast() {$/;"	f	struct:dengMath::vec2	typeref:typename:vec2<EndCast>
vecCast	headers/deng/deng_math.h	/^        vec3<EndCast> vecCast() {$/;"	f	struct:dengMath::vec3	typeref:typename:vec3<EndCast>
vecCast	headers/deng/deng_math.h	/^        vec4<EndCast> vecCast() {$/;"	f	struct:dengMath::vec4	typeref:typename:vec4<EndCast>
vector2DSizeToPixelSize	src/deng/deng_math.cpp	/^    deng_px_t Conversion::vector2DSizeToPixelSize ($/;"	f	class:dengMath::Conversion	typeref:typename:deng_px_t
verifyFont	src/utils/font.cpp	/^    bool StringRasterizer::verifyFont(BitmapStr &str, std::string &out_path) {$/;"	f	class:dengUtils::StringRasterizer	typeref:typename:bool
vert	headers/das/data_loader.h	/^        deng_ui32_t vert;$/;"	m	struct:IndexSet	typeref:typename:deng_ui32_t
vert_count	headers/das/hdr_data.h	/^    deng_ui32_t vert_count;$/;"	m	struct:VERT_HDR	typeref:typename:deng_ui32_t
vert_data	headers/das/assets.h	/^    deng_ObjVertData vert_data;$/;"	m	struct:VERT_MAPPED_NOR	typeref:typename:deng_ObjVertData
vert_data	headers/das/assets.h	/^    deng_ObjVertData vert_data;$/;"	m	struct:VERT_MAPPED_UNOR	typeref:typename:deng_ObjVertData
vert_data	headers/das/assets.h	/^    deng_ObjVertData vert_data;$/;"	m	struct:VERT_UNMAPPED_NOR	typeref:typename:deng_ObjVertData
vert_data	headers/das/assets.h	/^    deng_ObjVertData vert_data;$/;"	m	struct:VERT_UNMAPPED_UNOR	typeref:typename:deng_ObjVertData
vert_data	headers/das/assets.h	/^    deng_ObjVertData2D vert_data;$/;"	m	struct:VERT_MAPPED_2D	typeref:typename:deng_ObjVertData2D
vert_data	headers/das/assets.h	/^    deng_ObjVertData2D vert_data;$/;"	m	struct:VERT_UNMAPPED_2D	typeref:typename:deng_ObjVertData2D
vert_indices	headers/utils/font.h	/^        std::array<deng_ui32_t, 6> vert_indices;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:std::array<deng_ui32_t,6>
vert_offset	headers/das/assets.h	/^    deng_ui64_t vert_offset;$/;"	m	struct:UNI_OFFSET	typeref:typename:deng_ui64_t
vert_pos	headers/utils/font.h	/^        std::array<VERT_MAPPED_2D, 4> vert_pos;$/;"	m	struct:dengUtils::BitmapStr	typeref:typename:std::array<VERT_MAPPED_2D,4>
vert_type	headers/das/hdr_data.h	/^    deng_ui8_t vert_type;$/;"	m	struct:INFO_HDR	typeref:typename:deng_ui8_t
vert_x	headers/das/assets.h	/^    deng_vec_t vert_x;$/;"	m	struct:deng_ObjVertData	typeref:typename:deng_vec_t
vert_x	headers/das/assets.h	/^    deng_vec_t vert_x;$/;"	m	struct:deng_ObjVertData2D	typeref:typename:deng_vec_t
vert_y	headers/das/assets.h	/^    deng_vec_t vert_y;$/;"	m	struct:deng_ObjVertData	typeref:typename:deng_vec_t
vert_y	headers/das/assets.h	/^    deng_vec_t vert_y;$/;"	m	struct:deng_ObjVertData2D	typeref:typename:deng_vec_t
vert_z	headers/das/assets.h	/^    deng_vec_t vert_z;$/;"	m	struct:deng_ObjVertData	typeref:typename:deng_vec_t
vertices	headers/das/assets.h	/^    deng_VertDynamic vertices;$/;"	m	struct:deng_Asset	typeref:typename:deng_VertDynamic
vertices_data	headers/das/hdr_data.h	/^    deng_VertDynamic vertices_data;$/;"	m	struct:VERT_HDR	typeref:typename:deng_VertDynamic
view	headers/deng/deng_math.h	/^        mat4<deng_vec_t> view;$/;"	m	struct:dengMath::UniformData	typeref:typename:mat4<deng_vec_t>
view_matrix	headers/deng/camera.h	/^        dengMath::ViewMatrix view_matrix;$/;"	m	class:deng::Camera	typeref:typename:dengMath::ViewMatrix
virtual_mouse_position	headers/deng/deng_surface_window.h	/^    deng_VirtualMousePosition virtual_mouse_position;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:deng_VirtualMousePosition
waitForNoInput	src/dengui/dengui_events.cpp	/^    void Events::waitForNoInput(deng_MouseButton btn) {$/;"	f	class:dengui::Events	typeref:typename:void
width	headers/das/assets.h	/^    deng_ui16_t width;$/;"	m	struct:deng_PixelDataDynamic	typeref:typename:deng_ui16_t
width	headers/das/hdr_data.h	/^    deng_i32_t width;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_i32_t
width	headers/das/hdr_data.h	/^    deng_ui16_t width;$/;"	m	struct:TGAInfoHeader	typeref:typename:deng_ui16_t
width	headers/deng/deng_surface_window.h	/^    int width;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:int
win32_handler	headers/deng/deng_surface_window.h	/^        deng_SurfaceWIN32 win32_handler;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:deng_SurfaceWIN32
win32_message_handler	src/deng/win32_surface.c	/^LRESULT CALLBACK win32_message_handler(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {$/;"	f	typeref:typename:LRESULT CALLBACK
win_id	headers/dengui/dengui_window.h	/^        std::string win_id;$/;"	m	struct:dengui::WindowUpdateInfo	typeref:typename:std::string
window	headers/deng/deng_surface_window.h	/^        Window window;$/;"	m	struct:deng_SurfaceX11	typeref:typename:Window
windowAssetSync	src/dengui/dengui_events.cpp	/^    void Events::windowAssetSync() {$/;"	f	class:dengui::Events	typeref:typename:void
window_mode	headers/deng/deng_surface_window.h	/^    deng_SurfaceWindowMode window_mode;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:deng_SurfaceWindowMode
window_title	headers/deng/deng_surface_window.h	/^    const char *window_title;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:const char *
wt	headers/dengui/dengui_window.h	/^        WindowType wt;$/;"	m	struct:dengui::WindowInfo	typeref:typename:WindowType
x	headers/deng/deng_surface_window.h	/^    float x;$/;"	m	struct:deng_VirtualMousePosition	typeref:typename:float
x11_handler	headers/deng/deng_surface_window.h	/^        deng_SurfaceX11 x11_handler;$/;"	m	struct:deng_SurfaceWindow	typeref:typename:deng_SurfaceX11
x_origin	headers/das/hdr_data.h	/^    deng_ui16_t x_origin;$/;"	m	struct:TGAInfoHeader	typeref:typename:deng_ui16_t
x_pixels_per_meter	headers/das/hdr_data.h	/^    deng_i32_t x_pixels_per_meter;$/;"	m	struct:BMPInfoHeader	typeref:typename:deng_i32_t
x_rot	headers/deng/deng_math.h	/^        float x_rot;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:float
y	headers/deng/deng_surface_window.h	/^    float y;$/;"	m	struct:deng_VirtualMousePosition	typeref:typename:float
y_origin	headers/das/hdr_data.h	/^    deng_ui16_t y_origin;$/;"	m	struct:TGAInfoHeader	typeref:typename:deng_ui16_t
y_pixels_per_meter	headers/das/hdr_data.h	/^    deng_i32_t y_pixels_per_meter; $/;"	m	struct:BMPInfoHeader	typeref:typename:deng_i32_t
y_rot	headers/deng/deng_math.h	/^        float y_rot;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:float
z_rot	headers/deng/deng_math.h	/^        float z_rot;$/;"	m	class:dengMath::ViewMatrix	typeref:typename:float
~Camera	src/deng/camera.cpp	/^    Camera::~Camera() {$/;"	f	class:deng::Camera
~Events	src/dengui/dengui_events.cpp	/^    Events::~Events() {$/;"	f	class:dengui::Events
~GridManager	src/utils/grid_generator.cpp	/^    GridManager::~GridManager() {$/;"	f	class:dengUtils::GridManager
~PipelineCreator	src/deng/rend_helpers.cpp	/^    PipelineCreator::~PipelineCreator() {$/;"	f	class:deng::PipelineCreator
~StringRasterizer	src/utils/font.cpp	/^    StringRasterizer::~StringRasterizer() { FT_Done_FreeType(m_library_instance); }$/;"	f	class:dengUtils::StringRasterizer
~SwapChainCreator	src/deng/renderer.cpp	/^    SwapChainCreator::~SwapChainCreator() {$/;"	f	class:deng::SwapChainCreator
~WindowWrap	src/deng/window.cpp	/^    WindowWrap::~WindowWrap() {$/;"	f	class:deng::WindowWrap
